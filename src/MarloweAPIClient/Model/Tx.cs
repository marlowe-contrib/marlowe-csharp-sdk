/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Tx
    /// </summary>
    [DataContract(Name = "Tx")]
    public partial class Tx : IEquatable<Tx>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public TxStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tx" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Tx() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tx" /> class.
        /// </summary>
        /// <param name="assets">assets (required).</param>
        /// <param name="block">block.</param>
        /// <param name="consumingTx">The hex-encoded identifier of a Cardano transaction.</param>
        /// <param name="continuations">continuations.</param>
        /// <param name="contractId">A reference to a transaction output with a transaction ID and index. (required).</param>
        /// <param name="inputs">inputs (required).</param>
        /// <param name="inputUtxo">A reference to a transaction output with a transaction ID and index. (required).</param>
        /// <param name="invalidBefore">invalidBefore (required).</param>
        /// <param name="invalidHereafter">invalidHereafter (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="outputContract">outputContract.</param>
        /// <param name="outputState">outputState.</param>
        /// <param name="outputUtxo">A reference to a transaction output with a transaction ID and index..</param>
        /// <param name="payouts">payouts (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="transactionId">The hex-encoded identifier of a Cardano transaction (required).</param>
        /// <param name="txBody">txBody.</param>
        public Tx(Assets assets = default(Assets), BlockHeader block = default(BlockHeader), string consumingTx = default(string), string continuations = default(string), string contractId = default(string), List<Input> inputs = default(List<Input>), string inputUtxo = default(string), string invalidBefore = default(string), string invalidHereafter = default(string), Dictionary<string, Metadata> metadata = default(Dictionary<string, Metadata>), Contract outputContract = default(Contract), MarloweState outputState = default(MarloweState), string outputUtxo = default(string), List<Payout> payouts = default(List<Payout>), TxStatus status = default(TxStatus), Dictionary<string, Metadata> tags = default(Dictionary<string, Metadata>), string transactionId = default(string), TextEnvelope txBody = default(TextEnvelope))
        {
            // to ensure "assets" is required (not null)
            if (assets == null)
            {
                throw new ArgumentNullException("assets is a required property for Tx and cannot be null");
            }
            this.Assets = assets;
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new ArgumentNullException("contractId is a required property for Tx and cannot be null");
            }
            this.ContractId = contractId;
            // to ensure "inputs" is required (not null)
            if (inputs == null)
            {
                throw new ArgumentNullException("inputs is a required property for Tx and cannot be null");
            }
            this.Inputs = inputs;
            // to ensure "inputUtxo" is required (not null)
            if (inputUtxo == null)
            {
                throw new ArgumentNullException("inputUtxo is a required property for Tx and cannot be null");
            }
            this.InputUtxo = inputUtxo;
            // to ensure "invalidBefore" is required (not null)
            if (invalidBefore == null)
            {
                throw new ArgumentNullException("invalidBefore is a required property for Tx and cannot be null");
            }
            this.InvalidBefore = invalidBefore;
            // to ensure "invalidHereafter" is required (not null)
            if (invalidHereafter == null)
            {
                throw new ArgumentNullException("invalidHereafter is a required property for Tx and cannot be null");
            }
            this.InvalidHereafter = invalidHereafter;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for Tx and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "payouts" is required (not null)
            if (payouts == null)
            {
                throw new ArgumentNullException("payouts is a required property for Tx and cannot be null");
            }
            this.Payouts = payouts;
            this.Status = status;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for Tx and cannot be null");
            }
            this.Tags = tags;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for Tx and cannot be null");
            }
            this.TransactionId = transactionId;
            this.Block = block;
            this.ConsumingTx = consumingTx;
            this.Continuations = continuations;
            this.OutputContract = outputContract;
            this.OutputState = outputState;
            this.OutputUtxo = outputUtxo;
            this.TxBody = txBody;
        }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", IsRequired = true, EmitDefaultValue = true)]
        public Assets Assets { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public BlockHeader Block { get; set; }

        /// <summary>
        /// The hex-encoded identifier of a Cardano transaction
        /// </summary>
        /// <value>The hex-encoded identifier of a Cardano transaction</value>
        [DataMember(Name = "consumingTx", EmitDefaultValue = false)]
        public string ConsumingTx { get; set; }

        /// <summary>
        /// Gets or Sets Continuations
        /// </summary>
        [DataMember(Name = "continuations", EmitDefaultValue = false)]
        public string Continuations { get; set; }

        /// <summary>
        /// A reference to a transaction output with a transaction ID and index.
        /// </summary>
        /// <value>A reference to a transaction output with a transaction ID and index.</value>
        /// <example>98d601c9307dd43307cf68a03aad0086d4e07a789b66919ccf9f7f7676577eb7#1</example>
        [DataMember(Name = "contractId", IsRequired = true, EmitDefaultValue = true)]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", IsRequired = true, EmitDefaultValue = true)]
        public List<Input> Inputs { get; set; }

        /// <summary>
        /// A reference to a transaction output with a transaction ID and index.
        /// </summary>
        /// <value>A reference to a transaction output with a transaction ID and index.</value>
        /// <example>98d601c9307dd43307cf68a03aad0086d4e07a789b66919ccf9f7f7676577eb7#1</example>
        [DataMember(Name = "inputUtxo", IsRequired = true, EmitDefaultValue = true)]
        public string InputUtxo { get; set; }

        /// <summary>
        /// Gets or Sets InvalidBefore
        /// </summary>
        /// <example>2016-07-22T00:00:00Z</example>
        [DataMember(Name = "invalidBefore", IsRequired = true, EmitDefaultValue = true)]
        public string InvalidBefore { get; set; }

        /// <summary>
        /// Gets or Sets InvalidHereafter
        /// </summary>
        /// <example>2016-07-22T00:00:00Z</example>
        [DataMember(Name = "invalidHereafter", IsRequired = true, EmitDefaultValue = true)]
        public string InvalidHereafter { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Metadata> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets OutputContract
        /// </summary>
        [DataMember(Name = "outputContract", EmitDefaultValue = false)]
        public Contract OutputContract { get; set; }

        /// <summary>
        /// Gets or Sets OutputState
        /// </summary>
        [DataMember(Name = "outputState", EmitDefaultValue = false)]
        public MarloweState OutputState { get; set; }

        /// <summary>
        /// A reference to a transaction output with a transaction ID and index.
        /// </summary>
        /// <value>A reference to a transaction output with a transaction ID and index.</value>
        /// <example>98d601c9307dd43307cf68a03aad0086d4e07a789b66919ccf9f7f7676577eb7#1</example>
        [DataMember(Name = "outputUtxo", EmitDefaultValue = false)]
        public string OutputUtxo { get; set; }

        /// <summary>
        /// Gets or Sets Payouts
        /// </summary>
        [DataMember(Name = "payouts", IsRequired = true, EmitDefaultValue = true)]
        public List<Payout> Payouts { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Metadata> Tags { get; set; }

        /// <summary>
        /// The hex-encoded identifier of a Cardano transaction
        /// </summary>
        /// <value>The hex-encoded identifier of a Cardano transaction</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets TxBody
        /// </summary>
        [DataMember(Name = "txBody", EmitDefaultValue = false)]
        public TextEnvelope TxBody { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Tx {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  ConsumingTx: ").Append(ConsumingTx).Append("\n");
            sb.Append("  Continuations: ").Append(Continuations).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  InputUtxo: ").Append(InputUtxo).Append("\n");
            sb.Append("  InvalidBefore: ").Append(InvalidBefore).Append("\n");
            sb.Append("  InvalidHereafter: ").Append(InvalidHereafter).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OutputContract: ").Append(OutputContract).Append("\n");
            sb.Append("  OutputState: ").Append(OutputState).Append("\n");
            sb.Append("  OutputUtxo: ").Append(OutputUtxo).Append("\n");
            sb.Append("  Payouts: ").Append(Payouts).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TxBody: ").Append(TxBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tx);
        }

        /// <summary>
        /// Returns true if Tx instances are equal
        /// </summary>
        /// <param name="input">Instance of Tx to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tx input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Assets == input.Assets ||
                    (this.Assets != null &&
                    this.Assets.Equals(input.Assets))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.ConsumingTx == input.ConsumingTx ||
                    (this.ConsumingTx != null &&
                    this.ConsumingTx.Equals(input.ConsumingTx))
                ) && 
                (
                    this.Continuations == input.Continuations ||
                    (this.Continuations != null &&
                    this.Continuations.Equals(input.Continuations))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.InputUtxo == input.InputUtxo ||
                    (this.InputUtxo != null &&
                    this.InputUtxo.Equals(input.InputUtxo))
                ) && 
                (
                    this.InvalidBefore == input.InvalidBefore ||
                    (this.InvalidBefore != null &&
                    this.InvalidBefore.Equals(input.InvalidBefore))
                ) && 
                (
                    this.InvalidHereafter == input.InvalidHereafter ||
                    (this.InvalidHereafter != null &&
                    this.InvalidHereafter.Equals(input.InvalidHereafter))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.OutputContract == input.OutputContract ||
                    (this.OutputContract != null &&
                    this.OutputContract.Equals(input.OutputContract))
                ) && 
                (
                    this.OutputState == input.OutputState ||
                    (this.OutputState != null &&
                    this.OutputState.Equals(input.OutputState))
                ) && 
                (
                    this.OutputUtxo == input.OutputUtxo ||
                    (this.OutputUtxo != null &&
                    this.OutputUtxo.Equals(input.OutputUtxo))
                ) && 
                (
                    this.Payouts == input.Payouts ||
                    this.Payouts != null &&
                    input.Payouts != null &&
                    this.Payouts.SequenceEqual(input.Payouts)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.TxBody == input.TxBody ||
                    (this.TxBody != null &&
                    this.TxBody.Equals(input.TxBody))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assets != null)
                {
                    hashCode = (hashCode * 59) + this.Assets.GetHashCode();
                }
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                if (this.ConsumingTx != null)
                {
                    hashCode = (hashCode * 59) + this.ConsumingTx.GetHashCode();
                }
                if (this.Continuations != null)
                {
                    hashCode = (hashCode * 59) + this.Continuations.GetHashCode();
                }
                if (this.ContractId != null)
                {
                    hashCode = (hashCode * 59) + this.ContractId.GetHashCode();
                }
                if (this.Inputs != null)
                {
                    hashCode = (hashCode * 59) + this.Inputs.GetHashCode();
                }
                if (this.InputUtxo != null)
                {
                    hashCode = (hashCode * 59) + this.InputUtxo.GetHashCode();
                }
                if (this.InvalidBefore != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidBefore.GetHashCode();
                }
                if (this.InvalidHereafter != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidHereafter.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.OutputContract != null)
                {
                    hashCode = (hashCode * 59) + this.OutputContract.GetHashCode();
                }
                if (this.OutputState != null)
                {
                    hashCode = (hashCode * 59) + this.OutputState.GetHashCode();
                }
                if (this.OutputUtxo != null)
                {
                    hashCode = (hashCode * 59) + this.OutputUtxo.GetHashCode();
                }
                if (this.Payouts != null)
                {
                    hashCode = (hashCode * 59) + this.Payouts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.TxBody != null)
                {
                    hashCode = (hashCode * 59) + this.TxBody.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.ConsumingTx != null) {
                // ConsumingTx (string) pattern
                Regex regexConsumingTx = new Regex(@"^[a-fA-F0-9]{64}$", RegexOptions.CultureInvariant);
                if (!regexConsumingTx.Match(this.ConsumingTx).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConsumingTx, must match a pattern of " + regexConsumingTx, new [] { "ConsumingTx" });
                }
            }

            if (this.ContractId != null) {
                // ContractId (string) pattern
                Regex regexContractId = new Regex(@"^[a-fA-F0-9]{64}#[0-9]+$", RegexOptions.CultureInvariant);
                if (!regexContractId.Match(this.ContractId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContractId, must match a pattern of " + regexContractId, new [] { "ContractId" });
                }
            }

            if (this.InputUtxo != null) {
                // InputUtxo (string) pattern
                Regex regexInputUtxo = new Regex(@"^[a-fA-F0-9]{64}#[0-9]+$", RegexOptions.CultureInvariant);
                if (!regexInputUtxo.Match(this.InputUtxo).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InputUtxo, must match a pattern of " + regexInputUtxo, new [] { "InputUtxo" });
                }
            }

            if (this.OutputUtxo != null) {
                // OutputUtxo (string) pattern
                Regex regexOutputUtxo = new Regex(@"^[a-fA-F0-9]{64}#[0-9]+$", RegexOptions.CultureInvariant);
                if (!regexOutputUtxo.Match(this.OutputUtxo).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutputUtxo, must match a pattern of " + regexOutputUtxo, new [] { "OutputUtxo" });
                }
            }

            if (this.TransactionId != null) {
                // TransactionId (string) pattern
                Regex regexTransactionId = new Regex(@"^[a-fA-F0-9]{64}$", RegexOptions.CultureInvariant);
                if (!regexTransactionId.Match(this.TransactionId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, must match a pattern of " + regexTransactionId, new [] { "TransactionId" });
                }
            }

            yield break;
        }
    }

}
