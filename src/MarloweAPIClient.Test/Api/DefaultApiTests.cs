/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Reflection;
using System.Text;
using MarloweAPIClient.Api;
using MarloweAPIClient.Client;
using Newtonsoft.Json;
using Xunit;

// uncomment below to import models
//using MarloweAPIClient.Model;

namespace MarloweAPIClient.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            Configuration config = new Configuration();
            config.BasePath = "https://marlowe-runtime-preprod-web.scdev.aws.iohkdev.io";
            instance = new DefaultApi(config);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test ApplyInputsToContract
        /// </summary>
        [Fact]
        public void ApplyInputsToContractTest()
        {
            string contractId =
                "db55101924ff2ecbdf39c3b909b6eb2eb62e85331ba4dff456ca4cbd236274b5#1";
            string xChangeAddress =
                "addr_test1vzuqvqzcnuy9pmrh2sy7tjucufmpwh8gzssz7v6scn0e04gxdvna9";
            string? xAddress = null;
            string? xCollateralUTxO = null;
            var postTransactionsRequest = new MarloweAPIClient.Model.PostTransactionsRequest(
                new List<MarloweAPIClient.Model.Input>()
                {
                    new MarloweAPIClient.Model.Input(
                        new MarloweAPIClient.Model.DepositInput(
                            new MarloweAPIClient.Model.Party(
                                new MarloweAPIClient.Model.PartyRoleName("swapper")
                            ),
                            new MarloweAPIClient.Model.Party(
                                new MarloweAPIClient.Model.PartyRoleName("swapper")
                            ),
                            new MarloweAPIClient.Model.Token("", ""),
                            3_000_000
                        )
                    )
                },
                null,
                null,
                new Dictionary<string, MarloweAPIClient.Model.Metadata>(),
                new Dictionary<string, MarloweAPIClient.Model.Metadata>(),
                MarloweAPIClient.Model.MarloweVersion.V1
            );
            // This needs manual testing because we have no signing tool for the automatic tests
            //var response = instance.ApplyInputsToContract(
            //    contractId,
            //    xChangeAddress,
            //    xAddress,
            //    xCollateralUTxO,
            //    postTransactionsRequest
            //);
            //Assert.IsType<MarloweAPIClient.Model.ApplyInputsResponse>(response);
        }

        /// <summary>
        /// Test CreateContract
        /// </summary>
        [Fact]
        public void CreateContractTest()
        {
            string xChangeAddress =
                "addr_test1vzuqvqzcnuy9pmrh2sy7tjucufmpwh8gzssz7v6scn0e04gxdvna9";
            string? xStakeAddress = null;
            string? xAddress = null;
            string? xCollateralUTxO = null;
            MarloweAPIClient.Model.PostContractsRequestContract swapContract =
                new MarloweAPIClient.Model.PostContractsRequestContract(
                    new MarloweAPIClient.Model.Contract(
                        new MarloweAPIClient.Model.When(
                            2556057600000,
                            new MarloweAPIClient.Model.Contract(MarloweAPIClient.Model.Close.Close),
                            new List<MarloweAPIClient.Model.Case>()
                            {
                                new MarloweAPIClient.Model.Case(
                                    new MarloweAPIClient.Model.CaseThen(
                                        new MarloweAPIClient.Model.Action(
                                            new MarloweAPIClient.Model.DepositAction(
                                                new MarloweAPIClient.Model.Value(3_000_000),
                                                new MarloweAPIClient.Model.Party(
                                                    new MarloweAPIClient.Model.PartyRoleName(
                                                        "provider"
                                                    )
                                                ),
                                                new MarloweAPIClient.Model.Token("", ""),
                                                new MarloweAPIClient.Model.Party(
                                                    new MarloweAPIClient.Model.PartyRoleName(
                                                        "provider"
                                                    )
                                                )
                                            )
                                        ),
                                        new MarloweAPIClient.Model.Contract(
                                            new MarloweAPIClient.Model.When(
                                                2556057600000,
                                                new MarloweAPIClient.Model.Contract(
                                                    new MarloweAPIClient.Model.Pay(
                                                        new MarloweAPIClient.Model.Party(
                                                            new MarloweAPIClient.Model.PartyRoleName(
                                                                "provider"
                                                            )
                                                        ),
                                                        new MarloweAPIClient.Model.Value(3_000_000),
                                                        new MarloweAPIClient.Model.Contract(
                                                            MarloweAPIClient.Model.Close.Close
                                                        ),
                                                        new MarloweAPIClient.Model.Payee(
                                                            new MarloweAPIClient.Model.PayToParty(
                                                                new MarloweAPIClient.Model.Party(
                                                                    new MarloweAPIClient.Model.PartyRoleName(
                                                                        "provider"
                                                                    )
                                                                )
                                                            )
                                                        ),
                                                        new MarloweAPIClient.Model.Token("", "")
                                                    )
                                                ),
                                                new List<MarloweAPIClient.Model.Case>()
                                                {
                                                    new MarloweAPIClient.Model.Case(
                                                        new MarloweAPIClient.Model.CaseThen(
                                                            new MarloweAPIClient.Model.Action(
                                                                new MarloweAPIClient.Model.DepositAction(
                                                                    new MarloweAPIClient.Model.Value(
                                                                        3_000_000
                                                                    ),
                                                                    new MarloweAPIClient.Model.Party(
                                                                        new MarloweAPIClient.Model.PartyRoleName(
                                                                            "swapper"
                                                                        )
                                                                    ),
                                                                    new MarloweAPIClient.Model.Token(
                                                                        "",
                                                                        ""
                                                                    ),
                                                                    new MarloweAPIClient.Model.Party(
                                                                        new MarloweAPIClient.Model.PartyRoleName(
                                                                            "swapper"
                                                                        )
                                                                    )
                                                                )
                                                            ),
                                                            new MarloweAPIClient.Model.Contract(
                                                                new MarloweAPIClient.Model.Pay(
                                                                    new MarloweAPIClient.Model.Party(
                                                                        new MarloweAPIClient.Model.PartyRoleName(
                                                                            "provider"
                                                                        )
                                                                    ),
                                                                    new MarloweAPIClient.Model.Value(
                                                                        3_000_000
                                                                    ),
                                                                    new MarloweAPIClient.Model.Contract(
                                                                        new MarloweAPIClient.Model.Pay(
                                                                            new MarloweAPIClient.Model.Party(
                                                                                new MarloweAPIClient.Model.PartyRoleName(
                                                                                    "swapper"
                                                                                )
                                                                            ),
                                                                            new MarloweAPIClient.Model.Value(
                                                                                3_000_000
                                                                            ),
                                                                            new MarloweAPIClient.Model.Contract(
                                                                                MarloweAPIClient
                                                                                    .Model
                                                                                    .Close
                                                                                    .Close
                                                                            ),
                                                                            new MarloweAPIClient.Model.Payee(
                                                                                new MarloweAPIClient.Model.PayToParty(
                                                                                    new MarloweAPIClient.Model.Party(
                                                                                        new MarloweAPIClient.Model.PartyRoleName(
                                                                                            "swapper"
                                                                                        )
                                                                                    )
                                                                                )
                                                                            ),
                                                                            new MarloweAPIClient.Model.Token(
                                                                                "",
                                                                                ""
                                                                            )
                                                                        )
                                                                    ),
                                                                    new MarloweAPIClient.Model.Payee(
                                                                        new MarloweAPIClient.Model.PayToParty(
                                                                            new MarloweAPIClient.Model.Party(
                                                                                new MarloweAPIClient.Model.PartyRoleName(
                                                                                    "swapper"
                                                                                )
                                                                            )
                                                                        )
                                                                    ),
                                                                    new MarloweAPIClient.Model.Token(
                                                                        "",
                                                                        ""
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    ),
                                                }
                                            )
                                        )
                                    )
                                )
                            }
                        )
                    )
                );

            var tags = new System.Collections.Generic.Dictionary<
                string,
                MarloweAPIClient.Model.Metadata
            >();
            var metadata = new System.Collections.Generic.Dictionary<
                string,
                MarloweAPIClient.Model.Metadata
            >();
            var minUTxODeposit = 3_000_000;
            MarloweAPIClient.Model.PostContractsRequest postContractsRequest =
                new MarloweAPIClient.Model.PostContractsRequest(
                    swapContract,
                    metadata,
                    minUTxODeposit,
                    new MarloweAPIClient.Model.RolesConfig(
                        new Dictionary<string, MarloweAPIClient.Model.RoleTokenConfig>()
                        {
                            {
                                "provider",
                                new MarloweAPIClient.Model.RoleTokenConfig(
                                    "addr_test1vzuqvqzcnuy9pmrh2sy7tjucufmpwh8gzssz7v6scn0e04gxdvna9"
                                )
                            },
                            {
                                "swapper",
                                new MarloweAPIClient.Model.RoleTokenConfig(
                                    "addr_test1vzuqvqzcnuy9pmrh2sy7tjucufmpwh8gzssz7v6scn0e04gxdvna9"
                                )
                            }
                        }
                    ),
                    tags,
                    null,
                    MarloweAPIClient.Model.MarloweVersion.V1
                );
            var response = instance.CreateContract(
                xChangeAddress,
                xStakeAddress,
                xAddress,
                xCollateralUTxO,
                postContractsRequest
            );
            Assert.IsType<MarloweAPIClient.Model.CreateContractResponse>(response);
        }

        /// <summary>
        /// Test CreateContractSources
        /// </summary>
        [Fact]
        public void CreateContractSourcesTest()
        {
            string main = "contract1";
            var label1 = "contract1";
            var label2 = "contract";
            var type1 = MarloweAPIClient.Model.LabelledObject.TypeEnum.Contract;
            var type2 = MarloweAPIClient.Model.LabelledObject.TypeEnum.Contract;
            var closeContract = new MarloweAPIClient.Model.LabelledObjectValue(
                new MarloweAPIClient.Model.ContractObject(MarloweAPIClient.Model.CloseObject.Close)
            );
            var labelledObject1 = new MarloweAPIClient.Model.LabelledObject(
                label1,
                type1,
                closeContract
            );
            var labelledObject2 = new MarloweAPIClient.Model.LabelledObject(
                label2,
                type2,
                closeContract
            );
            var labelledObjects = new List<MarloweAPIClient.Model.LabelledObject>();
            labelledObjects.Add(labelledObject1);
            labelledObjects.Add(labelledObject2);
            var response = instance.CreateContractSources(main, labelledObjects);
            Assert.IsType<MarloweAPIClient.Model.PostContractSourceResponse>(response);
        }

        /// <summary>
        /// Test GetContractById
        /// </summary>
        [Fact]
        public void GetContractByIdTest()
        {
            string contractId =
                "ec15b11dc3f85bcce51ddaf0d0073a23867b069934f0de499efa3291dc4ad235#1";
            var response = instance.GetContractById(contractId);
            Assert.NotNull(response);
            Assert.IsType<MarloweAPIClient.Model.GetContractResponse>(response);
        }

        /// <summary>
        /// Test GetContractSourceAdjacency
        /// </summary>
        [Fact]
        public void GetContractSourceAdjacencyTest()
        {
            string contractSourceId =
                "705f33bb023b560f458a277c12130487f8dbca1b9e4dc50c4ed1596e00944996";
            var response = instance.GetContractSourceAdjacency(contractSourceId);
            Assert.IsType<MarloweAPIClient.Model.ContractSourceIds>(response);
        }

        /// <summary>
        /// Test GetContractSourceById
        /// </summary>
        [Fact]
        public void GetContractSourceByIdTest()
        {
            string contractSourceId =
                "705f33bb023b560f458a277c12130487f8dbca1b9e4dc50c4ed1596e00944996";
            bool? expand = true;
            var response = instance.GetContractSourceById(contractSourceId, expand);
            Assert.IsType<MarloweAPIClient.Model.Contract>(response);
        }

        /// <summary>
        /// Test GetContractSourceClosure
        /// </summary>
        [Fact]
        public void GetContractSourceClosureTest()
        {
            string contractSourceId =
                "705f33bb023b560f458a277c12130487f8dbca1b9e4dc50c4ed1596e00944996";
            var response = instance.GetContractSourceClosure(contractSourceId);
            Assert.IsType<MarloweAPIClient.Model.ContractSourceIds>(response);
        }

        /// <summary>
        /// Test GetContractTransactionById
        /// </summary>
        [Fact]
        public void GetContractTransactionByIdTest()
        {
            string contractId =
                "06fb28e1322bb2d366617e6fbaed22ed93a8ca2b813964ade5621c4b8fba1ee8#1";
            string transactionId =
                "981455f49fe566765d8380ad2199ee265ab9128902630780d4d7258a40c9d310";
            var response = instance.GetContractTransactionById(contractId, transactionId);
            Assert.IsType<MarloweAPIClient.Model.GetTransactionResponse>(response);
        }

        /// <summary>
        /// Test GetContracts
        /// </summary>
        [Fact]
        public void GetContractsTest()
        {
            var response = instance.GetContractsWithHttpInfo();
            Assert.IsType<MarloweAPIClient.Client.ApiResponse<MarloweAPIClient.Model.GetContractsResponse>>(
                response
            );
        }

        /// <summary>
        /// Test GetNextStepsForContract
        /// </summary>
        [Fact]
        public void GetNextStepsForContractTest()
        {
            // This is the one that's should be commited
            //var contractId = "26a9d99e3a014b7dafc21642c829b5f51edd8f74f45f13d965e967df182156eb#1";
            // This is the one I'm using to apply inputs and withdraw :) so just delete it afterwards
            string contractId =
                "4eb7e4228118af94b17aa02611a32393e1c0845dcde5cc6ae01e8e90649e3d30#1";
            string validityStart = "1970-12-06T00:00:00.000Z";
            string validityEnd = "2050-01-01T00:00:00.000Z";

            List<string>? party = null;
            var response = instance.GetNextStepsForContract(
                contractId,
                validityStart,
                validityEnd,
                party
            );
            Assert.NotNull(response);
            Assert.IsType<MarloweAPIClient.Model.Next>(response);
        }

        /// <summary>
        /// Test GetPayoutById
        /// </summary
        [Fact]
        public void GetPayoutByIdTest()
        {
            string payoutId = "924e28e8a44e7c7e0b3eab485a79efcc307f316b45f6c7a518390ce5cbaa9136#2";
            var response = instance.GetPayoutById(payoutId);
            Assert.IsType<MarloweAPIClient.Model.GetPayoutResponse>(response);
        }

        /// <summary>
        /// Test GetPayouts
        /// </summary>
        [Fact]
        public void GetPayoutsTest()
        {
            List<string>? contractId = new List<string>
            {
                "db55101924ff2ecbdf39c3b909b6eb2eb62e85331ba4dff456ca4cbd236274b5#1"
            };
            List<string>? roleToken = null;
            string? status = null;
            string? range = null;
            var response = instance.GetPayouts(contractId, roleToken, status, range);
            Assert.IsType<MarloweAPIClient.Model.GetPayoutsResponse>(response);
        }

        /// <summary>
        /// Test GetTransactionsForContract
        /// </summary>
        [Fact]
        public void GetTransactionsForContractTest()
        {
            string contractId =
                "06fb28e1322bb2d366617e6fbaed22ed93a8ca2b813964ade5621c4b8fba1ee8#1";
            string? range = null;
            var response = instance.GetTransactionsForContract(contractId, range);
            Assert.NotNull(response);
            Assert.IsType<MarloweAPIClient.Model.GetTransactionsResponse>(response);
        }

        /// <summary>
        /// Test GetWithdrawalById
        /// </summary>
        [Fact]
        public void GetWithdrawalByIdTest()
        {
            string withdrawalId =
                "e68b8034f4d93c4e53468198abdcbe938d067605310ece35ebe681d61c961e1c";
            var response = instance.GetWithdrawalById(withdrawalId);
            Assert.IsType<MarloweAPIClient.Model.Withdrawal>(response);
        }

        /// <summary>
        /// Test GetWithdrawals
        /// </summary>
        [Fact]
        public void GetWithdrawalsTest()
        {
            List<string>? roleCurrency = null;
            string? range = null;
            var response = instance.GetWithdrawals(roleCurrency, range);
            Assert.IsType<MarloweAPIClient.Model.GetWithdrawalsResponse>(response);
        }

        /// <summary>
        /// Test Healthcheck
        /// </summary>
        [Fact]
        public void HealthcheckTest()
        {
            instance.Healthcheck();
        }
    }
}
