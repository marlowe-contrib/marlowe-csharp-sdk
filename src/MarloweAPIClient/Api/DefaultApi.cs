/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MarloweAPIClient.Client;
using MarloweAPIClient.Model;

namespace MarloweAPIClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsContractIdGet200Response</returns>
        ContractsContractIdGet200Response ContractsContractIdGet(string contractId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsContractIdGet200Response</returns>
        ApiResponse<ContractsContractIdGet200Response> ContractsContractIdGetWithHttpInfo(string contractId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart"></param>
        /// <param name="validityEnd"></param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Next</returns>
        Next ContractsContractIdNextGet(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart"></param>
        /// <param name="validityEnd"></param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Next</returns>
        ApiResponse<Next> ContractsContractIdNextGetWithHttpInfo(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ContractsContractIdPut(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContractsContractIdPutWithHttpInfo(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectTxHeader</returns>
        ListObjectTxHeader ContractsContractIdTransactionsGet(string contractId, string? range = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectTxHeader</returns>
        ApiResponse<ListObjectTxHeader> ContractsContractIdTransactionsGetWithHttpInfo(string contractId, string? range = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsContractIdTransactionsPost201Response</returns>
        ContractsContractIdTransactionsPost201Response ContractsContractIdTransactionsPost(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsContractIdTransactionsPost201Response</returns>
        ApiResponse<ContractsContractIdTransactionsPost201Response> ContractsContractIdTransactionsPostWithHttpInfo(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsContractIdTransactionsTransactionIdGet200Response</returns>
        ContractsContractIdTransactionsTransactionIdGet200Response ContractsContractIdTransactionsTransactionIdGet(string contractId, string transactionId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsContractIdTransactionsTransactionIdGet200Response</returns>
        ApiResponse<ContractsContractIdTransactionsTransactionIdGet200Response> ContractsContractIdTransactionsTransactionIdGetWithHttpInfo(string contractId, string transactionId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ContractsContractIdTransactionsTransactionIdPut(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContractsContractIdTransactionsTransactionIdPutWithHttpInfo(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectContractHeader</returns>
        ListObjectContractHeader ContractsGet(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectContractHeader</returns>
        ApiResponse<ListObjectContractHeader> ContractsGetWithHttpInfo(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress"> (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsPost201Response</returns>
        ContractsPost201Response ContractsPost(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress"> (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsPost201Response</returns>
        ApiResponse<ContractsPost201Response> ContractsPostWithHttpInfo(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectContractSourceId</returns>
        ListObjectContractSourceId ContractsSourcesContractSourceIdAdjacencyGet(string contractSourceId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectContractSourceId</returns>
        ApiResponse<ListObjectContractSourceId> ContractsSourcesContractSourceIdAdjacencyGetWithHttpInfo(string contractSourceId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectContractSourceId</returns>
        ListObjectContractSourceId ContractsSourcesContractSourceIdClosureGet(string contractSourceId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectContractSourceId</returns>
        ApiResponse<ListObjectContractSourceId> ContractsSourcesContractSourceIdClosureGetWithHttpInfo(string contractSourceId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contract</returns>
        Contract ContractsSourcesContractSourceIdGet(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> ContractsSourcesContractSourceIdGetWithHttpInfo(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main"></param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostContractSourceResponse</returns>
        PostContractSourceResponse ContractsSourcesPost(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main"></param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostContractSourceResponse</returns>
        ApiResponse<PostContractSourceResponse> ContractsSourcesPostWithHttpInfo(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void HealthcheckGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HealthcheckGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectPayoutHeader</returns>
        ListObjectPayoutHeader PayoutsGet(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectPayoutHeader</returns>
        ApiResponse<ListObjectPayoutHeader> PayoutsGetWithHttpInfo(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PayoutsPayoutIdGet200Response</returns>
        PayoutsPayoutIdGet200Response PayoutsPayoutIdGet(string payoutId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PayoutsPayoutIdGet200Response</returns>
        ApiResponse<PayoutsPayoutIdGet200Response> PayoutsPayoutIdGetWithHttpInfo(string payoutId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectWithdrawalHeader</returns>
        ListObjectWithdrawalHeader WithdrawalsGet(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectWithdrawalHeader</returns>
        ApiResponse<ListObjectWithdrawalHeader> WithdrawalsGetWithHttpInfo(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WithdrawalsPost201Response</returns>
        WithdrawalsPost201Response WithdrawalsPost(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WithdrawalsPost201Response</returns>
        ApiResponse<WithdrawalsPost201Response> WithdrawalsPostWithHttpInfo(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Withdrawal</returns>
        Withdrawal WithdrawalsWithdrawalIdGet(string withdrawalId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Withdrawal</returns>
        ApiResponse<Withdrawal> WithdrawalsWithdrawalIdGetWithHttpInfo(string withdrawalId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WithdrawalsWithdrawalIdPut(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WithdrawalsWithdrawalIdPutWithHttpInfo(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsContractIdGet200Response</returns>
        System.Threading.Tasks.Task<ContractsContractIdGet200Response> ContractsContractIdGetAsync(string contractId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsContractIdGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractsContractIdGet200Response>> ContractsContractIdGetWithHttpInfoAsync(string contractId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart"></param>
        /// <param name="validityEnd"></param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Next</returns>
        System.Threading.Tasks.Task<Next> ContractsContractIdNextGetAsync(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart"></param>
        /// <param name="validityEnd"></param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Next)</returns>
        System.Threading.Tasks.Task<ApiResponse<Next>> ContractsContractIdNextGetWithHttpInfoAsync(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContractsContractIdPutAsync(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContractsContractIdPutWithHttpInfoAsync(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectTxHeader</returns>
        System.Threading.Tasks.Task<ListObjectTxHeader> ContractsContractIdTransactionsGetAsync(string contractId, string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectTxHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListObjectTxHeader>> ContractsContractIdTransactionsGetWithHttpInfoAsync(string contractId, string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsContractIdTransactionsPost201Response</returns>
        System.Threading.Tasks.Task<ContractsContractIdTransactionsPost201Response> ContractsContractIdTransactionsPostAsync(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsContractIdTransactionsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractsContractIdTransactionsPost201Response>> ContractsContractIdTransactionsPostWithHttpInfoAsync(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsContractIdTransactionsTransactionIdGet200Response</returns>
        System.Threading.Tasks.Task<ContractsContractIdTransactionsTransactionIdGet200Response> ContractsContractIdTransactionsTransactionIdGetAsync(string contractId, string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsContractIdTransactionsTransactionIdGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractsContractIdTransactionsTransactionIdGet200Response>> ContractsContractIdTransactionsTransactionIdGetWithHttpInfoAsync(string contractId, string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContractsContractIdTransactionsTransactionIdPutAsync(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContractsContractIdTransactionsTransactionIdPutWithHttpInfoAsync(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectContractHeader</returns>
        System.Threading.Tasks.Task<ListObjectContractHeader> ContractsGetAsync(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectContractHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListObjectContractHeader>> ContractsGetWithHttpInfoAsync(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress"> (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsPost201Response</returns>
        System.Threading.Tasks.Task<ContractsPost201Response> ContractsPostAsync(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress"> (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractsPost201Response>> ContractsPostWithHttpInfoAsync(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectContractSourceId</returns>
        System.Threading.Tasks.Task<ListObjectContractSourceId> ContractsSourcesContractSourceIdAdjacencyGetAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectContractSourceId)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListObjectContractSourceId>> ContractsSourcesContractSourceIdAdjacencyGetWithHttpInfoAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectContractSourceId</returns>
        System.Threading.Tasks.Task<ListObjectContractSourceId> ContractsSourcesContractSourceIdClosureGetAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectContractSourceId)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListObjectContractSourceId>> ContractsSourcesContractSourceIdClosureGetWithHttpInfoAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> ContractsSourcesContractSourceIdGetAsync(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsSourcesContractSourceIdGetWithHttpInfoAsync(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main"></param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostContractSourceResponse</returns>
        System.Threading.Tasks.Task<PostContractSourceResponse> ContractsSourcesPostAsync(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main"></param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostContractSourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContractSourceResponse>> ContractsSourcesPostWithHttpInfoAsync(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HealthcheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HealthcheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectPayoutHeader</returns>
        System.Threading.Tasks.Task<ListObjectPayoutHeader> PayoutsGetAsync(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectPayoutHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListObjectPayoutHeader>> PayoutsGetWithHttpInfoAsync(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PayoutsPayoutIdGet200Response</returns>
        System.Threading.Tasks.Task<PayoutsPayoutIdGet200Response> PayoutsPayoutIdGetAsync(string payoutId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PayoutsPayoutIdGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayoutsPayoutIdGet200Response>> PayoutsPayoutIdGetWithHttpInfoAsync(string payoutId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectWithdrawalHeader</returns>
        System.Threading.Tasks.Task<ListObjectWithdrawalHeader> WithdrawalsGetAsync(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectWithdrawalHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListObjectWithdrawalHeader>> WithdrawalsGetWithHttpInfoAsync(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WithdrawalsPost201Response</returns>
        System.Threading.Tasks.Task<WithdrawalsPost201Response> WithdrawalsPostAsync(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WithdrawalsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WithdrawalsPost201Response>> WithdrawalsPostWithHttpInfoAsync(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Withdrawal</returns>
        System.Threading.Tasks.Task<Withdrawal> WithdrawalsWithdrawalIdGetAsync(string withdrawalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Withdrawal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Withdrawal>> WithdrawalsWithdrawalIdGetWithHttpInfoAsync(string withdrawalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WithdrawalsWithdrawalIdPutAsync(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WithdrawalsWithdrawalIdPutWithHttpInfoAsync(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private MarloweAPIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = MarloweAPIClient.Client.Configuration.MergeConfigurations(
                MarloweAPIClient.Client.GlobalConfiguration.Instance,
                new MarloweAPIClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MarloweAPIClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MarloweAPIClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MarloweAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(MarloweAPIClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MarloweAPIClient.Client.Configuration.MergeConfigurations(
                MarloweAPIClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MarloweAPIClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MarloweAPIClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MarloweAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(MarloweAPIClient.Client.ISynchronousClient client, MarloweAPIClient.Client.IAsynchronousClient asyncClient, MarloweAPIClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MarloweAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MarloweAPIClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MarloweAPIClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MarloweAPIClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MarloweAPIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsContractIdGet200Response</returns>
        public ContractsContractIdGet200Response ContractsContractIdGet(string contractId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ContractsContractIdGet200Response> localVarResponse = ContractsContractIdGetWithHttpInfo(contractId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsContractIdGet200Response</returns>
        public MarloweAPIClient.Client.ApiResponse<ContractsContractIdGet200Response> ContractsContractIdGetWithHttpInfo(string contractId, int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContractsContractIdGet200Response>("/contracts/{contractId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsContractIdGet200Response</returns>
        public async System.Threading.Tasks.Task<ContractsContractIdGet200Response> ContractsContractIdGetAsync(string contractId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ContractsContractIdGet200Response> localVarResponse = await ContractsContractIdGetWithHttpInfoAsync(contractId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsContractIdGet200Response)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ContractsContractIdGet200Response>> ContractsContractIdGetWithHttpInfoAsync(string contractId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContractsContractIdGet200Response>("/contracts/{contractId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart"></param>
        /// <param name="validityEnd"></param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Next</returns>
        public Next ContractsContractIdNextGet(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<Next> localVarResponse = ContractsContractIdNextGetWithHttpInfo(contractId, validityStart, validityEnd, party);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart"></param>
        /// <param name="validityEnd"></param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Next</returns>
        public MarloweAPIClient.Client.ApiResponse<Next> ContractsContractIdNextGetWithHttpInfo(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdNextGet");
            }

            // verify the required parameter 'validityStart' is set
            if (validityStart == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'validityStart' when calling DefaultApi->ContractsContractIdNextGet");
            }

            // verify the required parameter 'validityEnd' is set
            if (validityEnd == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'validityEnd' when calling DefaultApi->ContractsContractIdNextGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "validityStart", validityStart));
            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "validityEnd", validityEnd));
            if (party != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "party", party));
            }

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdNextGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Next>("/contracts/{contractId}/next", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdNextGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart"></param>
        /// <param name="validityEnd"></param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Next</returns>
        public async System.Threading.Tasks.Task<Next> ContractsContractIdNextGetAsync(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<Next> localVarResponse = await ContractsContractIdNextGetWithHttpInfoAsync(contractId, validityStart, validityEnd, party, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart"></param>
        /// <param name="validityEnd"></param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Next)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Next>> ContractsContractIdNextGetWithHttpInfoAsync(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdNextGet");
            }

            // verify the required parameter 'validityStart' is set
            if (validityStart == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'validityStart' when calling DefaultApi->ContractsContractIdNextGet");
            }

            // verify the required parameter 'validityEnd' is set
            if (validityEnd == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'validityEnd' when calling DefaultApi->ContractsContractIdNextGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "validityStart", validityStart));
            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "validityEnd", validityEnd));
            if (party != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "party", party));
            }

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdNextGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Next>("/contracts/{contractId}/next", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdNextGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ContractsContractIdPut(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            ContractsContractIdPutWithHttpInfo(contractId, textEnvelope);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MarloweAPIClient.Client.ApiResponse<Object> ContractsContractIdPutWithHttpInfo(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdPut");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/contracts/{contractId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContractsContractIdPutAsync(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ContractsContractIdPutWithHttpInfoAsync(contractId, textEnvelope, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Object>> ContractsContractIdPutWithHttpInfoAsync(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdPut");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/contracts/{contractId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectTxHeader</returns>
        public ListObjectTxHeader ContractsContractIdTransactionsGet(string contractId, string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectTxHeader> localVarResponse = ContractsContractIdTransactionsGetWithHttpInfo(contractId, range);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectTxHeader</returns>
        public MarloweAPIClient.Client.ApiResponse<ListObjectTxHeader> ContractsContractIdTransactionsGetWithHttpInfo(string contractId, string? range = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdTransactionsGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdTransactionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListObjectTxHeader>("/contracts/{contractId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectTxHeader</returns>
        public async System.Threading.Tasks.Task<ListObjectTxHeader> ContractsContractIdTransactionsGetAsync(string contractId, string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectTxHeader> localVarResponse = await ContractsContractIdTransactionsGetWithHttpInfoAsync(contractId, range, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectTxHeader)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ListObjectTxHeader>> ContractsContractIdTransactionsGetWithHttpInfoAsync(string contractId, string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdTransactionsGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdTransactionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListObjectTxHeader>("/contracts/{contractId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsContractIdTransactionsPost201Response</returns>
        public ContractsContractIdTransactionsPost201Response ContractsContractIdTransactionsPost(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ContractsContractIdTransactionsPost201Response> localVarResponse = ContractsContractIdTransactionsPostWithHttpInfo(contractId, xChangeAddress, xAddress, xCollateralUTxO, postTransactionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsContractIdTransactionsPost201Response</returns>
        public MarloweAPIClient.Client.ApiResponse<ContractsContractIdTransactionsPost201Response> ContractsContractIdTransactionsPostWithHttpInfo(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdTransactionsPost");
            }

            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->ContractsContractIdTransactionsPost");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.apply-inputs-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postTransactionsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdTransactionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContractsContractIdTransactionsPost201Response>("/contracts/{contractId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdTransactionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsContractIdTransactionsPost201Response</returns>
        public async System.Threading.Tasks.Task<ContractsContractIdTransactionsPost201Response> ContractsContractIdTransactionsPostAsync(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ContractsContractIdTransactionsPost201Response> localVarResponse = await ContractsContractIdTransactionsPostWithHttpInfoAsync(contractId, xChangeAddress, xAddress, xCollateralUTxO, postTransactionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsContractIdTransactionsPost201Response)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ContractsContractIdTransactionsPost201Response>> ContractsContractIdTransactionsPostWithHttpInfoAsync(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdTransactionsPost");
            }

            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->ContractsContractIdTransactionsPost");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.apply-inputs-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postTransactionsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdTransactionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContractsContractIdTransactionsPost201Response>("/contracts/{contractId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdTransactionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsContractIdTransactionsTransactionIdGet200Response</returns>
        public ContractsContractIdTransactionsTransactionIdGet200Response ContractsContractIdTransactionsTransactionIdGet(string contractId, string transactionId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ContractsContractIdTransactionsTransactionIdGet200Response> localVarResponse = ContractsContractIdTransactionsTransactionIdGetWithHttpInfo(contractId, transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsContractIdTransactionsTransactionIdGet200Response</returns>
        public MarloweAPIClient.Client.ApiResponse<ContractsContractIdTransactionsTransactionIdGet200Response> ContractsContractIdTransactionsTransactionIdGetWithHttpInfo(string contractId, string transactionId, int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdTransactionsTransactionIdGet");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->ContractsContractIdTransactionsTransactionIdGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", MarloweAPIClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdTransactionsTransactionIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContractsContractIdTransactionsTransactionIdGet200Response>("/contracts/{contractId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdTransactionsTransactionIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsContractIdTransactionsTransactionIdGet200Response</returns>
        public async System.Threading.Tasks.Task<ContractsContractIdTransactionsTransactionIdGet200Response> ContractsContractIdTransactionsTransactionIdGetAsync(string contractId, string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ContractsContractIdTransactionsTransactionIdGet200Response> localVarResponse = await ContractsContractIdTransactionsTransactionIdGetWithHttpInfoAsync(contractId, transactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsContractIdTransactionsTransactionIdGet200Response)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ContractsContractIdTransactionsTransactionIdGet200Response>> ContractsContractIdTransactionsTransactionIdGetWithHttpInfoAsync(string contractId, string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdTransactionsTransactionIdGet");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->ContractsContractIdTransactionsTransactionIdGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", MarloweAPIClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdTransactionsTransactionIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContractsContractIdTransactionsTransactionIdGet200Response>("/contracts/{contractId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdTransactionsTransactionIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ContractsContractIdTransactionsTransactionIdPut(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            ContractsContractIdTransactionsTransactionIdPutWithHttpInfo(contractId, transactionId, textEnvelope);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MarloweAPIClient.Client.ApiResponse<Object> ContractsContractIdTransactionsTransactionIdPutWithHttpInfo(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdTransactionsTransactionIdPut");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->ContractsContractIdTransactionsTransactionIdPut");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", MarloweAPIClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdTransactionsTransactionIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/contracts/{contractId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdTransactionsTransactionIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContractsContractIdTransactionsTransactionIdPutAsync(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ContractsContractIdTransactionsTransactionIdPutWithHttpInfoAsync(contractId, transactionId, textEnvelope, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Object>> ContractsContractIdTransactionsTransactionIdPutWithHttpInfoAsync(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdTransactionsTransactionIdPut");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->ContractsContractIdTransactionsTransactionIdPut");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", MarloweAPIClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.ContractsContractIdTransactionsTransactionIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/contracts/{contractId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsContractIdTransactionsTransactionIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectContractHeader</returns>
        public ListObjectContractHeader ContractsGet(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectContractHeader> localVarResponse = ContractsGetWithHttpInfo(roleCurrency, tag, partyAddress, partyRole, range);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectContractHeader</returns>
        public MarloweAPIClient.Client.ApiResponse<ListObjectContractHeader> ContractsGetWithHttpInfo(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (roleCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleCurrency", roleCurrency));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (partyAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "partyAddress", partyAddress));
            }
            if (partyRole != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "partyRole", partyRole));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.ContractsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListObjectContractHeader>("/contracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectContractHeader</returns>
        public async System.Threading.Tasks.Task<ListObjectContractHeader> ContractsGetAsync(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectContractHeader> localVarResponse = await ContractsGetWithHttpInfoAsync(roleCurrency, tag, partyAddress, partyRole, range, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectContractHeader)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ListObjectContractHeader>> ContractsGetWithHttpInfoAsync(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (roleCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleCurrency", roleCurrency));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (partyAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "partyAddress", partyAddress));
            }
            if (partyRole != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "partyRole", partyRole));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.ContractsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListObjectContractHeader>("/contracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress"> (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractsPost201Response</returns>
        public ContractsPost201Response ContractsPost(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ContractsPost201Response> localVarResponse = ContractsPostWithHttpInfo(xChangeAddress, xStakeAddress, xAddress, xCollateralUTxO, postContractsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress"> (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractsPost201Response</returns>
        public MarloweAPIClient.Client.ApiResponse<ContractsPost201Response> ContractsPostWithHttpInfo(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->ContractsPost");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.contract-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xStakeAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Stake-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xStakeAddress)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postContractsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ContractsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContractsPost201Response>("/contracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress"> (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractsPost201Response</returns>
        public async System.Threading.Tasks.Task<ContractsPost201Response> ContractsPostAsync(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ContractsPost201Response> localVarResponse = await ContractsPostWithHttpInfoAsync(xChangeAddress, xStakeAddress, xAddress, xCollateralUTxO, postContractsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress"> (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractsPost201Response)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ContractsPost201Response>> ContractsPostWithHttpInfoAsync(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->ContractsPost");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.contract-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xStakeAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Stake-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xStakeAddress)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postContractsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ContractsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContractsPost201Response>("/contracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectContractSourceId</returns>
        public ListObjectContractSourceId ContractsSourcesContractSourceIdAdjacencyGet(string contractSourceId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectContractSourceId> localVarResponse = ContractsSourcesContractSourceIdAdjacencyGetWithHttpInfo(contractSourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectContractSourceId</returns>
        public MarloweAPIClient.Client.ApiResponse<ListObjectContractSourceId> ContractsSourcesContractSourceIdAdjacencyGetWithHttpInfo(string contractSourceId, int operationIndex = 0)
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->ContractsSourcesContractSourceIdAdjacencyGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ContractsSourcesContractSourceIdAdjacencyGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListObjectContractSourceId>("/contracts/sources/{contractSourceId}/adjacency", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsSourcesContractSourceIdAdjacencyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectContractSourceId</returns>
        public async System.Threading.Tasks.Task<ListObjectContractSourceId> ContractsSourcesContractSourceIdAdjacencyGetAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectContractSourceId> localVarResponse = await ContractsSourcesContractSourceIdAdjacencyGetWithHttpInfoAsync(contractSourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectContractSourceId)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ListObjectContractSourceId>> ContractsSourcesContractSourceIdAdjacencyGetWithHttpInfoAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->ContractsSourcesContractSourceIdAdjacencyGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ContractsSourcesContractSourceIdAdjacencyGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListObjectContractSourceId>("/contracts/sources/{contractSourceId}/adjacency", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsSourcesContractSourceIdAdjacencyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectContractSourceId</returns>
        public ListObjectContractSourceId ContractsSourcesContractSourceIdClosureGet(string contractSourceId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectContractSourceId> localVarResponse = ContractsSourcesContractSourceIdClosureGetWithHttpInfo(contractSourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectContractSourceId</returns>
        public MarloweAPIClient.Client.ApiResponse<ListObjectContractSourceId> ContractsSourcesContractSourceIdClosureGetWithHttpInfo(string contractSourceId, int operationIndex = 0)
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->ContractsSourcesContractSourceIdClosureGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ContractsSourcesContractSourceIdClosureGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListObjectContractSourceId>("/contracts/sources/{contractSourceId}/closure", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsSourcesContractSourceIdClosureGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectContractSourceId</returns>
        public async System.Threading.Tasks.Task<ListObjectContractSourceId> ContractsSourcesContractSourceIdClosureGetAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectContractSourceId> localVarResponse = await ContractsSourcesContractSourceIdClosureGetWithHttpInfoAsync(contractSourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectContractSourceId)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ListObjectContractSourceId>> ContractsSourcesContractSourceIdClosureGetWithHttpInfoAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->ContractsSourcesContractSourceIdClosureGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ContractsSourcesContractSourceIdClosureGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListObjectContractSourceId>("/contracts/sources/{contractSourceId}/closure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsSourcesContractSourceIdClosureGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contract</returns>
        public Contract ContractsSourcesContractSourceIdGet(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<Contract> localVarResponse = ContractsSourcesContractSourceIdGetWithHttpInfo(contractSourceId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contract</returns>
        public MarloweAPIClient.Client.ApiResponse<Contract> ContractsSourcesContractSourceIdGetWithHttpInfo(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->ContractsSourcesContractSourceIdGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DefaultApi.ContractsSourcesContractSourceIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Contract>("/contracts/sources/{contractSourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsSourcesContractSourceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> ContractsSourcesContractSourceIdGetAsync(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<Contract> localVarResponse = await ContractsSourcesContractSourceIdGetWithHttpInfoAsync(contractSourceId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Contract>> ContractsSourcesContractSourceIdGetWithHttpInfoAsync(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->ContractsSourcesContractSourceIdGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DefaultApi.ContractsSourcesContractSourceIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Contract>("/contracts/sources/{contractSourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsSourcesContractSourceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main"></param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostContractSourceResponse</returns>
        public PostContractSourceResponse ContractsSourcesPost(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<PostContractSourceResponse> localVarResponse = ContractsSourcesPostWithHttpInfo(main, labelledObject);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main"></param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostContractSourceResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<PostContractSourceResponse> ContractsSourcesPostWithHttpInfo(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0)
        {
            // verify the required parameter 'main' is set
            if (main == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'main' when calling DefaultApi->ContractsSourcesPost");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "main", main));
            localVarRequestOptions.Data = labelledObject;

            localVarRequestOptions.Operation = "DefaultApi.ContractsSourcesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostContractSourceResponse>("/contracts/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsSourcesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main"></param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostContractSourceResponse</returns>
        public async System.Threading.Tasks.Task<PostContractSourceResponse> ContractsSourcesPostAsync(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<PostContractSourceResponse> localVarResponse = await ContractsSourcesPostWithHttpInfoAsync(main, labelledObject, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main"></param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostContractSourceResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<PostContractSourceResponse>> ContractsSourcesPostWithHttpInfoAsync(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'main' is set
            if (main == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'main' when calling DefaultApi->ContractsSourcesPost");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "main", main));
            localVarRequestOptions.Data = labelledObject;

            localVarRequestOptions.Operation = "DefaultApi.ContractsSourcesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostContractSourceResponse>("/contracts/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContractsSourcesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void HealthcheckGet(int operationIndex = 0)
        {
            HealthcheckGetWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MarloweAPIClient.Client.ApiResponse<Object> HealthcheckGetWithHttpInfo(int operationIndex = 0)
        {
            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.HealthcheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/healthcheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthcheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HealthcheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await HealthcheckGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Object>> HealthcheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.HealthcheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/healthcheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthcheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectPayoutHeader</returns>
        public ListObjectPayoutHeader PayoutsGet(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectPayoutHeader> localVarResponse = PayoutsGetWithHttpInfo(contractId, roleToken, status, range);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectPayoutHeader</returns>
        public MarloweAPIClient.Client.ApiResponse<ListObjectPayoutHeader> PayoutsGetWithHttpInfo(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }
            if (roleToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleToken", roleToken));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.PayoutsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListObjectPayoutHeader>("/payouts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectPayoutHeader</returns>
        public async System.Threading.Tasks.Task<ListObjectPayoutHeader> PayoutsGetAsync(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectPayoutHeader> localVarResponse = await PayoutsGetWithHttpInfoAsync(contractId, roleToken, status, range, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectPayoutHeader)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ListObjectPayoutHeader>> PayoutsGetWithHttpInfoAsync(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }
            if (roleToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleToken", roleToken));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.PayoutsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListObjectPayoutHeader>("/payouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PayoutsPayoutIdGet200Response</returns>
        public PayoutsPayoutIdGet200Response PayoutsPayoutIdGet(string payoutId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<PayoutsPayoutIdGet200Response> localVarResponse = PayoutsPayoutIdGetWithHttpInfo(payoutId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PayoutsPayoutIdGet200Response</returns>
        public MarloweAPIClient.Client.ApiResponse<PayoutsPayoutIdGet200Response> PayoutsPayoutIdGetWithHttpInfo(string payoutId, int operationIndex = 0)
        {
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'payoutId' when calling DefaultApi->PayoutsPayoutIdGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payoutId", MarloweAPIClient.Client.ClientUtils.ParameterToString(payoutId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.PayoutsPayoutIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PayoutsPayoutIdGet200Response>("/payouts/{payoutId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutsPayoutIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PayoutsPayoutIdGet200Response</returns>
        public async System.Threading.Tasks.Task<PayoutsPayoutIdGet200Response> PayoutsPayoutIdGetAsync(string payoutId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<PayoutsPayoutIdGet200Response> localVarResponse = await PayoutsPayoutIdGetWithHttpInfoAsync(payoutId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PayoutsPayoutIdGet200Response)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<PayoutsPayoutIdGet200Response>> PayoutsPayoutIdGetWithHttpInfoAsync(string payoutId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'payoutId' when calling DefaultApi->PayoutsPayoutIdGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payoutId", MarloweAPIClient.Client.ClientUtils.ParameterToString(payoutId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.PayoutsPayoutIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PayoutsPayoutIdGet200Response>("/payouts/{payoutId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutsPayoutIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListObjectWithdrawalHeader</returns>
        public ListObjectWithdrawalHeader WithdrawalsGet(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectWithdrawalHeader> localVarResponse = WithdrawalsGetWithHttpInfo(roleCurrency, range);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListObjectWithdrawalHeader</returns>
        public MarloweAPIClient.Client.ApiResponse<ListObjectWithdrawalHeader> WithdrawalsGetWithHttpInfo(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (roleCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleCurrency", roleCurrency));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.WithdrawalsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListObjectWithdrawalHeader>("/withdrawals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawalsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListObjectWithdrawalHeader</returns>
        public async System.Threading.Tasks.Task<ListObjectWithdrawalHeader> WithdrawalsGetAsync(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ListObjectWithdrawalHeader> localVarResponse = await WithdrawalsGetWithHttpInfoAsync(roleCurrency, range, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListObjectWithdrawalHeader)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ListObjectWithdrawalHeader>> WithdrawalsGetWithHttpInfoAsync(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (roleCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleCurrency", roleCurrency));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.WithdrawalsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListObjectWithdrawalHeader>("/withdrawals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawalsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WithdrawalsPost201Response</returns>
        public WithdrawalsPost201Response WithdrawalsPost(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<WithdrawalsPost201Response> localVarResponse = WithdrawalsPostWithHttpInfo(xChangeAddress, xAddress, xCollateralUTxO, postWithdrawalsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WithdrawalsPost201Response</returns>
        public MarloweAPIClient.Client.ApiResponse<WithdrawalsPost201Response> WithdrawalsPostWithHttpInfo(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->WithdrawalsPost");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.withdraw-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postWithdrawalsRequest;

            localVarRequestOptions.Operation = "DefaultApi.WithdrawalsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WithdrawalsPost201Response>("/withdrawals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawalsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WithdrawalsPost201Response</returns>
        public async System.Threading.Tasks.Task<WithdrawalsPost201Response> WithdrawalsPostAsync(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<WithdrawalsPost201Response> localVarResponse = await WithdrawalsPostWithHttpInfoAsync(xChangeAddress, xAddress, xCollateralUTxO, postWithdrawalsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WithdrawalsPost201Response)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<WithdrawalsPost201Response>> WithdrawalsPostWithHttpInfoAsync(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->WithdrawalsPost");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.withdraw-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postWithdrawalsRequest;

            localVarRequestOptions.Operation = "DefaultApi.WithdrawalsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WithdrawalsPost201Response>("/withdrawals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawalsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Withdrawal</returns>
        public Withdrawal WithdrawalsWithdrawalIdGet(string withdrawalId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<Withdrawal> localVarResponse = WithdrawalsWithdrawalIdGetWithHttpInfo(withdrawalId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Withdrawal</returns>
        public MarloweAPIClient.Client.ApiResponse<Withdrawal> WithdrawalsWithdrawalIdGetWithHttpInfo(string withdrawalId, int operationIndex = 0)
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'withdrawalId' when calling DefaultApi->WithdrawalsWithdrawalIdGet");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("withdrawalId", MarloweAPIClient.Client.ClientUtils.ParameterToString(withdrawalId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.WithdrawalsWithdrawalIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Withdrawal>("/withdrawals/{withdrawalId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawalsWithdrawalIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Withdrawal</returns>
        public async System.Threading.Tasks.Task<Withdrawal> WithdrawalsWithdrawalIdGetAsync(string withdrawalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<Withdrawal> localVarResponse = await WithdrawalsWithdrawalIdGetWithHttpInfoAsync(withdrawalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Withdrawal)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Withdrawal>> WithdrawalsWithdrawalIdGetWithHttpInfoAsync(string withdrawalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'withdrawalId' when calling DefaultApi->WithdrawalsWithdrawalIdGet");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("withdrawalId", MarloweAPIClient.Client.ClientUtils.ParameterToString(withdrawalId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.WithdrawalsWithdrawalIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Withdrawal>("/withdrawals/{withdrawalId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawalsWithdrawalIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WithdrawalsWithdrawalIdPut(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            WithdrawalsWithdrawalIdPutWithHttpInfo(withdrawalId, textEnvelope);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MarloweAPIClient.Client.ApiResponse<Object> WithdrawalsWithdrawalIdPutWithHttpInfo(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'withdrawalId' when calling DefaultApi->WithdrawalsWithdrawalIdPut");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("withdrawalId", MarloweAPIClient.Client.ClientUtils.ParameterToString(withdrawalId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.WithdrawalsWithdrawalIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/withdrawals/{withdrawalId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawalsWithdrawalIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WithdrawalsWithdrawalIdPutAsync(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WithdrawalsWithdrawalIdPutWithHttpInfoAsync(withdrawalId, textEnvelope, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Object>> WithdrawalsWithdrawalIdPutWithHttpInfoAsync(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'withdrawalId' when calling DefaultApi->WithdrawalsWithdrawalIdPut");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("withdrawalId", MarloweAPIClient.Client.ClientUtils.ParameterToString(withdrawalId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.WithdrawalsWithdrawalIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/withdrawals/{withdrawalId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawalsWithdrawalIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
