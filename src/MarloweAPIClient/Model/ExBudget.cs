/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// ExBudget
    /// </summary>
    [DataContract(Name = "ExBudget")]
    public partial class ExBudget : IEquatable<ExBudget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExBudget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExBudget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExBudget" /> class.
        /// </summary>
        /// <param name="exBudgetCPU">exBudgetCPU (required).</param>
        /// <param name="exBudgetMemory">exBudgetMemory (required).</param>
        public ExBudget(decimal exBudgetCPU = default(decimal), decimal exBudgetMemory = default(decimal))
        {
            this._ExBudgetCPU = exBudgetCPU;
            this._ExBudgetMemory = exBudgetMemory;
        }

        /// <summary>
        /// Gets or Sets ExBudgetCPU
        /// </summary>
        [DataMember(Name = "exBudgetCPU", IsRequired = true, EmitDefaultValue = true)]
        public decimal ExBudgetCPU
        {
            get{ return _ExBudgetCPU;}
            set
            {
                _ExBudgetCPU = value;
                _flagExBudgetCPU = true;
            }
        }
        private decimal _ExBudgetCPU;
        private bool _flagExBudgetCPU;

        /// <summary>
        /// Returns false as ExBudgetCPU should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExBudgetCPU()
        {
            return _flagExBudgetCPU;
        }
        /// <summary>
        /// Gets or Sets ExBudgetMemory
        /// </summary>
        [DataMember(Name = "exBudgetMemory", IsRequired = true, EmitDefaultValue = true)]
        public decimal ExBudgetMemory
        {
            get{ return _ExBudgetMemory;}
            set
            {
                _ExBudgetMemory = value;
                _flagExBudgetMemory = true;
            }
        }
        private decimal _ExBudgetMemory;
        private bool _flagExBudgetMemory;

        /// <summary>
        /// Returns false as ExBudgetMemory should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExBudgetMemory()
        {
            return _flagExBudgetMemory;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExBudget {\n");
            sb.Append("  ExBudgetCPU: ").Append(ExBudgetCPU).Append("\n");
            sb.Append("  ExBudgetMemory: ").Append(ExBudgetMemory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExBudget);
        }

        /// <summary>
        /// Returns true if ExBudget instances are equal
        /// </summary>
        /// <param name="input">Instance of ExBudget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExBudget input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExBudgetCPU == input.ExBudgetCPU ||
                    this.ExBudgetCPU.Equals(input.ExBudgetCPU)
                ) && 
                (
                    this.ExBudgetMemory == input.ExBudgetMemory ||
                    this.ExBudgetMemory.Equals(input.ExBudgetMemory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ExBudgetCPU.GetHashCode();
                hashCode = (hashCode * 59) + this.ExBudgetMemory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
