/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A time-varying expression that evaluates to an integer
    /// </summary>
    [JsonConverter(typeof(ObservationObjectJsonConverter))]
    [DataContract(Name = "ObservationObject")]
    public partial class ObservationObject : AbstractOpenAPISchema, IEquatable<ObservationObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="bool" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of bool.</param>
        public ObservationObject(bool actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf.</param>
        public ObservationObject(ObservationObjectOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf1.</param>
        public ObservationObject(ObservationObjectOneOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf2.</param>
        public ObservationObject(ObservationObjectOneOf2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf3" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf3.</param>
        public ObservationObject(ObservationObjectOneOf3 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf4" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf4.</param>
        public ObservationObject(ObservationObjectOneOf4 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf5" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf5.</param>
        public ObservationObject(ObservationObjectOneOf5 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf6" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf6.</param>
        public ObservationObject(ObservationObjectOneOf6 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf7" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf7.</param>
        public ObservationObject(ObservationObjectOneOf7 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ObservationObjectOneOf8" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationObjectOneOf8.</param>
        public ObservationObject(ObservationObjectOneOf8 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ActionObjectOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ActionObjectOneOf.</param>
        public ObservationObject(ActionObjectOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ActionObjectOneOf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf1))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf3))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf4))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf5))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf6))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf7))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationObjectOneOf8))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(bool))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ActionObjectOneOf, ObservationObjectOneOf, ObservationObjectOneOf1, ObservationObjectOneOf2, ObservationObjectOneOf3, ObservationObjectOneOf4, ObservationObjectOneOf5, ObservationObjectOneOf6, ObservationObjectOneOf7, ObservationObjectOneOf8, bool");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `bool`. If the actual instance is not `bool`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of bool</returns>
        public bool GetBool()
        {
            return (bool)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf`. If the actual instance is not `ObservationObjectOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf</returns>
        public ObservationObjectOneOf GetObservationObjectOneOf()
        {
            return (ObservationObjectOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf1`. If the actual instance is not `ObservationObjectOneOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf1</returns>
        public ObservationObjectOneOf1 GetObservationObjectOneOf1()
        {
            return (ObservationObjectOneOf1)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf2`. If the actual instance is not `ObservationObjectOneOf2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf2</returns>
        public ObservationObjectOneOf2 GetObservationObjectOneOf2()
        {
            return (ObservationObjectOneOf2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf3`. If the actual instance is not `ObservationObjectOneOf3`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf3</returns>
        public ObservationObjectOneOf3 GetObservationObjectOneOf3()
        {
            return (ObservationObjectOneOf3)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf4`. If the actual instance is not `ObservationObjectOneOf4`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf4</returns>
        public ObservationObjectOneOf4 GetObservationObjectOneOf4()
        {
            return (ObservationObjectOneOf4)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf5`. If the actual instance is not `ObservationObjectOneOf5`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf5</returns>
        public ObservationObjectOneOf5 GetObservationObjectOneOf5()
        {
            return (ObservationObjectOneOf5)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf6`. If the actual instance is not `ObservationObjectOneOf6`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf6</returns>
        public ObservationObjectOneOf6 GetObservationObjectOneOf6()
        {
            return (ObservationObjectOneOf6)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf7`. If the actual instance is not `ObservationObjectOneOf7`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf7</returns>
        public ObservationObjectOneOf7 GetObservationObjectOneOf7()
        {
            return (ObservationObjectOneOf7)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationObjectOneOf8`. If the actual instance is not `ObservationObjectOneOf8`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationObjectOneOf8</returns>
        public ObservationObjectOneOf8 GetObservationObjectOneOf8()
        {
            return (ObservationObjectOneOf8)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ActionObjectOneOf`. If the actual instance is not `ActionObjectOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ActionObjectOneOf</returns>
        public ActionObjectOneOf GetActionObjectOneOf()
        {
            return (ActionObjectOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObservationObject {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ObservationObject.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ObservationObject
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ObservationObject</returns>
        public static ObservationObject FromJson(string jsonString)
        {
            ObservationObject newObservationObject = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newObservationObject;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ActionObjectOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ActionObjectOneOf>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ActionObjectOneOf>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ActionObjectOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ActionObjectOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf1).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf1>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf1>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf1: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf2).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf2>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf2>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf3).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf3>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf3>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf3");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf3: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf4).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf4>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf4>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf4");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf4: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf5).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf5>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf5>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf5");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf5: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf6).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf6>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf6>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf6");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf6: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf7).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf7>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf7>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf7");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf7: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationObjectOneOf8).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf8>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ObservationObjectOneOf8>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationObjectOneOf8");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationObjectOneOf8: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(bool).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<bool>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<bool>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("bool");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into bool: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newObservationObject;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObservationObject);
        }

        /// <summary>
        /// Returns true if ObservationObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ObservationObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObservationObject input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ObservationObject
    /// </summary>
    public class ObservationObjectJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ObservationObject).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ObservationObject.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
