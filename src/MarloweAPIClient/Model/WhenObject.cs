/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Wait for an action to be performed and apply the matching contract when it does. Apply the timeout contract if no actions have been performed in the timeout period.
    /// </summary>
    [DataContract(Name = "WhenObject")]
    public partial class WhenObject : IEquatable<WhenObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhenObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WhenObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhenObject" /> class.
        /// </summary>
        /// <param name="timeout">timeout (required).</param>
        /// <param name="timeoutContinuation">timeoutContinuation (required).</param>
        /// <param name="when">when (required).</param>
        public WhenObject(long timeout = default(long), ContractObject timeoutContinuation = default(ContractObject), List<CaseObject> when = default(List<CaseObject>))
        {
            this.Timeout = timeout;
            // to ensure "timeoutContinuation" is required (not null)
            if (timeoutContinuation == null)
            {
                throw new ArgumentNullException("timeoutContinuation is a required property for WhenObject and cannot be null");
            }
            this.TimeoutContinuation = timeoutContinuation;
            // to ensure "when" is required (not null)
            if (when == null)
            {
                throw new ArgumentNullException("when is a required property for WhenObject and cannot be null");
            }
            this.When = when;
        }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "timeout", IsRequired = true, EmitDefaultValue = true)]
        public long Timeout { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutContinuation
        /// </summary>
        [DataMember(Name = "timeout_continuation", IsRequired = true, EmitDefaultValue = true)]
        public ContractObject TimeoutContinuation { get; set; }

        /// <summary>
        /// Gets or Sets When
        /// </summary>
        [DataMember(Name = "when", IsRequired = true, EmitDefaultValue = true)]
        public List<CaseObject> When { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhenObject {\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  TimeoutContinuation: ").Append(TimeoutContinuation).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WhenObject);
        }

        /// <summary>
        /// Returns true if WhenObject instances are equal
        /// </summary>
        /// <param name="input">Instance of WhenObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhenObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.TimeoutContinuation == input.TimeoutContinuation ||
                    (this.TimeoutContinuation != null &&
                    this.TimeoutContinuation.Equals(input.TimeoutContinuation))
                ) && 
                (
                    this.When == input.When ||
                    this.When != null &&
                    input.When != null &&
                    this.When.SequenceEqual(input.When)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                if (this.TimeoutContinuation != null)
                {
                    hashCode = (hashCode * 59) + this.TimeoutContinuation.GetHashCode();
                }
                if (this.When != null)
                {
                    hashCode = (hashCode * 59) + this.When.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
