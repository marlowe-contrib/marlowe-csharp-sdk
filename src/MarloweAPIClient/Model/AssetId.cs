/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// AssetId
    /// </summary>
    [DataContract(Name = "AssetId")]
    public partial class AssetId : IEquatable<AssetId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetId" /> class.
        /// </summary>
        /// <param name="assetName">assetName (required).</param>
        /// <param name="policyId">The hex-encoded minting policy ID for a native Cardano token (required).</param>
        public AssetId(string assetName = default(string), string policyId = default(string))
        {
            // to ensure "assetName" is required (not null)
            if (assetName == null)
            {
                throw new ArgumentNullException("assetName is a required property for AssetId and cannot be null");
            }
            this.AssetName = assetName;
            // to ensure "policyId" is required (not null)
            if (policyId == null)
            {
                throw new ArgumentNullException("policyId is a required property for AssetId and cannot be null");
            }
            this.PolicyId = policyId;
        }

        /// <summary>
        /// Gets or Sets AssetName
        /// </summary>
        [DataMember(Name = "assetName", IsRequired = true, EmitDefaultValue = true)]
        public string AssetName { get; set; }

        /// <summary>
        /// The hex-encoded minting policy ID for a native Cardano token
        /// </summary>
        /// <value>The hex-encoded minting policy ID for a native Cardano token</value>
        [DataMember(Name = "policyId", IsRequired = true, EmitDefaultValue = true)]
        public string PolicyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetId {\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetId);
        }

        /// <summary>
        /// Returns true if AssetId instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssetName == input.AssetName ||
                    (this.AssetName != null &&
                    this.AssetName.Equals(input.AssetName))
                ) && 
                (
                    this.PolicyId == input.PolicyId ||
                    (this.PolicyId != null &&
                    this.PolicyId.Equals(input.PolicyId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetName != null)
                {
                    hashCode = (hashCode * 59) + this.AssetName.GetHashCode();
                }
                if (this.PolicyId != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.PolicyId != null) {
                // PolicyId (string) pattern
                Regex regexPolicyId = new Regex(@"^[a-fA-F0-9]*$", RegexOptions.CultureInvariant);
                if (!regexPolicyId.Match(this.PolicyId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PolicyId, must match a pattern of " + regexPolicyId, new [] { "PolicyId" });
                }
            }

            yield break;
        }
    }

}
