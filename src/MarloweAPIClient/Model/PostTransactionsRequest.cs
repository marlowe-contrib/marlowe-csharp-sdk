/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// PostTransactionsRequest
    /// </summary>
    [DataContract(Name = "PostTransactionsRequest")]
    public partial class PostTransactionsRequest : IEquatable<PostTransactionsRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public MarloweVersion VarVersion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostTransactionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostTransactionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostTransactionsRequest" /> class.
        /// </summary>
        /// <param name="inputs">inputs (required).</param>
        /// <param name="invalidBefore">invalidBefore.</param>
        /// <param name="invalidHereafter">invalidHereafter.</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        public PostTransactionsRequest(List<Input> inputs = default(List<Input>), string invalidBefore = default(string), string invalidHereafter = default(string), Dictionary<string, Metadata> metadata = default(Dictionary<string, Metadata>), Dictionary<string, Metadata> tags = default(Dictionary<string, Metadata>), MarloweVersion varVersion = default(MarloweVersion))
        {
            // to ensure "inputs" is required (not null)
            if (inputs == null)
            {
                throw new ArgumentNullException("inputs is a required property for PostTransactionsRequest and cannot be null");
            }
            this.Inputs = inputs;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for PostTransactionsRequest and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for PostTransactionsRequest and cannot be null");
            }
            this.Tags = tags;
            this.VarVersion = varVersion;
            this.InvalidBefore = invalidBefore;
            this.InvalidHereafter = invalidHereafter;
        }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", IsRequired = true, EmitDefaultValue = true)]
        public List<Input> Inputs { get; set; }

        /// <summary>
        /// Gets or Sets InvalidBefore
        /// </summary>
        /// <example>2016-07-22T00:00:00Z</example>
        [DataMember(Name = "invalidBefore", EmitDefaultValue = false)]
        public string InvalidBefore { get; set; }

        /// <summary>
        /// Gets or Sets InvalidHereafter
        /// </summary>
        /// <example>2016-07-22T00:00:00Z</example>
        [DataMember(Name = "invalidHereafter", EmitDefaultValue = false)]
        public string InvalidHereafter { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Metadata> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Metadata> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostTransactionsRequest {\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  InvalidBefore: ").Append(InvalidBefore).Append("\n");
            sb.Append("  InvalidHereafter: ").Append(InvalidHereafter).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostTransactionsRequest);
        }

        /// <summary>
        /// Returns true if PostTransactionsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostTransactionsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostTransactionsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.InvalidBefore == input.InvalidBefore ||
                    (this.InvalidBefore != null &&
                    this.InvalidBefore.Equals(input.InvalidBefore))
                ) && 
                (
                    this.InvalidHereafter == input.InvalidHereafter ||
                    (this.InvalidHereafter != null &&
                    this.InvalidHereafter.Equals(input.InvalidHereafter))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inputs != null)
                {
                    hashCode = (hashCode * 59) + this.Inputs.GetHashCode();
                }
                if (this.InvalidBefore != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidBefore.GetHashCode();
                }
                if (this.InvalidHereafter != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidHereafter.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
