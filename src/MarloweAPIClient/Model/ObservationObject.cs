/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A time-varying expression that evaluates to an integer
    /// </summary>
    [JsonConverter(typeof(ObservationObjectJsonConverter))]
    [DataContract(Name = "ObservationObject")]
    public partial class ObservationObject : AbstractOpenAPISchema, IEquatable<ObservationObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="bool" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of bool.</param>
        public ObservationObject(bool actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="AndObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AndObject.</param>
        public ObservationObject(AndObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="OrObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of OrObject.</param>
        public ObservationObject(OrObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="NotObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NotObject.</param>
        public ObservationObject(NotObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="ChooseForObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ChooseForObject.</param>
        public ObservationObject(ChooseForObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="GreaterOrEqualObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GreaterOrEqualObject.</param>
        public ObservationObject(GreaterOrEqualObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="GreaterObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GreaterObject.</param>
        public ObservationObject(GreaterObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="LesserObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LesserObject.</param>
        public ObservationObject(LesserObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="LesserOrEqualObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LesserOrEqualObject.</param>
        public ObservationObject(LesserOrEqualObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="EqualObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EqualObject.</param>
        public ObservationObject(EqualObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationObject" /> class
        /// with the <see cref="LabelRef" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LabelRef.</param>
        public ObservationObject(LabelRef actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AndObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ChooseForObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EqualObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GreaterObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GreaterOrEqualObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LabelRef))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LesserObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LesserOrEqualObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(NotObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(OrObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(bool))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AndObject, ChooseForObject, EqualObject, GreaterObject, GreaterOrEqualObject, LabelRef, LesserObject, LesserOrEqualObject, NotObject, OrObject, bool");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `bool`. If the actual instance is not `bool`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of bool</returns>
        public bool GetBool()
        {
            return (bool)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AndObject`. If the actual instance is not `AndObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AndObject</returns>
        public AndObject GetAndObject()
        {
            return (AndObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `OrObject`. If the actual instance is not `OrObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of OrObject</returns>
        public OrObject GetOrObject()
        {
            return (OrObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `NotObject`. If the actual instance is not `NotObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NotObject</returns>
        public NotObject GetNotObject()
        {
            return (NotObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ChooseForObject`. If the actual instance is not `ChooseForObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ChooseForObject</returns>
        public ChooseForObject GetChooseForObject()
        {
            return (ChooseForObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GreaterOrEqualObject`. If the actual instance is not `GreaterOrEqualObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GreaterOrEqualObject</returns>
        public GreaterOrEqualObject GetGreaterOrEqualObject()
        {
            return (GreaterOrEqualObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GreaterObject`. If the actual instance is not `GreaterObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GreaterObject</returns>
        public GreaterObject GetGreaterObject()
        {
            return (GreaterObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LesserObject`. If the actual instance is not `LesserObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LesserObject</returns>
        public LesserObject GetLesserObject()
        {
            return (LesserObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LesserOrEqualObject`. If the actual instance is not `LesserOrEqualObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LesserOrEqualObject</returns>
        public LesserOrEqualObject GetLesserOrEqualObject()
        {
            return (LesserOrEqualObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EqualObject`. If the actual instance is not `EqualObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EqualObject</returns>
        public EqualObject GetEqualObject()
        {
            return (EqualObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LabelRef`. If the actual instance is not `LabelRef`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LabelRef</returns>
        public LabelRef GetLabelRef()
        {
            return (LabelRef)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObservationObject {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ObservationObject.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ObservationObject
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ObservationObject</returns>
        public static ObservationObject FromJson(string jsonString)
        {
            ObservationObject newObservationObject = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newObservationObject;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AndObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<AndObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<AndObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AndObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AndObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ChooseForObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ChooseForObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<ChooseForObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ChooseForObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ChooseForObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(EqualObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<EqualObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<EqualObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("EqualObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EqualObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GreaterObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<GreaterObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<GreaterObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GreaterObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GreaterObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GreaterOrEqualObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<GreaterOrEqualObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<GreaterOrEqualObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GreaterOrEqualObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GreaterOrEqualObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LabelRef).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<LabelRef>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<LabelRef>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LabelRef");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LabelRef: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LesserObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<LesserObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<LesserObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LesserObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LesserObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LesserOrEqualObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<LesserOrEqualObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<LesserOrEqualObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LesserOrEqualObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LesserOrEqualObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(NotObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<NotObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<NotObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("NotObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NotObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(OrObject).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<OrObject>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<OrObject>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("OrObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into OrObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(bool).GetProperty("AdditionalProperties") == null)
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<bool>(jsonString, ObservationObject.SerializerSettings));
                }
                else
                {
                    newObservationObject = new ObservationObject(JsonConvert.DeserializeObject<bool>(jsonString, ObservationObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("bool");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into bool: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newObservationObject;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObservationObject);
        }

        /// <summary>
        /// Returns true if ObservationObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ObservationObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObservationObject input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ObservationObject
    /// </summary>
    public class ObservationObjectJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ObservationObject).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ObservationObject.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
