/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A time-varying expression that evaluates to a boolean
    /// </summary>
    [JsonConverter(typeof(ValueObjectJsonConverter))]
    [DataContract(Name = "ValueObject")]
    public partial class ValueObject : AbstractOpenAPISchema, IEquatable<ValueObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="TokenInAccountObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TokenInAccountObject.</param>
        public ValueObject(TokenInAccountObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="long" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of long.</param>
        public ValueObject(long actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="NegateObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NegateObject.</param>
        public ValueObject(NegateObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="AddObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddObject.</param>
        public ValueObject(AddObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="MinusObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MinusObject.</param>
        public ValueObject(MinusObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="MultiplyObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MultiplyObject.</param>
        public ValueObject(MultiplyObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="DivideObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DivideObject.</param>
        public ValueObject(DivideObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="ValueOfChoiceObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOfChoiceObject.</param>
        public ValueObject(ValueOfChoiceObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="TimeInterval" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TimeInterval.</param>
        public ValueObject(TimeInterval actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="UseValue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UseValue.</param>
        public ValueObject(UseValue actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="IfValueObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of IfValueObject.</param>
        public ValueObject(IfValueObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValueObject" /> class
        /// with the <see cref="LabelRef" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LabelRef.</param>
        public ValueObject(LabelRef actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AddObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DivideObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(IfValueObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LabelRef))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MinusObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MultiplyObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(NegateObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(TimeInterval))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(TokenInAccountObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UseValue))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOfChoiceObject))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(long))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AddObject, DivideObject, IfValueObject, LabelRef, MinusObject, MultiplyObject, NegateObject, TimeInterval, TokenInAccountObject, UseValue, ValueOfChoiceObject, long");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `TokenInAccountObject`. If the actual instance is not `TokenInAccountObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TokenInAccountObject</returns>
        public TokenInAccountObject GetTokenInAccountObject()
        {
            return (TokenInAccountObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `long`. If the actual instance is not `long`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of long</returns>
        public long GetLong()
        {
            return (long)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `NegateObject`. If the actual instance is not `NegateObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NegateObject</returns>
        public NegateObject GetNegateObject()
        {
            return (NegateObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddObject`. If the actual instance is not `AddObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddObject</returns>
        public AddObject GetAddObject()
        {
            return (AddObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MinusObject`. If the actual instance is not `MinusObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MinusObject</returns>
        public MinusObject GetMinusObject()
        {
            return (MinusObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MultiplyObject`. If the actual instance is not `MultiplyObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MultiplyObject</returns>
        public MultiplyObject GetMultiplyObject()
        {
            return (MultiplyObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DivideObject`. If the actual instance is not `DivideObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DivideObject</returns>
        public DivideObject GetDivideObject()
        {
            return (DivideObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOfChoiceObject`. If the actual instance is not `ValueOfChoiceObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOfChoiceObject</returns>
        public ValueOfChoiceObject GetValueOfChoiceObject()
        {
            return (ValueOfChoiceObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TimeInterval`. If the actual instance is not `TimeInterval`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TimeInterval</returns>
        public TimeInterval GetTimeInterval()
        {
            return (TimeInterval)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UseValue`. If the actual instance is not `UseValue`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UseValue</returns>
        public UseValue GetUseValue()
        {
            return (UseValue)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `IfValueObject`. If the actual instance is not `IfValueObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of IfValueObject</returns>
        public IfValueObject GetIfValueObject()
        {
            return (IfValueObject)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LabelRef`. If the actual instance is not `LabelRef`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LabelRef</returns>
        public LabelRef GetLabelRef()
        {
            return (LabelRef)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValueObject {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ValueObject.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ValueObject
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ValueObject</returns>
        public static ValueObject FromJson(string jsonString)
        {
            ValueObject newValueObject = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newValueObject;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AddObject).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<AddObject>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<AddObject>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AddObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DivideObject).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<DivideObject>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<DivideObject>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DivideObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DivideObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(IfValueObject).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<IfValueObject>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<IfValueObject>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("IfValueObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into IfValueObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LabelRef).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<LabelRef>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<LabelRef>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LabelRef");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LabelRef: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MinusObject).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<MinusObject>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<MinusObject>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MinusObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MinusObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MultiplyObject).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<MultiplyObject>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<MultiplyObject>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MultiplyObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MultiplyObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(NegateObject).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<NegateObject>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<NegateObject>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("NegateObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NegateObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(TimeInterval).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<TimeInterval>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<TimeInterval>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("TimeInterval");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TimeInterval: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(TokenInAccountObject).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<TokenInAccountObject>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<TokenInAccountObject>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("TokenInAccountObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TokenInAccountObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UseValue).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<UseValue>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<UseValue>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UseValue");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UseValue: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOfChoiceObject).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<ValueOfChoiceObject>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<ValueOfChoiceObject>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOfChoiceObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOfChoiceObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(long).GetProperty("AdditionalProperties") == null)
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<long>(jsonString, ValueObject.SerializerSettings));
                }
                else
                {
                    newValueObject = new ValueObject(JsonConvert.DeserializeObject<long>(jsonString, ValueObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("long");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into long: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newValueObject;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValueObject);
        }

        /// <summary>
        /// Returns true if ValueObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ValueObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValueObject input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ValueObject
    /// </summary>
    public class ValueObjectJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ValueObject).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ValueObject.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
