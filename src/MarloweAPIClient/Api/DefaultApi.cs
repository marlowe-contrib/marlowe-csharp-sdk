/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MarloweAPIClient.Client;
using MarloweAPIClient.Model;

namespace MarloweAPIClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Apply inputs to contract
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which applies inputs to an open Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId}/transactions/{transactionId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplyInputsResponse</returns>
        ApplyInputsResponse ApplyInputsToContract(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0);

        /// <summary>
        /// Apply inputs to contract
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which applies inputs to an open Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId}/transactions/{transactionId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplyInputsResponse</returns>
        ApiResponse<ApplyInputsResponse> ApplyInputsToContractWithHttpInfo(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a new contract
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which opens a new Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress">Where to send staking rewards for the Marlowe script outputs of this contract. (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateContractResponse</returns>
        CreateContractResponse CreateContract(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a new contract
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which opens a new Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress">Where to send staking rewards for the Marlowe script outputs of this contract. (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateContractResponse</returns>
        ApiResponse<CreateContractResponse> CreateContractWithHttpInfo(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0);
        /// <summary>
        /// Upload contract sources
        /// </summary>
        /// <remarks>
        /// Upload a bundle of marlowe objects as contract sources. This API supports request body streaming, with newline framing between request bundles.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main">The label of the top-level contract object in the bundle(s).</param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostContractSourceResponse</returns>
        PostContractSourceResponse CreateContractSources(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0);

        /// <summary>
        /// Upload contract sources
        /// </summary>
        /// <remarks>
        /// Upload a bundle of marlowe objects as contract sources. This API supports request body streaming, with newline framing between request bundles.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main">The label of the top-level contract object in the bundle(s).</param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostContractSourceResponse</returns>
        ApiResponse<PostContractSourceResponse> CreateContractSourcesWithHttpInfo(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0);
        /// <summary>
        /// Get contract by ID
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContractResponse</returns>
        GetContractResponse GetContractById(string contractId, int operationIndex = 0);

        /// <summary>
        /// Get contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContractResponse</returns>
        ApiResponse<GetContractResponse> GetContractByIdWithHttpInfo(string contractId, int operationIndex = 0);
        /// <summary>
        /// Get adjacent contract source IDs by ID
        /// </summary>
        /// <remarks>
        /// Get the contract source IDs which are adjacent to a contract source (they appear directly in the contract source).
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractSourceIds</returns>
        ContractSourceIds GetContractSourceAdjacency(string contractSourceId, int operationIndex = 0);

        /// <summary>
        /// Get adjacent contract source IDs by ID
        /// </summary>
        /// <remarks>
        /// Get the contract source IDs which are adjacent to a contract source (they appear directly in the contract source).
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractSourceIds</returns>
        ApiResponse<ContractSourceIds> GetContractSourceAdjacencyWithHttpInfo(string contractSourceId, int operationIndex = 0);
        /// <summary>
        /// Get contract source by ID
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contract</returns>
        Contract GetContractSourceById(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get contract source by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> GetContractSourceByIdWithHttpInfo(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get contract source closure by ID
        /// </summary>
        /// <remarks>
        /// Get the contract source IDs which appear in the full hierarchy of a contract source (including the ID of the contract source its self).
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractSourceIds</returns>
        ContractSourceIds GetContractSourceClosure(string contractSourceId, int operationIndex = 0);

        /// <summary>
        /// Get contract source closure by ID
        /// </summary>
        /// <remarks>
        /// Get the contract source IDs which appear in the full hierarchy of a contract source (including the ID of the contract source its self).
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractSourceIds</returns>
        ApiResponse<ContractSourceIds> GetContractSourceClosureWithHttpInfo(string contractSourceId, int operationIndex = 0);
        /// <summary>
        /// Get contract transaction by ID
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTransactionResponse</returns>
        GetTransactionResponse GetContractTransactionById(string contractId, string transactionId, int operationIndex = 0);

        /// <summary>
        /// Get contract transaction by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTransactionResponse</returns>
        ApiResponse<GetTransactionResponse> GetContractTransactionByIdWithHttpInfo(string contractId, string transactionId, int operationIndex = 0);
        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Get contracts published on chain. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContractsResponse</returns>
        GetContractsResponse GetContracts(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Get contracts published on chain. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContractsResponse</returns>
        ApiResponse<GetContractsResponse> GetContractsWithHttpInfo(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get next contract steps
        /// </summary>
        /// <remarks>
        /// Get inputs which could be performed on a contract withing a time range by the requested parties.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart">The beginning of the validity range.</param>
        /// <param name="validityEnd">The end of the validity range.</param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Next</returns>
        Next GetNextStepsForContract(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get next contract steps
        /// </summary>
        /// <remarks>
        /// Get inputs which could be performed on a contract withing a time range by the requested parties.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart">The beginning of the validity range.</param>
        /// <param name="validityEnd">The end of the validity range.</param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Next</returns>
        ApiResponse<Next> GetNextStepsForContractWithHttpInfo(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get payout by ID
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPayoutResponse</returns>
        GetPayoutResponse GetPayoutById(string payoutId, int operationIndex = 0);

        /// <summary>
        /// Get payout by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPayoutResponse</returns>
        ApiResponse<GetPayoutResponse> GetPayoutByIdWithHttpInfo(string payoutId, int operationIndex = 0);
        /// <summary>
        /// Get role payouts
        /// </summary>
        /// <remarks>
        /// Get payouts to parties from role-based contracts. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status">Whether to include available or withdrawn payouts in the results. (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPayoutsResponse</returns>
        GetPayoutsResponse GetPayouts(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get role payouts
        /// </summary>
        /// <remarks>
        /// Get payouts to parties from role-based contracts. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status">Whether to include available or withdrawn payouts in the results. (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPayoutsResponse</returns>
        ApiResponse<GetPayoutsResponse> GetPayoutsWithHttpInfo(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get transactions for contract
        /// </summary>
        /// <remarks>
        /// Get published transactions for a contract. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTransactionsResponse</returns>
        GetTransactionsResponse GetTransactionsForContract(string contractId, string? range = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get transactions for contract
        /// </summary>
        /// <remarks>
        /// Get published transactions for a contract. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTransactionsResponse</returns>
        ApiResponse<GetTransactionsResponse> GetTransactionsForContractWithHttpInfo(string contractId, string? range = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get withdrawal by ID
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Withdrawal</returns>
        Withdrawal GetWithdrawalById(string withdrawalId, int operationIndex = 0);

        /// <summary>
        /// Get withdrawal by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Withdrawal</returns>
        ApiResponse<Withdrawal> GetWithdrawalByIdWithHttpInfo(string withdrawalId, int operationIndex = 0);
        /// <summary>
        /// Get withdrawals
        /// </summary>
        /// <remarks>
        /// Get published withdrawal transactions. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWithdrawalsResponse</returns>
        GetWithdrawalsResponse GetWithdrawals(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get withdrawals
        /// </summary>
        /// <remarks>
        /// Get published withdrawal transactions. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWithdrawalsResponse</returns>
        ApiResponse<GetWithdrawalsResponse> GetWithdrawalsWithHttpInfo(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0);
        /// <summary>
        /// Test server status
        /// </summary>
        /// <remarks>
        /// Check if the server is running and ready to respond to requests.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Healthcheck(int operationIndex = 0);

        /// <summary>
        /// Test server status
        /// </summary>
        /// <remarks>
        /// Check if the server is running and ready to respond to requests.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HealthcheckWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Submit contract to chain
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that opens a new Marlowe contract. The transaction must have originally been created by the POST /contracts endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SubmitContract(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);

        /// <summary>
        /// Submit contract to chain
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that opens a new Marlowe contract. The transaction must have originally been created by the POST /contracts endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitContractWithHttpInfo(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);
        /// <summary>
        /// Submit contract input application
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that applies inputs to an open Marlowe contract. The transaction must have originally been created by the POST /contracts/{contractId}/transactions endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId}/transactions/{transactionId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SubmitContractTransaction(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);

        /// <summary>
        /// Submit contract input application
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that applies inputs to an open Marlowe contract. The transaction must have originally been created by the POST /contracts/{contractId}/transactions endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId}/transactions/{transactionId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitContractTransactionWithHttpInfo(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);
        /// <summary>
        /// Submit payout withdrawal
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that withdraws available payouts from a role payout validator. The transaction must have originally been created by the POST /withdrawals endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /withdrawals/{withdrawalId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SubmitWithdrawal(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);

        /// <summary>
        /// Submit payout withdrawal
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that withdraws available payouts from a role payout validator. The transaction must have originally been created by the POST /withdrawals endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /withdrawals/{withdrawalId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitWithdrawalWithHttpInfo(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0);
        /// <summary>
        /// Withdraw payouts
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which withdraws available payouts from a role payout validator. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /withdrawals/{withdrawalId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WithdrawPayoutsResponse</returns>
        WithdrawPayoutsResponse WithdrawPayouts(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0);

        /// <summary>
        /// Withdraw payouts
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which withdraws available payouts from a role payout validator. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /withdrawals/{withdrawalId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WithdrawPayoutsResponse</returns>
        ApiResponse<WithdrawPayoutsResponse> WithdrawPayoutsWithHttpInfo(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Apply inputs to contract
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which applies inputs to an open Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId}/transactions/{transactionId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplyInputsResponse</returns>
        System.Threading.Tasks.Task<ApplyInputsResponse> ApplyInputsToContractAsync(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apply inputs to contract
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which applies inputs to an open Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId}/transactions/{transactionId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplyInputsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplyInputsResponse>> ApplyInputsToContractWithHttpInfoAsync(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new contract
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which opens a new Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress">Where to send staking rewards for the Marlowe script outputs of this contract. (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateContractResponse</returns>
        System.Threading.Tasks.Task<CreateContractResponse> CreateContractAsync(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new contract
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which opens a new Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress">Where to send staking rewards for the Marlowe script outputs of this contract. (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateContractResponse>> CreateContractWithHttpInfoAsync(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload contract sources
        /// </summary>
        /// <remarks>
        /// Upload a bundle of marlowe objects as contract sources. This API supports request body streaming, with newline framing between request bundles.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main">The label of the top-level contract object in the bundle(s).</param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostContractSourceResponse</returns>
        System.Threading.Tasks.Task<PostContractSourceResponse> CreateContractSourcesAsync(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload contract sources
        /// </summary>
        /// <remarks>
        /// Upload a bundle of marlowe objects as contract sources. This API supports request body streaming, with newline framing between request bundles.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main">The label of the top-level contract object in the bundle(s).</param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostContractSourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContractSourceResponse>> CreateContractSourcesWithHttpInfoAsync(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContractResponse</returns>
        System.Threading.Tasks.Task<GetContractResponse> GetContractByIdAsync(string contractId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContractResponse>> GetContractByIdWithHttpInfoAsync(string contractId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get adjacent contract source IDs by ID
        /// </summary>
        /// <remarks>
        /// Get the contract source IDs which are adjacent to a contract source (they appear directly in the contract source).
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractSourceIds</returns>
        System.Threading.Tasks.Task<ContractSourceIds> GetContractSourceAdjacencyAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get adjacent contract source IDs by ID
        /// </summary>
        /// <remarks>
        /// Get the contract source IDs which are adjacent to a contract source (they appear directly in the contract source).
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractSourceIds)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractSourceIds>> GetContractSourceAdjacencyWithHttpInfoAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get contract source by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> GetContractSourceByIdAsync(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get contract source by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> GetContractSourceByIdWithHttpInfoAsync(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get contract source closure by ID
        /// </summary>
        /// <remarks>
        /// Get the contract source IDs which appear in the full hierarchy of a contract source (including the ID of the contract source its self).
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractSourceIds</returns>
        System.Threading.Tasks.Task<ContractSourceIds> GetContractSourceClosureAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get contract source closure by ID
        /// </summary>
        /// <remarks>
        /// Get the contract source IDs which appear in the full hierarchy of a contract source (including the ID of the contract source its self).
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractSourceIds)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractSourceIds>> GetContractSourceClosureWithHttpInfoAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get contract transaction by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTransactionResponse</returns>
        System.Threading.Tasks.Task<GetTransactionResponse> GetContractTransactionByIdAsync(string contractId, string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get contract transaction by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransactionResponse>> GetContractTransactionByIdWithHttpInfoAsync(string contractId, string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Get contracts published on chain. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContractsResponse</returns>
        System.Threading.Tasks.Task<GetContractsResponse> GetContractsAsync(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Get contracts published on chain. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContractsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContractsResponse>> GetContractsWithHttpInfoAsync(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get next contract steps
        /// </summary>
        /// <remarks>
        /// Get inputs which could be performed on a contract withing a time range by the requested parties.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart">The beginning of the validity range.</param>
        /// <param name="validityEnd">The end of the validity range.</param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Next</returns>
        System.Threading.Tasks.Task<Next> GetNextStepsForContractAsync(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get next contract steps
        /// </summary>
        /// <remarks>
        /// Get inputs which could be performed on a contract withing a time range by the requested parties.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart">The beginning of the validity range.</param>
        /// <param name="validityEnd">The end of the validity range.</param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Next)</returns>
        System.Threading.Tasks.Task<ApiResponse<Next>> GetNextStepsForContractWithHttpInfoAsync(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get payout by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPayoutResponse</returns>
        System.Threading.Tasks.Task<GetPayoutResponse> GetPayoutByIdAsync(string payoutId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get payout by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPayoutResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPayoutResponse>> GetPayoutByIdWithHttpInfoAsync(string payoutId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get role payouts
        /// </summary>
        /// <remarks>
        /// Get payouts to parties from role-based contracts. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status">Whether to include available or withdrawn payouts in the results. (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPayoutsResponse</returns>
        System.Threading.Tasks.Task<GetPayoutsResponse> GetPayoutsAsync(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get role payouts
        /// </summary>
        /// <remarks>
        /// Get payouts to parties from role-based contracts. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status">Whether to include available or withdrawn payouts in the results. (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPayoutsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPayoutsResponse>> GetPayoutsWithHttpInfoAsync(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get transactions for contract
        /// </summary>
        /// <remarks>
        /// Get published transactions for a contract. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTransactionsResponse</returns>
        System.Threading.Tasks.Task<GetTransactionsResponse> GetTransactionsForContractAsync(string contractId, string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get transactions for contract
        /// </summary>
        /// <remarks>
        /// Get published transactions for a contract. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransactionsResponse>> GetTransactionsForContractWithHttpInfoAsync(string contractId, string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get withdrawal by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Withdrawal</returns>
        System.Threading.Tasks.Task<Withdrawal> GetWithdrawalByIdAsync(string withdrawalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get withdrawal by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Withdrawal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Withdrawal>> GetWithdrawalByIdWithHttpInfoAsync(string withdrawalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get withdrawals
        /// </summary>
        /// <remarks>
        /// Get published withdrawal transactions. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWithdrawalsResponse</returns>
        System.Threading.Tasks.Task<GetWithdrawalsResponse> GetWithdrawalsAsync(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get withdrawals
        /// </summary>
        /// <remarks>
        /// Get published withdrawal transactions. Results are returned in pages, with paging being specified by request headers.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWithdrawalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWithdrawalsResponse>> GetWithdrawalsWithHttpInfoAsync(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test server status
        /// </summary>
        /// <remarks>
        /// Check if the server is running and ready to respond to requests.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HealthcheckAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test server status
        /// </summary>
        /// <remarks>
        /// Check if the server is running and ready to respond to requests.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HealthcheckWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit contract to chain
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that opens a new Marlowe contract. The transaction must have originally been created by the POST /contracts endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitContractAsync(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit contract to chain
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that opens a new Marlowe contract. The transaction must have originally been created by the POST /contracts endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitContractWithHttpInfoAsync(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit contract input application
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that applies inputs to an open Marlowe contract. The transaction must have originally been created by the POST /contracts/{contractId}/transactions endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId}/transactions/{transactionId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitContractTransactionAsync(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit contract input application
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that applies inputs to an open Marlowe contract. The transaction must have originally been created by the POST /contracts/{contractId}/transactions endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId}/transactions/{transactionId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitContractTransactionWithHttpInfoAsync(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit payout withdrawal
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that withdraws available payouts from a role payout validator. The transaction must have originally been created by the POST /withdrawals endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /withdrawals/{withdrawalId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitWithdrawalAsync(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit payout withdrawal
        /// </summary>
        /// <remarks>
        /// Submit a signed (Cardano) transaction that withdraws available payouts from a role payout validator. The transaction must have originally been created by the POST /withdrawals endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /withdrawals/{withdrawalId} endpoint to poll the on-chain status.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitWithdrawalWithHttpInfoAsync(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Withdraw payouts
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which withdraws available payouts from a role payout validator. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /withdrawals/{withdrawalId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WithdrawPayoutsResponse</returns>
        System.Threading.Tasks.Task<WithdrawPayoutsResponse> WithdrawPayoutsAsync(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Withdraw payouts
        /// </summary>
        /// <remarks>
        /// Build an unsigned (Cardano) transaction body which withdraws available payouts from a role payout validator. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /withdrawals/{withdrawalId} endpoint.
        /// </remarks>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WithdrawPayoutsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WithdrawPayoutsResponse>> WithdrawPayoutsWithHttpInfoAsync(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private MarloweAPIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = MarloweAPIClient.Client.Configuration.MergeConfigurations(
                MarloweAPIClient.Client.GlobalConfiguration.Instance,
                new MarloweAPIClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MarloweAPIClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MarloweAPIClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MarloweAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(MarloweAPIClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MarloweAPIClient.Client.Configuration.MergeConfigurations(
                MarloweAPIClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MarloweAPIClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MarloweAPIClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MarloweAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(MarloweAPIClient.Client.ISynchronousClient client, MarloweAPIClient.Client.IAsynchronousClient asyncClient, MarloweAPIClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MarloweAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MarloweAPIClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MarloweAPIClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MarloweAPIClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MarloweAPIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Apply inputs to contract Build an unsigned (Cardano) transaction body which applies inputs to an open Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId}/transactions/{transactionId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplyInputsResponse</returns>
        public ApplyInputsResponse ApplyInputsToContract(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ApplyInputsResponse> localVarResponse = ApplyInputsToContractWithHttpInfo(contractId, xChangeAddress, xAddress, xCollateralUTxO, postTransactionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply inputs to contract Build an unsigned (Cardano) transaction body which applies inputs to an open Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId}/transactions/{transactionId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplyInputsResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<ApplyInputsResponse> ApplyInputsToContractWithHttpInfo(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ApplyInputsToContract");
            }

            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->ApplyInputsToContract");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.apply-inputs-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postTransactionsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApplyInputsToContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplyInputsResponse>("/contracts/{contractId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyInputsToContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply inputs to contract Build an unsigned (Cardano) transaction body which applies inputs to an open Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId}/transactions/{transactionId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplyInputsResponse</returns>
        public async System.Threading.Tasks.Task<ApplyInputsResponse> ApplyInputsToContractAsync(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ApplyInputsResponse> localVarResponse = await ApplyInputsToContractWithHttpInfoAsync(contractId, xChangeAddress, xAddress, xCollateralUTxO, postTransactionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply inputs to contract Build an unsigned (Cardano) transaction body which applies inputs to an open Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId}/transactions/{transactionId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplyInputsResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ApplyInputsResponse>> ApplyInputsToContractWithHttpInfoAsync(string contractId, string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostTransactionsRequest? postTransactionsRequest = default(PostTransactionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ApplyInputsToContract");
            }

            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->ApplyInputsToContract");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.apply-inputs-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postTransactionsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApplyInputsToContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplyInputsResponse>("/contracts/{contractId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyInputsToContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new contract Build an unsigned (Cardano) transaction body which opens a new Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress">Where to send staking rewards for the Marlowe script outputs of this contract. (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateContractResponse</returns>
        public CreateContractResponse CreateContract(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<CreateContractResponse> localVarResponse = CreateContractWithHttpInfo(xChangeAddress, xStakeAddress, xAddress, xCollateralUTxO, postContractsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new contract Build an unsigned (Cardano) transaction body which opens a new Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress">Where to send staking rewards for the Marlowe script outputs of this contract. (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateContractResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<CreateContractResponse> CreateContractWithHttpInfo(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->CreateContract");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.contract-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xStakeAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Stake-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xStakeAddress)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postContractsRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateContractResponse>("/contracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new contract Build an unsigned (Cardano) transaction body which opens a new Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress">Where to send staking rewards for the Marlowe script outputs of this contract. (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateContractResponse</returns>
        public async System.Threading.Tasks.Task<CreateContractResponse> CreateContractAsync(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<CreateContractResponse> localVarResponse = await CreateContractWithHttpInfoAsync(xChangeAddress, xStakeAddress, xAddress, xCollateralUTxO, postContractsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new contract Build an unsigned (Cardano) transaction body which opens a new Marlowe contract. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /contracts/{contractId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xStakeAddress">Where to send staking rewards for the Marlowe script outputs of this contract. (optional)</param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postContractsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateContractResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<CreateContractResponse>> CreateContractWithHttpInfoAsync(string xChangeAddress, string? xStakeAddress = default(string?), string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostContractsRequest? postContractsRequest = default(PostContractsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->CreateContract");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.contract-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xStakeAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Stake-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xStakeAddress)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postContractsRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateContractResponse>("/contracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload contract sources Upload a bundle of marlowe objects as contract sources. This API supports request body streaming, with newline framing between request bundles.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main">The label of the top-level contract object in the bundle(s).</param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostContractSourceResponse</returns>
        public PostContractSourceResponse CreateContractSources(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<PostContractSourceResponse> localVarResponse = CreateContractSourcesWithHttpInfo(main, labelledObject);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload contract sources Upload a bundle of marlowe objects as contract sources. This API supports request body streaming, with newline framing between request bundles.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main">The label of the top-level contract object in the bundle(s).</param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostContractSourceResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<PostContractSourceResponse> CreateContractSourcesWithHttpInfo(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0)
        {
            // verify the required parameter 'main' is set
            if (main == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'main' when calling DefaultApi->CreateContractSources");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "main", main));
            localVarRequestOptions.Data = labelledObject;

            localVarRequestOptions.Operation = "DefaultApi.CreateContractSources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostContractSourceResponse>("/contracts/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContractSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload contract sources Upload a bundle of marlowe objects as contract sources. This API supports request body streaming, with newline framing between request bundles.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main">The label of the top-level contract object in the bundle(s).</param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostContractSourceResponse</returns>
        public async System.Threading.Tasks.Task<PostContractSourceResponse> CreateContractSourcesAsync(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<PostContractSourceResponse> localVarResponse = await CreateContractSourcesWithHttpInfoAsync(main, labelledObject, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload contract sources Upload a bundle of marlowe objects as contract sources. This API supports request body streaming, with newline framing between request bundles.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="main">The label of the top-level contract object in the bundle(s).</param>
        /// <param name="labelledObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostContractSourceResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<PostContractSourceResponse>> CreateContractSourcesWithHttpInfoAsync(string main, List<LabelledObject>? labelledObject = default(List<LabelledObject>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'main' is set
            if (main == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'main' when calling DefaultApi->CreateContractSources");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "main", main));
            localVarRequestOptions.Data = labelledObject;

            localVarRequestOptions.Operation = "DefaultApi.CreateContractSources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostContractSourceResponse>("/contracts/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContractSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContractResponse</returns>
        public GetContractResponse GetContractById(string contractId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<GetContractResponse> localVarResponse = GetContractByIdWithHttpInfo(contractId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContractResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<GetContractResponse> GetContractByIdWithHttpInfo(string contractId, int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->GetContractById");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetContractById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContractResponse>("/contracts/{contractId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContractResponse</returns>
        public async System.Threading.Tasks.Task<GetContractResponse> GetContractByIdAsync(string contractId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<GetContractResponse> localVarResponse = await GetContractByIdWithHttpInfoAsync(contractId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContractResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<GetContractResponse>> GetContractByIdWithHttpInfoAsync(string contractId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->GetContractById");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetContractById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContractResponse>("/contracts/{contractId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get adjacent contract source IDs by ID Get the contract source IDs which are adjacent to a contract source (they appear directly in the contract source).
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractSourceIds</returns>
        public ContractSourceIds GetContractSourceAdjacency(string contractSourceId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ContractSourceIds> localVarResponse = GetContractSourceAdjacencyWithHttpInfo(contractSourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get adjacent contract source IDs by ID Get the contract source IDs which are adjacent to a contract source (they appear directly in the contract source).
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractSourceIds</returns>
        public MarloweAPIClient.Client.ApiResponse<ContractSourceIds> GetContractSourceAdjacencyWithHttpInfo(string contractSourceId, int operationIndex = 0)
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->GetContractSourceAdjacency");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetContractSourceAdjacency";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContractSourceIds>("/contracts/sources/{contractSourceId}/adjacency", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractSourceAdjacency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get adjacent contract source IDs by ID Get the contract source IDs which are adjacent to a contract source (they appear directly in the contract source).
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractSourceIds</returns>
        public async System.Threading.Tasks.Task<ContractSourceIds> GetContractSourceAdjacencyAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ContractSourceIds> localVarResponse = await GetContractSourceAdjacencyWithHttpInfoAsync(contractSourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get adjacent contract source IDs by ID Get the contract source IDs which are adjacent to a contract source (they appear directly in the contract source).
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractSourceIds)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ContractSourceIds>> GetContractSourceAdjacencyWithHttpInfoAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->GetContractSourceAdjacency");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetContractSourceAdjacency";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContractSourceIds>("/contracts/sources/{contractSourceId}/adjacency", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractSourceAdjacency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract source by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contract</returns>
        public Contract GetContractSourceById(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<Contract> localVarResponse = GetContractSourceByIdWithHttpInfo(contractSourceId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract source by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contract</returns>
        public MarloweAPIClient.Client.ApiResponse<Contract> GetContractSourceByIdWithHttpInfo(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->GetContractSourceById");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetContractSourceById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Contract>("/contracts/sources/{contractSourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractSourceById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract source by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> GetContractSourceByIdAsync(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<Contract> localVarResponse = await GetContractSourceByIdWithHttpInfoAsync(contractSourceId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract source by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="expand"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Contract>> GetContractSourceByIdWithHttpInfoAsync(string contractSourceId, bool? expand = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->GetContractSourceById");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetContractSourceById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Contract>("/contracts/sources/{contractSourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractSourceById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract source closure by ID Get the contract source IDs which appear in the full hierarchy of a contract source (including the ID of the contract source its self).
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContractSourceIds</returns>
        public ContractSourceIds GetContractSourceClosure(string contractSourceId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<ContractSourceIds> localVarResponse = GetContractSourceClosureWithHttpInfo(contractSourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract source closure by ID Get the contract source IDs which appear in the full hierarchy of a contract source (including the ID of the contract source its self).
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContractSourceIds</returns>
        public MarloweAPIClient.Client.ApiResponse<ContractSourceIds> GetContractSourceClosureWithHttpInfo(string contractSourceId, int operationIndex = 0)
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->GetContractSourceClosure");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetContractSourceClosure";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContractSourceIds>("/contracts/sources/{contractSourceId}/closure", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractSourceClosure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract source closure by ID Get the contract source IDs which appear in the full hierarchy of a contract source (including the ID of the contract source its self).
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContractSourceIds</returns>
        public async System.Threading.Tasks.Task<ContractSourceIds> GetContractSourceClosureAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<ContractSourceIds> localVarResponse = await GetContractSourceClosureWithHttpInfoAsync(contractSourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract source closure by ID Get the contract source IDs which appear in the full hierarchy of a contract source (including the ID of the contract source its self).
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractSourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContractSourceIds)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<ContractSourceIds>> GetContractSourceClosureWithHttpInfoAsync(string contractSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractSourceId' is set
            if (contractSourceId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractSourceId' when calling DefaultApi->GetContractSourceClosure");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractSourceId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractSourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetContractSourceClosure";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContractSourceIds>("/contracts/sources/{contractSourceId}/closure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractSourceClosure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract transaction by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTransactionResponse</returns>
        public GetTransactionResponse GetContractTransactionById(string contractId, string transactionId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<GetTransactionResponse> localVarResponse = GetContractTransactionByIdWithHttpInfo(contractId, transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract transaction by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTransactionResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<GetTransactionResponse> GetContractTransactionByIdWithHttpInfo(string contractId, string transactionId, int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->GetContractTransactionById");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->GetContractTransactionById");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", MarloweAPIClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetContractTransactionById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTransactionResponse>("/contracts/{contractId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractTransactionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract transaction by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTransactionResponse</returns>
        public async System.Threading.Tasks.Task<GetTransactionResponse> GetContractTransactionByIdAsync(string contractId, string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<GetTransactionResponse> localVarResponse = await GetContractTransactionByIdWithHttpInfoAsync(contractId, transactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract transaction by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTransactionResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<GetTransactionResponse>> GetContractTransactionByIdWithHttpInfoAsync(string contractId, string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->GetContractTransactionById");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->GetContractTransactionById");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", MarloweAPIClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetContractTransactionById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTransactionResponse>("/contracts/{contractId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractTransactionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contracts Get contracts published on chain. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContractsResponse</returns>
        public GetContractsResponse GetContracts(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<GetContractsResponse> localVarResponse = GetContractsWithHttpInfo(roleCurrency, tag, partyAddress, partyRole, range);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contracts Get contracts published on chain. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContractsResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<GetContractsResponse> GetContractsWithHttpInfo(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (roleCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleCurrency", roleCurrency));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (partyAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "partyAddress", partyAddress));
            }
            if (partyRole != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "partyRole", partyRole));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GetContracts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContractsResponse>("/contracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contracts Get contracts published on chain. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContractsResponse</returns>
        public async System.Threading.Tasks.Task<GetContractsResponse> GetContractsAsync(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<GetContractsResponse> localVarResponse = await GetContractsWithHttpInfoAsync(roleCurrency, tag, partyAddress, partyRole, range, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contracts Get contracts published on chain. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="partyAddress"> (optional)</param>
        /// <param name="partyRole"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContractsResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<GetContractsResponse>> GetContractsWithHttpInfoAsync(List<string>? roleCurrency = default(List<string>?), List<string>? tag = default(List<string>?), List<string>? partyAddress = default(List<string>?), List<string>? partyRole = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (roleCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleCurrency", roleCurrency));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (partyAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "partyAddress", partyAddress));
            }
            if (partyRole != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "partyRole", partyRole));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GetContracts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContractsResponse>("/contracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get next contract steps Get inputs which could be performed on a contract withing a time range by the requested parties.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart">The beginning of the validity range.</param>
        /// <param name="validityEnd">The end of the validity range.</param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Next</returns>
        public Next GetNextStepsForContract(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<Next> localVarResponse = GetNextStepsForContractWithHttpInfo(contractId, validityStart, validityEnd, party);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get next contract steps Get inputs which could be performed on a contract withing a time range by the requested parties.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart">The beginning of the validity range.</param>
        /// <param name="validityEnd">The end of the validity range.</param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Next</returns>
        public MarloweAPIClient.Client.ApiResponse<Next> GetNextStepsForContractWithHttpInfo(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->GetNextStepsForContract");
            }

            // verify the required parameter 'validityStart' is set
            if (validityStart == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'validityStart' when calling DefaultApi->GetNextStepsForContract");
            }

            // verify the required parameter 'validityEnd' is set
            if (validityEnd == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'validityEnd' when calling DefaultApi->GetNextStepsForContract");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "validityStart", validityStart));
            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "validityEnd", validityEnd));
            if (party != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "party", party));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetNextStepsForContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Next>("/contracts/{contractId}/next", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNextStepsForContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get next contract steps Get inputs which could be performed on a contract withing a time range by the requested parties.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart">The beginning of the validity range.</param>
        /// <param name="validityEnd">The end of the validity range.</param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Next</returns>
        public async System.Threading.Tasks.Task<Next> GetNextStepsForContractAsync(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<Next> localVarResponse = await GetNextStepsForContractWithHttpInfoAsync(contractId, validityStart, validityEnd, party, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get next contract steps Get inputs which could be performed on a contract withing a time range by the requested parties.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="validityStart">The beginning of the validity range.</param>
        /// <param name="validityEnd">The end of the validity range.</param>
        /// <param name="party"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Next)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Next>> GetNextStepsForContractWithHttpInfoAsync(string contractId, string validityStart, string validityEnd, List<string>? party = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->GetNextStepsForContract");
            }

            // verify the required parameter 'validityStart' is set
            if (validityStart == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'validityStart' when calling DefaultApi->GetNextStepsForContract");
            }

            // verify the required parameter 'validityEnd' is set
            if (validityEnd == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'validityEnd' when calling DefaultApi->GetNextStepsForContract");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "validityStart", validityStart));
            localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "validityEnd", validityEnd));
            if (party != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "party", party));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetNextStepsForContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Next>("/contracts/{contractId}/next", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNextStepsForContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payout by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPayoutResponse</returns>
        public GetPayoutResponse GetPayoutById(string payoutId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<GetPayoutResponse> localVarResponse = GetPayoutByIdWithHttpInfo(payoutId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payout by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPayoutResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<GetPayoutResponse> GetPayoutByIdWithHttpInfo(string payoutId, int operationIndex = 0)
        {
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'payoutId' when calling DefaultApi->GetPayoutById");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payoutId", MarloweAPIClient.Client.ClientUtils.ParameterToString(payoutId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetPayoutById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPayoutResponse>("/payouts/{payoutId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayoutById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payout by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPayoutResponse</returns>
        public async System.Threading.Tasks.Task<GetPayoutResponse> GetPayoutByIdAsync(string payoutId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<GetPayoutResponse> localVarResponse = await GetPayoutByIdWithHttpInfoAsync(payoutId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payout by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payoutId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPayoutResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<GetPayoutResponse>> GetPayoutByIdWithHttpInfoAsync(string payoutId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'payoutId' when calling DefaultApi->GetPayoutById");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payoutId", MarloweAPIClient.Client.ClientUtils.ParameterToString(payoutId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetPayoutById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPayoutResponse>("/payouts/{payoutId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayoutById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get role payouts Get payouts to parties from role-based contracts. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status">Whether to include available or withdrawn payouts in the results. (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPayoutsResponse</returns>
        public GetPayoutsResponse GetPayouts(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<GetPayoutsResponse> localVarResponse = GetPayoutsWithHttpInfo(contractId, roleToken, status, range);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get role payouts Get payouts to parties from role-based contracts. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status">Whether to include available or withdrawn payouts in the results. (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPayoutsResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<GetPayoutsResponse> GetPayoutsWithHttpInfo(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }
            if (roleToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleToken", roleToken));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GetPayouts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPayoutsResponse>("/payouts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get role payouts Get payouts to parties from role-based contracts. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status">Whether to include available or withdrawn payouts in the results. (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPayoutsResponse</returns>
        public async System.Threading.Tasks.Task<GetPayoutsResponse> GetPayoutsAsync(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<GetPayoutsResponse> localVarResponse = await GetPayoutsWithHttpInfoAsync(contractId, roleToken, status, range, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get role payouts Get payouts to parties from role-based contracts. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"> (optional)</param>
        /// <param name="roleToken"> (optional)</param>
        /// <param name="status">Whether to include available or withdrawn payouts in the results. (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPayoutsResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<GetPayoutsResponse>> GetPayoutsWithHttpInfoAsync(List<string>? contractId = default(List<string>?), List<string>? roleToken = default(List<string>?), string? status = default(string?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }
            if (roleToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleToken", roleToken));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GetPayouts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPayoutsResponse>("/payouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transactions for contract Get published transactions for a contract. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTransactionsResponse</returns>
        public GetTransactionsResponse GetTransactionsForContract(string contractId, string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<GetTransactionsResponse> localVarResponse = GetTransactionsForContractWithHttpInfo(contractId, range);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transactions for contract Get published transactions for a contract. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTransactionsResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<GetTransactionsResponse> GetTransactionsForContractWithHttpInfo(string contractId, string? range = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->GetTransactionsForContract");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GetTransactionsForContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTransactionsResponse>("/contracts/{contractId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionsForContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transactions for contract Get published transactions for a contract. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<GetTransactionsResponse> GetTransactionsForContractAsync(string contractId, string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<GetTransactionsResponse> localVarResponse = await GetTransactionsForContractWithHttpInfoAsync(contractId, range, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transactions for contract Get published transactions for a contract. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<GetTransactionsResponse>> GetTransactionsForContractWithHttpInfoAsync(string contractId, string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->GetTransactionsForContract");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GetTransactionsForContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTransactionsResponse>("/contracts/{contractId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionsForContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get withdrawal by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Withdrawal</returns>
        public Withdrawal GetWithdrawalById(string withdrawalId, int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<Withdrawal> localVarResponse = GetWithdrawalByIdWithHttpInfo(withdrawalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get withdrawal by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Withdrawal</returns>
        public MarloweAPIClient.Client.ApiResponse<Withdrawal> GetWithdrawalByIdWithHttpInfo(string withdrawalId, int operationIndex = 0)
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'withdrawalId' when calling DefaultApi->GetWithdrawalById");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("withdrawalId", MarloweAPIClient.Client.ClientUtils.ParameterToString(withdrawalId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetWithdrawalById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Withdrawal>("/withdrawals/{withdrawalId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWithdrawalById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get withdrawal by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Withdrawal</returns>
        public async System.Threading.Tasks.Task<Withdrawal> GetWithdrawalByIdAsync(string withdrawalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<Withdrawal> localVarResponse = await GetWithdrawalByIdWithHttpInfoAsync(withdrawalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get withdrawal by ID 
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Withdrawal)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Withdrawal>> GetWithdrawalByIdWithHttpInfoAsync(string withdrawalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'withdrawalId' when calling DefaultApi->GetWithdrawalById");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("withdrawalId", MarloweAPIClient.Client.ClientUtils.ParameterToString(withdrawalId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetWithdrawalById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Withdrawal>("/withdrawals/{withdrawalId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWithdrawalById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get withdrawals Get published withdrawal transactions. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWithdrawalsResponse</returns>
        public GetWithdrawalsResponse GetWithdrawals(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<GetWithdrawalsResponse> localVarResponse = GetWithdrawalsWithHttpInfo(roleCurrency, range);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get withdrawals Get published withdrawal transactions. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWithdrawalsResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<GetWithdrawalsResponse> GetWithdrawalsWithHttpInfo(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (roleCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleCurrency", roleCurrency));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GetWithdrawals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWithdrawalsResponse>("/withdrawals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWithdrawals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get withdrawals Get published withdrawal transactions. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWithdrawalsResponse</returns>
        public async System.Threading.Tasks.Task<GetWithdrawalsResponse> GetWithdrawalsAsync(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<GetWithdrawalsResponse> localVarResponse = await GetWithdrawalsWithHttpInfoAsync(roleCurrency, range, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get withdrawals Get published withdrawal transactions. Results are returned in pages, with paging being specified by request headers.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCurrency"> (optional)</param>
        /// <param name="range"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWithdrawalsResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<GetWithdrawalsResponse>> GetWithdrawalsWithHttpInfoAsync(List<string>? roleCurrency = default(List<string>?), string? range = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (roleCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(MarloweAPIClient.Client.ClientUtils.ParameterToMultiMap("multi", "roleCurrency", roleCurrency));
            }
            if (range != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Range", MarloweAPIClient.Client.ClientUtils.ParameterToString(range)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GetWithdrawals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWithdrawalsResponse>("/withdrawals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWithdrawals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test server status Check if the server is running and ready to respond to requests.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Healthcheck(int operationIndex = 0)
        {
            HealthcheckWithHttpInfo();
        }

        /// <summary>
        /// Test server status Check if the server is running and ready to respond to requests.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MarloweAPIClient.Client.ApiResponse<Object> HealthcheckWithHttpInfo(int operationIndex = 0)
        {
            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.Healthcheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/healthcheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Healthcheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test server status Check if the server is running and ready to respond to requests.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HealthcheckAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await HealthcheckWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Test server status Check if the server is running and ready to respond to requests.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Object>> HealthcheckWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.Healthcheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/healthcheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Healthcheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit contract to chain Submit a signed (Cardano) transaction that opens a new Marlowe contract. The transaction must have originally been created by the POST /contracts endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SubmitContract(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            SubmitContractWithHttpInfo(contractId, textEnvelope);
        }

        /// <summary>
        /// Submit contract to chain Submit a signed (Cardano) transaction that opens a new Marlowe contract. The transaction must have originally been created by the POST /contracts endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MarloweAPIClient.Client.ApiResponse<Object> SubmitContractWithHttpInfo(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->SubmitContract");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.SubmitContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/contracts/{contractId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit contract to chain Submit a signed (Cardano) transaction that opens a new Marlowe contract. The transaction must have originally been created by the POST /contracts endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitContractAsync(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubmitContractWithHttpInfoAsync(contractId, textEnvelope, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Submit contract to chain Submit a signed (Cardano) transaction that opens a new Marlowe contract. The transaction must have originally been created by the POST /contracts endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Object>> SubmitContractWithHttpInfoAsync(string contractId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->SubmitContract");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.SubmitContract";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/contracts/{contractId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitContract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit contract input application Submit a signed (Cardano) transaction that applies inputs to an open Marlowe contract. The transaction must have originally been created by the POST /contracts/{contractId}/transactions endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId}/transactions/{transactionId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SubmitContractTransaction(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            SubmitContractTransactionWithHttpInfo(contractId, transactionId, textEnvelope);
        }

        /// <summary>
        /// Submit contract input application Submit a signed (Cardano) transaction that applies inputs to an open Marlowe contract. The transaction must have originally been created by the POST /contracts/{contractId}/transactions endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId}/transactions/{transactionId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MarloweAPIClient.Client.ApiResponse<Object> SubmitContractTransactionWithHttpInfo(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->SubmitContractTransaction");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->SubmitContractTransaction");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", MarloweAPIClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.SubmitContractTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/contracts/{contractId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitContractTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit contract input application Submit a signed (Cardano) transaction that applies inputs to an open Marlowe contract. The transaction must have originally been created by the POST /contracts/{contractId}/transactions endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId}/transactions/{transactionId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitContractTransactionAsync(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubmitContractTransactionWithHttpInfoAsync(contractId, transactionId, textEnvelope, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Submit contract input application Submit a signed (Cardano) transaction that applies inputs to an open Marlowe contract. The transaction must have originally been created by the POST /contracts/{contractId}/transactions endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /contracts/{contractId}/transactions/{transactionId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="transactionId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Object>> SubmitContractTransactionWithHttpInfoAsync(string contractId, string transactionId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->SubmitContractTransaction");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->SubmitContractTransaction");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contractId", MarloweAPIClient.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", MarloweAPIClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.SubmitContractTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/contracts/{contractId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitContractTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit payout withdrawal Submit a signed (Cardano) transaction that withdraws available payouts from a role payout validator. The transaction must have originally been created by the POST /withdrawals endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /withdrawals/{withdrawalId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SubmitWithdrawal(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            SubmitWithdrawalWithHttpInfo(withdrawalId, textEnvelope);
        }

        /// <summary>
        /// Submit payout withdrawal Submit a signed (Cardano) transaction that withdraws available payouts from a role payout validator. The transaction must have originally been created by the POST /withdrawals endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /withdrawals/{withdrawalId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MarloweAPIClient.Client.ApiResponse<Object> SubmitWithdrawalWithHttpInfo(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0)
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'withdrawalId' when calling DefaultApi->SubmitWithdrawal");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("withdrawalId", MarloweAPIClient.Client.ClientUtils.ParameterToString(withdrawalId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.SubmitWithdrawal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/withdrawals/{withdrawalId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitWithdrawal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit payout withdrawal Submit a signed (Cardano) transaction that withdraws available payouts from a role payout validator. The transaction must have originally been created by the POST /withdrawals endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /withdrawals/{withdrawalId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitWithdrawalAsync(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubmitWithdrawalWithHttpInfoAsync(withdrawalId, textEnvelope, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Submit payout withdrawal Submit a signed (Cardano) transaction that withdraws available payouts from a role payout validator. The transaction must have originally been created by the POST /withdrawals endpoint. This endpoint will respond when the transaction is submitted successfully to the local node, which means it will not wait for the transaction to be published in a block. Use the GET /withdrawals/{withdrawalId} endpoint to poll the on-chain status.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <param name="textEnvelope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<Object>> SubmitWithdrawalWithHttpInfoAsync(string withdrawalId, TextEnvelope? textEnvelope = default(TextEnvelope?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'withdrawalId' when calling DefaultApi->SubmitWithdrawal");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("withdrawalId", MarloweAPIClient.Client.ClientUtils.ParameterToString(withdrawalId)); // path parameter
            localVarRequestOptions.Data = textEnvelope;

            localVarRequestOptions.Operation = "DefaultApi.SubmitWithdrawal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/withdrawals/{withdrawalId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitWithdrawal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraw payouts Build an unsigned (Cardano) transaction body which withdraws available payouts from a role payout validator. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /withdrawals/{withdrawalId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WithdrawPayoutsResponse</returns>
        public WithdrawPayoutsResponse WithdrawPayouts(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0)
        {
            MarloweAPIClient.Client.ApiResponse<WithdrawPayoutsResponse> localVarResponse = WithdrawPayoutsWithHttpInfo(xChangeAddress, xAddress, xCollateralUTxO, postWithdrawalsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw payouts Build an unsigned (Cardano) transaction body which withdraws available payouts from a role payout validator. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /withdrawals/{withdrawalId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WithdrawPayoutsResponse</returns>
        public MarloweAPIClient.Client.ApiResponse<WithdrawPayoutsResponse> WithdrawPayoutsWithHttpInfo(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->WithdrawPayouts");
            }

            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.withdraw-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postWithdrawalsRequest;

            localVarRequestOptions.Operation = "DefaultApi.WithdrawPayouts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WithdrawPayoutsResponse>("/withdrawals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawPayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraw payouts Build an unsigned (Cardano) transaction body which withdraws available payouts from a role payout validator. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /withdrawals/{withdrawalId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WithdrawPayoutsResponse</returns>
        public async System.Threading.Tasks.Task<WithdrawPayoutsResponse> WithdrawPayoutsAsync(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MarloweAPIClient.Client.ApiResponse<WithdrawPayoutsResponse> localVarResponse = await WithdrawPayoutsWithHttpInfoAsync(xChangeAddress, xAddress, xCollateralUTxO, postWithdrawalsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw payouts Build an unsigned (Cardano) transaction body which withdraws available payouts from a role payout validator. This unsigned transaction must be signed by a wallet (such as a CIP-30 or CIP-45 wallet) before being submitted. To submit the signed transaction, use the PUT /withdrawals/{withdrawalId} endpoint.
        /// </summary>
        /// <exception cref="MarloweAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChangeAddress"></param>
        /// <param name="xAddress"> (optional)</param>
        /// <param name="xCollateralUTxO"> (optional)</param>
        /// <param name="postWithdrawalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WithdrawPayoutsResponse)</returns>
        public async System.Threading.Tasks.Task<MarloweAPIClient.Client.ApiResponse<WithdrawPayoutsResponse>> WithdrawPayoutsWithHttpInfoAsync(string xChangeAddress, string? xAddress = default(string?), string? xCollateralUTxO = default(string?), PostWithdrawalsRequest? postWithdrawalsRequest = default(PostWithdrawalsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xChangeAddress' is set
            if (xChangeAddress == null)
            {
                throw new MarloweAPIClient.Client.ApiException(400, "Missing required parameter 'xChangeAddress' when calling DefaultApi->WithdrawPayouts");
            }


            MarloweAPIClient.Client.RequestOptions localVarRequestOptions = new MarloweAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vendor.iog.marlowe-runtime.withdraw-tx-json"
            };

            var localVarContentType = MarloweAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MarloweAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Change-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xChangeAddress)); // header parameter
            if (xAddress != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Address", MarloweAPIClient.Client.ClientUtils.ParameterToString(xAddress)); // header parameter
            }
            if (xCollateralUTxO != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Collateral-UTxO", MarloweAPIClient.Client.ClientUtils.ParameterToString(xCollateralUTxO)); // header parameter
            }
            localVarRequestOptions.Data = postWithdrawalsRequest;

            localVarRequestOptions.Operation = "DefaultApi.WithdrawPayouts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WithdrawPayoutsResponse>("/withdrawals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawPayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
