/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// ChoiceAction
    /// </summary>
    [DataContract(Name = "ChoiceAction")]
    public partial class ChoiceAction : IEquatable<ChoiceAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChoiceAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChoiceAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChoiceAction" /> class.
        /// </summary>
        /// <param name="chooseBetween">chooseBetween (required).</param>
        /// <param name="forChoice">forChoice (required).</param>
        public ChoiceAction(List<Bound> chooseBetween = default(List<Bound>), ChoiceId forChoice = default(ChoiceId))
        {
            // to ensure "chooseBetween" is required (not null)
            if (chooseBetween == null)
            {
                throw new ArgumentNullException("chooseBetween is a required property for ChoiceAction and cannot be null");
            }
            this._ChooseBetween = chooseBetween;
            // to ensure "forChoice" is required (not null)
            if (forChoice == null)
            {
                throw new ArgumentNullException("forChoice is a required property for ChoiceAction and cannot be null");
            }
            this._ForChoice = forChoice;
        }

        /// <summary>
        /// Gets or Sets ChooseBetween
        /// </summary>
        [DataMember(Name = "choose_between", IsRequired = true, EmitDefaultValue = true)]
        public List<Bound> ChooseBetween
        {
            get{ return _ChooseBetween;}
            set
            {
                _ChooseBetween = value;
                _flagChooseBetween = true;
            }
        }
        private List<Bound> _ChooseBetween;
        private bool _flagChooseBetween;

        /// <summary>
        /// Returns false as ChooseBetween should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChooseBetween()
        {
            return _flagChooseBetween;
        }
        /// <summary>
        /// Gets or Sets ForChoice
        /// </summary>
        [DataMember(Name = "for_choice", IsRequired = true, EmitDefaultValue = true)]
        public ChoiceId ForChoice
        {
            get{ return _ForChoice;}
            set
            {
                _ForChoice = value;
                _flagForChoice = true;
            }
        }
        private ChoiceId _ForChoice;
        private bool _flagForChoice;

        /// <summary>
        /// Returns false as ForChoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeForChoice()
        {
            return _flagForChoice;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChoiceAction {\n");
            sb.Append("  ChooseBetween: ").Append(ChooseBetween).Append("\n");
            sb.Append("  ForChoice: ").Append(ForChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChoiceAction);
        }

        /// <summary>
        /// Returns true if ChoiceAction instances are equal
        /// </summary>
        /// <param name="input">Instance of ChoiceAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChoiceAction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChooseBetween == input.ChooseBetween ||
                    this.ChooseBetween != null &&
                    input.ChooseBetween != null &&
                    this.ChooseBetween.SequenceEqual(input.ChooseBetween)
                ) && 
                (
                    this.ForChoice == input.ForChoice ||
                    (this.ForChoice != null &&
                    this.ForChoice.Equals(input.ForChoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChooseBetween != null)
                {
                    hashCode = (hashCode * 59) + this.ChooseBetween.GetHashCode();
                }
                if (this.ForChoice != null)
                {
                    hashCode = (hashCode * 59) + this.ForChoice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
