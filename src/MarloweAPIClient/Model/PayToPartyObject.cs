/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Pays funds to a party.
    /// </summary>
    [DataContract(Name = "PayToPartyObject")]
    public partial class PayToPartyObject : IEquatable<PayToPartyObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayToPartyObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayToPartyObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayToPartyObject" /> class.
        /// </summary>
        /// <param name="party">party (required).</param>
        public PayToPartyObject(PartyObject party = default(PartyObject))
        {
            // to ensure "party" is required (not null)
            if (party == null)
            {
                throw new ArgumentNullException("party is a required property for PayToPartyObject and cannot be null");
            }
            this.Party = party;
        }

        /// <summary>
        /// Gets or Sets Party
        /// </summary>
        [DataMember(Name = "party", IsRequired = true, EmitDefaultValue = true)]
        public PartyObject Party { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayToPartyObject {\n");
            sb.Append("  Party: ").Append(Party).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayToPartyObject);
        }

        /// <summary>
        /// Returns true if PayToPartyObject instances are equal
        /// </summary>
        /// <param name="input">Instance of PayToPartyObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayToPartyObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Party == input.Party ||
                    (this.Party != null &&
                    this.Party.Equals(input.Party))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Party != null)
                {
                    hashCode = (hashCode * 59) + this.Party.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
