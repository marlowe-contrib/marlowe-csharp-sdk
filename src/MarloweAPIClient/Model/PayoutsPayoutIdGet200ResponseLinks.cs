/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// PayoutsPayoutIdGet200ResponseLinks
    /// </summary>
    [DataContract(Name = "_payouts__payoutId__get_200_response_links")]
    public partial class PayoutsPayoutIdGet200ResponseLinks : IEquatable<PayoutsPayoutIdGet200ResponseLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsPayoutIdGet200ResponseLinks" /> class.
        /// </summary>
        /// <param name="contract">contract.</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="withdrawal">withdrawal.</param>
        public PayoutsPayoutIdGet200ResponseLinks(string contract = default(string), string transaction = default(string), string withdrawal = default(string))
        {
            this._Contract = contract;
            if (this.Contract != null)
            {
                this._flagContract = true;
            }
            this._Transaction = transaction;
            if (this.Transaction != null)
            {
                this._flagTransaction = true;
            }
            this._Withdrawal = withdrawal;
            if (this.Withdrawal != null)
            {
                this._flagWithdrawal = true;
            }
        }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name = "contract", EmitDefaultValue = false)]
        public string Contract
        {
            get{ return _Contract;}
            set
            {
                _Contract = value;
                _flagContract = true;
            }
        }
        private string _Contract;
        private bool _flagContract;

        /// <summary>
        /// Returns false as Contract should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContract()
        {
            return _flagContract;
        }
        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", EmitDefaultValue = false)]
        public string Transaction
        {
            get{ return _Transaction;}
            set
            {
                _Transaction = value;
                _flagTransaction = true;
            }
        }
        private string _Transaction;
        private bool _flagTransaction;

        /// <summary>
        /// Returns false as Transaction should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransaction()
        {
            return _flagTransaction;
        }
        /// <summary>
        /// Gets or Sets Withdrawal
        /// </summary>
        [DataMember(Name = "withdrawal", EmitDefaultValue = false)]
        public string Withdrawal
        {
            get{ return _Withdrawal;}
            set
            {
                _Withdrawal = value;
                _flagWithdrawal = true;
            }
        }
        private string _Withdrawal;
        private bool _flagWithdrawal;

        /// <summary>
        /// Returns false as Withdrawal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithdrawal()
        {
            return _flagWithdrawal;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayoutsPayoutIdGet200ResponseLinks {\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  Withdrawal: ").Append(Withdrawal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutsPayoutIdGet200ResponseLinks);
        }

        /// <summary>
        /// Returns true if PayoutsPayoutIdGet200ResponseLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutsPayoutIdGet200ResponseLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutsPayoutIdGet200ResponseLinks input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.Withdrawal == input.Withdrawal ||
                    (this.Withdrawal != null &&
                    this.Withdrawal.Equals(input.Withdrawal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                if (this.Transaction != null)
                {
                    hashCode = (hashCode * 59) + this.Transaction.GetHashCode();
                }
                if (this.Withdrawal != null)
                {
                    hashCode = (hashCode * 59) + this.Withdrawal.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
