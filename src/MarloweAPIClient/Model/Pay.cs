/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A payment will be sent from an account to a payee.
    /// </summary>
    [DataContract(Name = "Pay")]
    public partial class Pay : IEquatable<Pay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pay" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Pay() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pay" /> class.
        /// </summary>
        /// <param name="fromAccount">fromAccount (required).</param>
        /// <param name="varPay">varPay (required).</param>
        /// <param name="then">then (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="token">token (required).</param>
        public Pay(Party fromAccount = default(Party), Value varPay = default(Value), Contract then = default(Contract), Payee to = default(Payee), Token token = default(Token))
        {
            // to ensure "fromAccount" is required (not null)
            if (fromAccount == null)
            {
                throw new ArgumentNullException("fromAccount is a required property for Pay and cannot be null");
            }
            this.FromAccount = fromAccount;
            // to ensure "varPay" is required (not null)
            if (varPay == null)
            {
                throw new ArgumentNullException("varPay is a required property for Pay and cannot be null");
            }
            this.VarPay = varPay;
            // to ensure "then" is required (not null)
            if (then == null)
            {
                throw new ArgumentNullException("then is a required property for Pay and cannot be null");
            }
            this.Then = then;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for Pay and cannot be null");
            }
            this.To = to;
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new ArgumentNullException("token is a required property for Pay and cannot be null");
            }
            this.Token = token;
        }

        /// <summary>
        /// Gets or Sets FromAccount
        /// </summary>
        [DataMember(Name = "from_account", IsRequired = true, EmitDefaultValue = true)]
        public Party FromAccount { get; set; }

        /// <summary>
        /// Gets or Sets VarPay
        /// </summary>
        [DataMember(Name = "pay", IsRequired = true, EmitDefaultValue = true)]
        public Value VarPay { get; set; }

        /// <summary>
        /// Gets or Sets Then
        /// </summary>
        [DataMember(Name = "then", IsRequired = true, EmitDefaultValue = true)]
        public Contract Then { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public Payee To { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = true)]
        public Token Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Pay {\n");
            sb.Append("  FromAccount: ").Append(FromAccount).Append("\n");
            sb.Append("  VarPay: ").Append(VarPay).Append("\n");
            sb.Append("  Then: ").Append(Then).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pay);
        }

        /// <summary>
        /// Returns true if Pay instances are equal
        /// </summary>
        /// <param name="input">Instance of Pay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pay input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FromAccount == input.FromAccount ||
                    (this.FromAccount != null &&
                    this.FromAccount.Equals(input.FromAccount))
                ) && 
                (
                    this.VarPay == input.VarPay ||
                    (this.VarPay != null &&
                    this.VarPay.Equals(input.VarPay))
                ) && 
                (
                    this.Then == input.Then ||
                    (this.Then != null &&
                    this.Then.Equals(input.Then))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromAccount != null)
                {
                    hashCode = (hashCode * 59) + this.FromAccount.GetHashCode();
                }
                if (this.VarPay != null)
                {
                    hashCode = (hashCode * 59) + this.VarPay.GetHashCode();
                }
                if (this.Then != null)
                {
                    hashCode = (hashCode * 59) + this.Then.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
