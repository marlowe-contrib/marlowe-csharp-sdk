/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Contract terms specified in Marlowe
    /// </summary>
    [JsonConverter(typeof(ContractObjectJsonConverter))]
    [DataContract(Name = "ContractObject")]
    public partial class ContractObject : AbstractOpenAPISchema, IEquatable<ContractObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractObject" /> class
        /// with the <see cref="string" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of string.</param>
        public ContractObject(string actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractObject" /> class
        /// with the <see cref="ContractObjectOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ContractObjectOneOf.</param>
        public ContractObject(ContractObjectOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractObject" /> class
        /// with the <see cref="ContractObjectOneOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ContractObjectOneOf1.</param>
        public ContractObject(ContractObjectOneOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractObject" /> class
        /// with the <see cref="ContractObjectOneOf2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ContractObjectOneOf2.</param>
        public ContractObject(ContractObjectOneOf2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractObject" /> class
        /// with the <see cref="ContractObjectOneOf3" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ContractObjectOneOf3.</param>
        public ContractObject(ContractObjectOneOf3 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractObject" /> class
        /// with the <see cref="ContractObjectOneOf4" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ContractObjectOneOf4.</param>
        public ContractObject(ContractObjectOneOf4 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractObject" /> class
        /// with the <see cref="ActionObjectOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ActionObjectOneOf.</param>
        public ContractObject(ActionObjectOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ActionObjectOneOf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ContractObjectOneOf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ContractObjectOneOf1))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ContractObjectOneOf2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ContractObjectOneOf3))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ContractObjectOneOf4))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(string))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ActionObjectOneOf, ContractObjectOneOf, ContractObjectOneOf1, ContractObjectOneOf2, ContractObjectOneOf3, ContractObjectOneOf4, string");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `string`. If the actual instance is not `string`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of string</returns>
        public string GetString()
        {
            return (string)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ContractObjectOneOf`. If the actual instance is not `ContractObjectOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ContractObjectOneOf</returns>
        public ContractObjectOneOf GetContractObjectOneOf()
        {
            return (ContractObjectOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ContractObjectOneOf1`. If the actual instance is not `ContractObjectOneOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ContractObjectOneOf1</returns>
        public ContractObjectOneOf1 GetContractObjectOneOf1()
        {
            return (ContractObjectOneOf1)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ContractObjectOneOf2`. If the actual instance is not `ContractObjectOneOf2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ContractObjectOneOf2</returns>
        public ContractObjectOneOf2 GetContractObjectOneOf2()
        {
            return (ContractObjectOneOf2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ContractObjectOneOf3`. If the actual instance is not `ContractObjectOneOf3`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ContractObjectOneOf3</returns>
        public ContractObjectOneOf3 GetContractObjectOneOf3()
        {
            return (ContractObjectOneOf3)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ContractObjectOneOf4`. If the actual instance is not `ContractObjectOneOf4`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ContractObjectOneOf4</returns>
        public ContractObjectOneOf4 GetContractObjectOneOf4()
        {
            return (ContractObjectOneOf4)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ActionObjectOneOf`. If the actual instance is not `ActionObjectOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ActionObjectOneOf</returns>
        public ActionObjectOneOf GetActionObjectOneOf()
        {
            return (ActionObjectOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractObject {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ContractObject.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ContractObject
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ContractObject</returns>
        public static ContractObject FromJson(string jsonString)
        {
            ContractObject newContractObject = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newContractObject;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ActionObjectOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ActionObjectOneOf>(jsonString, ContractObject.SerializerSettings));
                }
                else
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ActionObjectOneOf>(jsonString, ContractObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ActionObjectOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ActionObjectOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ContractObjectOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf>(jsonString, ContractObject.SerializerSettings));
                }
                else
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf>(jsonString, ContractObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ContractObjectOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ContractObjectOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ContractObjectOneOf1).GetProperty("AdditionalProperties") == null)
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf1>(jsonString, ContractObject.SerializerSettings));
                }
                else
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf1>(jsonString, ContractObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ContractObjectOneOf1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ContractObjectOneOf1: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ContractObjectOneOf2).GetProperty("AdditionalProperties") == null)
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf2>(jsonString, ContractObject.SerializerSettings));
                }
                else
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf2>(jsonString, ContractObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ContractObjectOneOf2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ContractObjectOneOf2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ContractObjectOneOf3).GetProperty("AdditionalProperties") == null)
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf3>(jsonString, ContractObject.SerializerSettings));
                }
                else
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf3>(jsonString, ContractObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ContractObjectOneOf3");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ContractObjectOneOf3: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ContractObjectOneOf4).GetProperty("AdditionalProperties") == null)
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf4>(jsonString, ContractObject.SerializerSettings));
                }
                else
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<ContractObjectOneOf4>(jsonString, ContractObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ContractObjectOneOf4");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ContractObjectOneOf4: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(string).GetProperty("AdditionalProperties") == null)
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<string>(jsonString, ContractObject.SerializerSettings));
                }
                else
                {
                    newContractObject = new ContractObject(JsonConvert.DeserializeObject<string>(jsonString, ContractObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("string");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into string: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newContractObject;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractObject);
        }

        /// <summary>
        /// Returns true if ContractObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractObject input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ContractObject
    /// </summary>
    public class ContractObjectJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ContractObject).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ContractObject.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
