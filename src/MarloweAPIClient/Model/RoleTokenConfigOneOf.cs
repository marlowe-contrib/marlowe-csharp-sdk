/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// RoleTokenConfigOneOf
    /// </summary>
    [DataContract(Name = "RoleTokenConfig_oneOf")]
    public partial class RoleTokenConfigOneOf : IEquatable<RoleTokenConfigOneOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleTokenConfigOneOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RoleTokenConfigOneOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleTokenConfigOneOf" /> class.
        /// </summary>
        /// <param name="address">A cardano address (required).</param>
        /// <param name="metadata">metadata (required).</param>
        public RoleTokenConfigOneOf(string address = default(string), TokenMetadata metadata = default(TokenMetadata))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for RoleTokenConfigOneOf and cannot be null");
            }
            this._Address = address;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for RoleTokenConfigOneOf and cannot be null");
            }
            this._Metadata = metadata;
        }

        /// <summary>
        /// A cardano address
        /// </summary>
        /// <value>A cardano address</value>
        /// <example>addr1w94f8ywk4fg672xasahtk4t9k6w3aql943uxz5rt62d4dvq8evxaf</example>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address
        {
            get{ return _Address;}
            set
            {
                _Address = value;
                _flagAddress = true;
            }
        }
        private string _Address;
        private bool _flagAddress;

        /// <summary>
        /// Returns false as Address should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddress()
        {
            return _flagAddress;
        }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public TokenMetadata Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private TokenMetadata _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoleTokenConfigOneOf {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoleTokenConfigOneOf);
        }

        /// <summary>
        /// Returns true if RoleTokenConfigOneOf instances are equal
        /// </summary>
        /// <param name="input">Instance of RoleTokenConfigOneOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoleTokenConfigOneOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
