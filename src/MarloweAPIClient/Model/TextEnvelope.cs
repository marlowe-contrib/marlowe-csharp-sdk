/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// TextEnvelope
    /// </summary>
    [DataContract(Name = "TextEnvelope")]
    public partial class TextEnvelope : IEquatable<TextEnvelope>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextEnvelope" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextEnvelope() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextEnvelope" /> class.
        /// </summary>
        /// <param name="cborHex">cborHex (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="type">What type of data is encoded in the CBOR Hex. Valid values include \&quot;Tx &lt;era&gt;\&quot;, \&quot;TxBody &lt;era&gt;\&quot;, and \&quot;ShelleyTxWitness &lt;era&gt;\&quot; where &lt;era&gt; is one of \&quot;BabbageEra\&quot;, \&quot;ConwayEra\&quot;. (required).</param>
        public TextEnvelope(string cborHex = default(string), string description = default(string), string type = default(string))
        {
            // to ensure "cborHex" is required (not null)
            if (cborHex == null)
            {
                throw new ArgumentNullException("cborHex is a required property for TextEnvelope and cannot be null");
            }
            this._CborHex = cborHex;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TextEnvelope and cannot be null");
            }
            this._Description = description;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for TextEnvelope and cannot be null");
            }
            this._Type = type;
        }

        /// <summary>
        /// Gets or Sets CborHex
        /// </summary>
        [DataMember(Name = "cborHex", IsRequired = true, EmitDefaultValue = true)]
        public string CborHex
        {
            get{ return _CborHex;}
            set
            {
                _CborHex = value;
                _flagCborHex = true;
            }
        }
        private string _CborHex;
        private bool _flagCborHex;

        /// <summary>
        /// Returns false as CborHex should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCborHex()
        {
            return _flagCborHex;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// What type of data is encoded in the CBOR Hex. Valid values include \&quot;Tx &lt;era&gt;\&quot;, \&quot;TxBody &lt;era&gt;\&quot;, and \&quot;ShelleyTxWitness &lt;era&gt;\&quot; where &lt;era&gt; is one of \&quot;BabbageEra\&quot;, \&quot;ConwayEra\&quot;.
        /// </summary>
        /// <value>What type of data is encoded in the CBOR Hex. Valid values include \&quot;Tx &lt;era&gt;\&quot;, \&quot;TxBody &lt;era&gt;\&quot;, and \&quot;ShelleyTxWitness &lt;era&gt;\&quot; where &lt;era&gt; is one of \&quot;BabbageEra\&quot;, \&quot;ConwayEra\&quot;.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private string _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextEnvelope {\n");
            sb.Append("  CborHex: ").Append(CborHex).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextEnvelope);
        }

        /// <summary>
        /// Returns true if TextEnvelope instances are equal
        /// </summary>
        /// <param name="input">Instance of TextEnvelope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextEnvelope input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CborHex == input.CborHex ||
                    (this.CborHex != null &&
                    this.CborHex.Equals(input.CborHex))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CborHex != null)
                {
                    hashCode = (hashCode * 59) + this.CborHex.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
