/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// PostContractSourceResponse
    /// </summary>
    [DataContract(Name = "PostContractSourceResponse")]
    public partial class PostContractSourceResponse : IEquatable<PostContractSourceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostContractSourceResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostContractSourceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostContractSourceResponse" /> class.
        /// </summary>
        /// <param name="contractSourceId">The hex-encoded identifier of a Marlowe contract source (required).</param>
        /// <param name="intermediateIds">intermediateIds (required).</param>
        public PostContractSourceResponse(string contractSourceId = default(string), Dictionary<string, string> intermediateIds = default(Dictionary<string, string>))
        {
            // to ensure "contractSourceId" is required (not null)
            if (contractSourceId == null)
            {
                throw new ArgumentNullException("contractSourceId is a required property for PostContractSourceResponse and cannot be null");
            }
            this._ContractSourceId = contractSourceId;
            // to ensure "intermediateIds" is required (not null)
            if (intermediateIds == null)
            {
                throw new ArgumentNullException("intermediateIds is a required property for PostContractSourceResponse and cannot be null");
            }
            this._IntermediateIds = intermediateIds;
        }

        /// <summary>
        /// The hex-encoded identifier of a Marlowe contract source
        /// </summary>
        /// <value>The hex-encoded identifier of a Marlowe contract source</value>
        [DataMember(Name = "contractSourceId", IsRequired = true, EmitDefaultValue = true)]
        public string ContractSourceId
        {
            get{ return _ContractSourceId;}
            set
            {
                _ContractSourceId = value;
                _flagContractSourceId = true;
            }
        }
        private string _ContractSourceId;
        private bool _flagContractSourceId;

        /// <summary>
        /// Returns false as ContractSourceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContractSourceId()
        {
            return _flagContractSourceId;
        }
        /// <summary>
        /// Gets or Sets IntermediateIds
        /// </summary>
        [DataMember(Name = "intermediateIds", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> IntermediateIds
        {
            get{ return _IntermediateIds;}
            set
            {
                _IntermediateIds = value;
                _flagIntermediateIds = true;
            }
        }
        private Dictionary<string, string> _IntermediateIds;
        private bool _flagIntermediateIds;

        /// <summary>
        /// Returns false as IntermediateIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntermediateIds()
        {
            return _flagIntermediateIds;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostContractSourceResponse {\n");
            sb.Append("  ContractSourceId: ").Append(ContractSourceId).Append("\n");
            sb.Append("  IntermediateIds: ").Append(IntermediateIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostContractSourceResponse);
        }

        /// <summary>
        /// Returns true if PostContractSourceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PostContractSourceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostContractSourceResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractSourceId == input.ContractSourceId ||
                    (this.ContractSourceId != null &&
                    this.ContractSourceId.Equals(input.ContractSourceId))
                ) && 
                (
                    this.IntermediateIds == input.IntermediateIds ||
                    this.IntermediateIds != null &&
                    input.IntermediateIds != null &&
                    this.IntermediateIds.SequenceEqual(input.IntermediateIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractSourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ContractSourceId.GetHashCode();
                }
                if (this.IntermediateIds != null)
                {
                    hashCode = (hashCode * 59) + this.IntermediateIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.ContractSourceId != null) {
                // ContractSourceId (string) pattern
                Regex regexContractSourceId = new Regex(@"^[a-fA-F0-9]{64}$", RegexOptions.CultureInvariant);
                if (!regexContractSourceId.Match(this.ContractSourceId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContractSourceId, must match a pattern of " + regexContractSourceId, new [] { "ContractSourceId" });
                }
            }

            yield break;
        }
    }

}
