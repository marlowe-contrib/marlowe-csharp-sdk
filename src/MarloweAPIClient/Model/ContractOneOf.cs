/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A payment will be sent from an account to a payee.
    /// </summary>
    [DataContract(Name = "Contract_oneOf")]
    public partial class ContractOneOf : IEquatable<ContractOneOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractOneOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContractOneOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractOneOf" /> class.
        /// </summary>
        /// <param name="fromAccount">fromAccount (required).</param>
        /// <param name="pay">pay (required).</param>
        /// <param name="then">then (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="token">token (required).</param>
        public ContractOneOf(Party fromAccount = default(Party), Value pay = default(Value), Contract then = default(Contract), Payee to = default(Payee), Token token = default(Token))
        {
            // to ensure "fromAccount" is required (not null)
            if (fromAccount == null)
            {
                throw new ArgumentNullException("fromAccount is a required property for ContractOneOf and cannot be null");
            }
            this._FromAccount = fromAccount;
            // to ensure "pay" is required (not null)
            if (pay == null)
            {
                throw new ArgumentNullException("pay is a required property for ContractOneOf and cannot be null");
            }
            this._Pay = pay;
            // to ensure "then" is required (not null)
            if (then == null)
            {
                throw new ArgumentNullException("then is a required property for ContractOneOf and cannot be null");
            }
            this._Then = then;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for ContractOneOf and cannot be null");
            }
            this._To = to;
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new ArgumentNullException("token is a required property for ContractOneOf and cannot be null");
            }
            this._Token = token;
        }

        /// <summary>
        /// Gets or Sets FromAccount
        /// </summary>
        [DataMember(Name = "from_account", IsRequired = true, EmitDefaultValue = true)]
        public Party FromAccount
        {
            get{ return _FromAccount;}
            set
            {
                _FromAccount = value;
                _flagFromAccount = true;
            }
        }
        private Party _FromAccount;
        private bool _flagFromAccount;

        /// <summary>
        /// Returns false as FromAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFromAccount()
        {
            return _flagFromAccount;
        }
        /// <summary>
        /// Gets or Sets Pay
        /// </summary>
        [DataMember(Name = "pay", IsRequired = true, EmitDefaultValue = true)]
        public Value Pay
        {
            get{ return _Pay;}
            set
            {
                _Pay = value;
                _flagPay = true;
            }
        }
        private Value _Pay;
        private bool _flagPay;

        /// <summary>
        /// Returns false as Pay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePay()
        {
            return _flagPay;
        }
        /// <summary>
        /// Gets or Sets Then
        /// </summary>
        [DataMember(Name = "then", IsRequired = true, EmitDefaultValue = true)]
        public Contract Then
        {
            get{ return _Then;}
            set
            {
                _Then = value;
                _flagThen = true;
            }
        }
        private Contract _Then;
        private bool _flagThen;

        /// <summary>
        /// Returns false as Then should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeThen()
        {
            return _flagThen;
        }
        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public Payee To
        {
            get{ return _To;}
            set
            {
                _To = value;
                _flagTo = true;
            }
        }
        private Payee _To;
        private bool _flagTo;

        /// <summary>
        /// Returns false as To should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTo()
        {
            return _flagTo;
        }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = true)]
        public Token Token
        {
            get{ return _Token;}
            set
            {
                _Token = value;
                _flagToken = true;
            }
        }
        private Token _Token;
        private bool _flagToken;

        /// <summary>
        /// Returns false as Token should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeToken()
        {
            return _flagToken;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractOneOf {\n");
            sb.Append("  FromAccount: ").Append(FromAccount).Append("\n");
            sb.Append("  Pay: ").Append(Pay).Append("\n");
            sb.Append("  Then: ").Append(Then).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractOneOf);
        }

        /// <summary>
        /// Returns true if ContractOneOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractOneOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractOneOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FromAccount == input.FromAccount ||
                    (this.FromAccount != null &&
                    this.FromAccount.Equals(input.FromAccount))
                ) && 
                (
                    this.Pay == input.Pay ||
                    (this.Pay != null &&
                    this.Pay.Equals(input.Pay))
                ) && 
                (
                    this.Then == input.Then ||
                    (this.Then != null &&
                    this.Then.Equals(input.Then))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromAccount != null)
                {
                    hashCode = (hashCode * 59) + this.FromAccount.GetHashCode();
                }
                if (this.Pay != null)
                {
                    hashCode = (hashCode * 59) + this.Pay.GetHashCode();
                }
                if (this.Then != null)
                {
                    hashCode = (hashCode * 59) + this.Then.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
