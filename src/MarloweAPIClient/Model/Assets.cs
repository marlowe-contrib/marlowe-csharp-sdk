/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Assets
    /// </summary>
    [DataContract(Name = "Assets")]
    public partial class Assets : IEquatable<Assets>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Assets" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Assets() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Assets" /> class.
        /// </summary>
        /// <param name="lovelace">lovelace (required).</param>
        /// <param name="tokens">tokens (required).</param>
        public Assets(int lovelace = default(int), Dictionary<string, Dictionary<string, int>> tokens = default(Dictionary<string, Dictionary<string, int>>))
        {
            this._Lovelace = lovelace;
            // to ensure "tokens" is required (not null)
            if (tokens == null)
            {
                throw new ArgumentNullException("tokens is a required property for Assets and cannot be null");
            }
            this._Tokens = tokens;
        }

        /// <summary>
        /// Gets or Sets Lovelace
        /// </summary>
        [DataMember(Name = "lovelace", IsRequired = true, EmitDefaultValue = true)]
        public int Lovelace
        {
            get{ return _Lovelace;}
            set
            {
                _Lovelace = value;
                _flagLovelace = true;
            }
        }
        private int _Lovelace;
        private bool _flagLovelace;

        /// <summary>
        /// Returns false as Lovelace should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLovelace()
        {
            return _flagLovelace;
        }
        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>
        [DataMember(Name = "tokens", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Dictionary<string, int>> Tokens
        {
            get{ return _Tokens;}
            set
            {
                _Tokens = value;
                _flagTokens = true;
            }
        }
        private Dictionary<string, Dictionary<string, int>> _Tokens;
        private bool _flagTokens;

        /// <summary>
        /// Returns false as Tokens should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTokens()
        {
            return _flagTokens;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Assets {\n");
            sb.Append("  Lovelace: ").Append(Lovelace).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Assets);
        }

        /// <summary>
        /// Returns true if Assets instances are equal
        /// </summary>
        /// <param name="input">Instance of Assets to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Assets input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Lovelace == input.Lovelace ||
                    this.Lovelace.Equals(input.Lovelace)
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Lovelace.GetHashCode();
                if (this.Tokens != null)
                {
                    hashCode = (hashCode * 59) + this.Tokens.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
