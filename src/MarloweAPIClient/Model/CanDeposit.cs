/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Deposit Input that can be applied for a given contract
    /// </summary>
    [DataContract(Name = "CanDeposit")]
    public partial class CanDeposit : IEquatable<CanDeposit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CanDeposit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CanDeposit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CanDeposit" /> class.
        /// </summary>
        /// <param name="varCanDeposit">varCanDeposit (required).</param>
        /// <param name="caseIndex">Index of a \&quot;Case Action\&quot; in a \&quot;When\&quot; (required).</param>
        /// <param name="intoAccount">intoAccount (required).</param>
        /// <param name="isMerkleizedContinuation">Indicates if a given contract continuation is merkleized (required).</param>
        /// <param name="ofToken">ofToken (required).</param>
        /// <param name="party">party (required).</param>
        public CanDeposit(int varCanDeposit = default(int), int caseIndex = default(int), Party intoAccount = default(Party), bool isMerkleizedContinuation = default(bool), Token ofToken = default(Token), Party party = default(Party))
        {
            this._VarCanDeposit = varCanDeposit;
            this._CaseIndex = caseIndex;
            // to ensure "intoAccount" is required (not null)
            if (intoAccount == null)
            {
                throw new ArgumentNullException("intoAccount is a required property for CanDeposit and cannot be null");
            }
            this._IntoAccount = intoAccount;
            this._IsMerkleizedContinuation = isMerkleizedContinuation;
            // to ensure "ofToken" is required (not null)
            if (ofToken == null)
            {
                throw new ArgumentNullException("ofToken is a required property for CanDeposit and cannot be null");
            }
            this._OfToken = ofToken;
            // to ensure "party" is required (not null)
            if (party == null)
            {
                throw new ArgumentNullException("party is a required property for CanDeposit and cannot be null");
            }
            this._Party = party;
        }

        /// <summary>
        /// Gets or Sets VarCanDeposit
        /// </summary>
        [DataMember(Name = "can_deposit", IsRequired = true, EmitDefaultValue = true)]
        public int VarCanDeposit
        {
            get{ return _VarCanDeposit;}
            set
            {
                _VarCanDeposit = value;
                _flagVarCanDeposit = true;
            }
        }
        private int _VarCanDeposit;
        private bool _flagVarCanDeposit;

        /// <summary>
        /// Returns false as VarCanDeposit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarCanDeposit()
        {
            return _flagVarCanDeposit;
        }
        /// <summary>
        /// Index of a \&quot;Case Action\&quot; in a \&quot;When\&quot;
        /// </summary>
        /// <value>Index of a \&quot;Case Action\&quot; in a \&quot;When\&quot;</value>
        [DataMember(Name = "case_index", IsRequired = true, EmitDefaultValue = true)]
        public int CaseIndex
        {
            get{ return _CaseIndex;}
            set
            {
                _CaseIndex = value;
                _flagCaseIndex = true;
            }
        }
        private int _CaseIndex;
        private bool _flagCaseIndex;

        /// <summary>
        /// Returns false as CaseIndex should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCaseIndex()
        {
            return _flagCaseIndex;
        }
        /// <summary>
        /// Gets or Sets IntoAccount
        /// </summary>
        [DataMember(Name = "into_account", IsRequired = true, EmitDefaultValue = true)]
        public Party IntoAccount
        {
            get{ return _IntoAccount;}
            set
            {
                _IntoAccount = value;
                _flagIntoAccount = true;
            }
        }
        private Party _IntoAccount;
        private bool _flagIntoAccount;

        /// <summary>
        /// Returns false as IntoAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntoAccount()
        {
            return _flagIntoAccount;
        }
        /// <summary>
        /// Indicates if a given contract continuation is merkleized
        /// </summary>
        /// <value>Indicates if a given contract continuation is merkleized</value>
        [DataMember(Name = "is_merkleized_continuation", IsRequired = true, EmitDefaultValue = true)]
        public bool IsMerkleizedContinuation
        {
            get{ return _IsMerkleizedContinuation;}
            set
            {
                _IsMerkleizedContinuation = value;
                _flagIsMerkleizedContinuation = true;
            }
        }
        private bool _IsMerkleizedContinuation;
        private bool _flagIsMerkleizedContinuation;

        /// <summary>
        /// Returns false as IsMerkleizedContinuation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMerkleizedContinuation()
        {
            return _flagIsMerkleizedContinuation;
        }
        /// <summary>
        /// Gets or Sets OfToken
        /// </summary>
        [DataMember(Name = "of_token", IsRequired = true, EmitDefaultValue = true)]
        public Token OfToken
        {
            get{ return _OfToken;}
            set
            {
                _OfToken = value;
                _flagOfToken = true;
            }
        }
        private Token _OfToken;
        private bool _flagOfToken;

        /// <summary>
        /// Returns false as OfToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOfToken()
        {
            return _flagOfToken;
        }
        /// <summary>
        /// Gets or Sets Party
        /// </summary>
        [DataMember(Name = "party", IsRequired = true, EmitDefaultValue = true)]
        public Party Party
        {
            get{ return _Party;}
            set
            {
                _Party = value;
                _flagParty = true;
            }
        }
        private Party _Party;
        private bool _flagParty;

        /// <summary>
        /// Returns false as Party should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParty()
        {
            return _flagParty;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CanDeposit {\n");
            sb.Append("  VarCanDeposit: ").Append(VarCanDeposit).Append("\n");
            sb.Append("  CaseIndex: ").Append(CaseIndex).Append("\n");
            sb.Append("  IntoAccount: ").Append(IntoAccount).Append("\n");
            sb.Append("  IsMerkleizedContinuation: ").Append(IsMerkleizedContinuation).Append("\n");
            sb.Append("  OfToken: ").Append(OfToken).Append("\n");
            sb.Append("  Party: ").Append(Party).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CanDeposit);
        }

        /// <summary>
        /// Returns true if CanDeposit instances are equal
        /// </summary>
        /// <param name="input">Instance of CanDeposit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CanDeposit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarCanDeposit == input.VarCanDeposit ||
                    this.VarCanDeposit.Equals(input.VarCanDeposit)
                ) && 
                (
                    this.CaseIndex == input.CaseIndex ||
                    this.CaseIndex.Equals(input.CaseIndex)
                ) && 
                (
                    this.IntoAccount == input.IntoAccount ||
                    (this.IntoAccount != null &&
                    this.IntoAccount.Equals(input.IntoAccount))
                ) && 
                (
                    this.IsMerkleizedContinuation == input.IsMerkleizedContinuation ||
                    this.IsMerkleizedContinuation.Equals(input.IsMerkleizedContinuation)
                ) && 
                (
                    this.OfToken == input.OfToken ||
                    (this.OfToken != null &&
                    this.OfToken.Equals(input.OfToken))
                ) && 
                (
                    this.Party == input.Party ||
                    (this.Party != null &&
                    this.Party.Equals(input.Party))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarCanDeposit.GetHashCode();
                hashCode = (hashCode * 59) + this.CaseIndex.GetHashCode();
                if (this.IntoAccount != null)
                {
                    hashCode = (hashCode * 59) + this.IntoAccount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMerkleizedContinuation.GetHashCode();
                if (this.OfToken != null)
                {
                    hashCode = (hashCode * 59) + this.OfToken.GetHashCode();
                }
                if (this.Party != null)
                {
                    hashCode = (hashCode * 59) + this.Party.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
