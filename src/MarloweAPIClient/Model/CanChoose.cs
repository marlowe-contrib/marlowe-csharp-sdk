/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Choice Inputs that can be applied for a given contract
    /// </summary>
    [DataContract(Name = "CanChoose")]
    public partial class CanChoose : IEquatable<CanChoose>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CanChoose" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CanChoose() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CanChoose" /> class.
        /// </summary>
        /// <param name="canChooseBetween">canChooseBetween (required).</param>
        /// <param name="caseIndex">Index of a \&quot;Case Action\&quot; in a \&quot;When\&quot; (required).</param>
        /// <param name="forChoice">forChoice (required).</param>
        /// <param name="isMerkleizedContinuation">Indicates if a given contract continuation is merkleized (required).</param>
        public CanChoose(List<Bound> canChooseBetween = default(List<Bound>), int caseIndex = default(int), ChoiceId forChoice = default(ChoiceId), bool isMerkleizedContinuation = default(bool))
        {
            // to ensure "canChooseBetween" is required (not null)
            if (canChooseBetween == null)
            {
                throw new ArgumentNullException("canChooseBetween is a required property for CanChoose and cannot be null");
            }
            this._CanChooseBetween = canChooseBetween;
            this._CaseIndex = caseIndex;
            // to ensure "forChoice" is required (not null)
            if (forChoice == null)
            {
                throw new ArgumentNullException("forChoice is a required property for CanChoose and cannot be null");
            }
            this._ForChoice = forChoice;
            this._IsMerkleizedContinuation = isMerkleizedContinuation;
        }

        /// <summary>
        /// Gets or Sets CanChooseBetween
        /// </summary>
        [DataMember(Name = "can_choose_between", IsRequired = true, EmitDefaultValue = true)]
        public List<Bound> CanChooseBetween
        {
            get{ return _CanChooseBetween;}
            set
            {
                _CanChooseBetween = value;
                _flagCanChooseBetween = true;
            }
        }
        private List<Bound> _CanChooseBetween;
        private bool _flagCanChooseBetween;

        /// <summary>
        /// Returns false as CanChooseBetween should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCanChooseBetween()
        {
            return _flagCanChooseBetween;
        }
        /// <summary>
        /// Index of a \&quot;Case Action\&quot; in a \&quot;When\&quot;
        /// </summary>
        /// <value>Index of a \&quot;Case Action\&quot; in a \&quot;When\&quot;</value>
        [DataMember(Name = "case_index", IsRequired = true, EmitDefaultValue = true)]
        public int CaseIndex
        {
            get{ return _CaseIndex;}
            set
            {
                _CaseIndex = value;
                _flagCaseIndex = true;
            }
        }
        private int _CaseIndex;
        private bool _flagCaseIndex;

        /// <summary>
        /// Returns false as CaseIndex should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCaseIndex()
        {
            return _flagCaseIndex;
        }
        /// <summary>
        /// Gets or Sets ForChoice
        /// </summary>
        [DataMember(Name = "for_choice", IsRequired = true, EmitDefaultValue = true)]
        public ChoiceId ForChoice
        {
            get{ return _ForChoice;}
            set
            {
                _ForChoice = value;
                _flagForChoice = true;
            }
        }
        private ChoiceId _ForChoice;
        private bool _flagForChoice;

        /// <summary>
        /// Returns false as ForChoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeForChoice()
        {
            return _flagForChoice;
        }
        /// <summary>
        /// Indicates if a given contract continuation is merkleized
        /// </summary>
        /// <value>Indicates if a given contract continuation is merkleized</value>
        [DataMember(Name = "is_merkleized_continuation", IsRequired = true, EmitDefaultValue = true)]
        public bool IsMerkleizedContinuation
        {
            get{ return _IsMerkleizedContinuation;}
            set
            {
                _IsMerkleizedContinuation = value;
                _flagIsMerkleizedContinuation = true;
            }
        }
        private bool _IsMerkleizedContinuation;
        private bool _flagIsMerkleizedContinuation;

        /// <summary>
        /// Returns false as IsMerkleizedContinuation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMerkleizedContinuation()
        {
            return _flagIsMerkleizedContinuation;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CanChoose {\n");
            sb.Append("  CanChooseBetween: ").Append(CanChooseBetween).Append("\n");
            sb.Append("  CaseIndex: ").Append(CaseIndex).Append("\n");
            sb.Append("  ForChoice: ").Append(ForChoice).Append("\n");
            sb.Append("  IsMerkleizedContinuation: ").Append(IsMerkleizedContinuation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CanChoose);
        }

        /// <summary>
        /// Returns true if CanChoose instances are equal
        /// </summary>
        /// <param name="input">Instance of CanChoose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CanChoose input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CanChooseBetween == input.CanChooseBetween ||
                    this.CanChooseBetween != null &&
                    input.CanChooseBetween != null &&
                    this.CanChooseBetween.SequenceEqual(input.CanChooseBetween)
                ) && 
                (
                    this.CaseIndex == input.CaseIndex ||
                    this.CaseIndex.Equals(input.CaseIndex)
                ) && 
                (
                    this.ForChoice == input.ForChoice ||
                    (this.ForChoice != null &&
                    this.ForChoice.Equals(input.ForChoice))
                ) && 
                (
                    this.IsMerkleizedContinuation == input.IsMerkleizedContinuation ||
                    this.IsMerkleizedContinuation.Equals(input.IsMerkleizedContinuation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanChooseBetween != null)
                {
                    hashCode = (hashCode * 59) + this.CanChooseBetween.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CaseIndex.GetHashCode();
                if (this.ForChoice != null)
                {
                    hashCode = (hashCode * 59) + this.ForChoice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMerkleizedContinuation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
