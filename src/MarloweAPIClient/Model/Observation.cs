/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A time-varying expression that evaluates to an integer
    /// </summary>
    [JsonConverter(typeof(ObservationJsonConverter))]
    [DataContract(Name = "Observation")]
    public partial class Observation : AbstractOpenAPISchema, IEquatable<Observation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="bool" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of bool.</param>
        public Observation(bool actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf.</param>
        public Observation(ObservationOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf1.</param>
        public Observation(ObservationOneOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf2.</param>
        public Observation(ObservationOneOf2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf3" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf3.</param>
        public Observation(ObservationOneOf3 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf4" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf4.</param>
        public Observation(ObservationOneOf4 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf5" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf5.</param>
        public Observation(ObservationOneOf5 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf6" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf6.</param>
        public Observation(ObservationOneOf6 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf7" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf7.</param>
        public Observation(ObservationOneOf7 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ObservationOneOf8" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ObservationOneOf8.</param>
        public Observation(ObservationOneOf8 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ObservationOneOf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationOneOf1))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationOneOf2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationOneOf3))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationOneOf4))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationOneOf5))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationOneOf6))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationOneOf7))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ObservationOneOf8))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(bool))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ObservationOneOf, ObservationOneOf1, ObservationOneOf2, ObservationOneOf3, ObservationOneOf4, ObservationOneOf5, ObservationOneOf6, ObservationOneOf7, ObservationOneOf8, bool");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `bool`. If the actual instance is not `bool`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of bool</returns>
        public bool GetBool()
        {
            return (bool)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf`. If the actual instance is not `ObservationOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf</returns>
        public ObservationOneOf GetObservationOneOf()
        {
            return (ObservationOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf1`. If the actual instance is not `ObservationOneOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf1</returns>
        public ObservationOneOf1 GetObservationOneOf1()
        {
            return (ObservationOneOf1)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf2`. If the actual instance is not `ObservationOneOf2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf2</returns>
        public ObservationOneOf2 GetObservationOneOf2()
        {
            return (ObservationOneOf2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf3`. If the actual instance is not `ObservationOneOf3`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf3</returns>
        public ObservationOneOf3 GetObservationOneOf3()
        {
            return (ObservationOneOf3)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf4`. If the actual instance is not `ObservationOneOf4`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf4</returns>
        public ObservationOneOf4 GetObservationOneOf4()
        {
            return (ObservationOneOf4)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf5`. If the actual instance is not `ObservationOneOf5`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf5</returns>
        public ObservationOneOf5 GetObservationOneOf5()
        {
            return (ObservationOneOf5)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf6`. If the actual instance is not `ObservationOneOf6`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf6</returns>
        public ObservationOneOf6 GetObservationOneOf6()
        {
            return (ObservationOneOf6)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf7`. If the actual instance is not `ObservationOneOf7`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf7</returns>
        public ObservationOneOf7 GetObservationOneOf7()
        {
            return (ObservationOneOf7)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ObservationOneOf8`. If the actual instance is not `ObservationOneOf8`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ObservationOneOf8</returns>
        public ObservationOneOf8 GetObservationOneOf8()
        {
            return (ObservationOneOf8)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Observation {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, Observation.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of Observation
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of Observation</returns>
        public static Observation FromJson(string jsonString)
        {
            Observation newObservation = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newObservation;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf1).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf1>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf1>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf1: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf2).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf2>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf2>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf3).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf3>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf3>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf3");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf3: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf4).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf4>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf4>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf4");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf4: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf5).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf5>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf5>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf5");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf5: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf6).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf6>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf6>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf6");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf6: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf7).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf7>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf7>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf7");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf7: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ObservationOneOf8).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf8>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ObservationOneOf8>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ObservationOneOf8");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ObservationOneOf8: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(bool).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<bool>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<bool>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("bool");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into bool: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newObservation;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Observation);
        }

        /// <summary>
        /// Returns true if Observation instances are equal
        /// </summary>
        /// <param name="input">Instance of Observation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Observation input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for Observation
    /// </summary>
    public class ObservationJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(Observation).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return Observation.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
