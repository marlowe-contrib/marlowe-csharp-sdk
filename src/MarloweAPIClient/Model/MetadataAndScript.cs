/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// MetadataAndScript
    /// </summary>
    [DataContract(Name = "MetadataAndScript")]
    public partial class MetadataAndScript : IEquatable<MetadataAndScript>, IValidatableObject
    {
        /// <summary>
        /// The type of script receiving the role token.
        /// </summary>
        /// <value>The type of script receiving the role token.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScriptEnum
        {
            /// <summary>
            /// Enum OpenRole for value: OpenRole
            /// </summary>
            [EnumMember(Value = "OpenRole")]
            OpenRole = 1
        }


        /// <summary>
        /// The type of script receiving the role token.
        /// </summary>
        /// <value>The type of script receiving the role token.</value>
        [DataMember(Name = "script", IsRequired = true, EmitDefaultValue = true)]
        public ScriptEnum Script { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataAndScript" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetadataAndScript() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataAndScript" /> class.
        /// </summary>
        /// <param name="metadata">metadata.</param>
        /// <param name="script">The type of script receiving the role token. (required).</param>
        public MetadataAndScript(TokenMetadata metadata = default(TokenMetadata), ScriptEnum script = default(ScriptEnum))
        {
            this.Script = script;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public TokenMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataAndScript {\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetadataAndScript);
        }

        /// <summary>
        /// Returns true if MetadataAndScript instances are equal
        /// </summary>
        /// <param name="input">Instance of MetadataAndScript to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetadataAndScript input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Script == input.Script ||
                    this.Script.Equals(input.Script)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Script.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
