/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A time-varying expression that evaluates to an integer
    /// </summary>
    [JsonConverter(typeof(ObservationJsonConverter))]
    [DataContract(Name = "Observation")]
    public partial class Observation : AbstractOpenAPISchema, IEquatable<Observation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="bool" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of bool.</param>
        public Observation(bool actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="And" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of And.</param>
        public Observation(And actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="Or" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Or.</param>
        public Observation(Or actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="Not" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Not.</param>
        public Observation(Not actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="ChooseFor" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ChooseFor.</param>
        public Observation(ChooseFor actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="GreaterOrEqual" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GreaterOrEqual.</param>
        public Observation(GreaterOrEqual actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="Greater" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Greater.</param>
        public Observation(Greater actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="Lesser" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Lesser.</param>
        public Observation(Lesser actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="LesserOrEqual" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LesserOrEqual.</param>
        public Observation(LesserOrEqual actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Observation" /> class
        /// with the <see cref="Equal" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Equal.</param>
        public Observation(Equal actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(And))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ChooseFor))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Equal))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Greater))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GreaterOrEqual))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Lesser))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LesserOrEqual))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Not))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Or))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(bool))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: And, ChooseFor, Equal, Greater, GreaterOrEqual, Lesser, LesserOrEqual, Not, Or, bool");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `bool`. If the actual instance is not `bool`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of bool</returns>
        public bool GetBool()
        {
            return (bool)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `And`. If the actual instance is not `And`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of And</returns>
        public And GetAnd()
        {
            return (And)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Or`. If the actual instance is not `Or`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Or</returns>
        public Or GetOr()
        {
            return (Or)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Not`. If the actual instance is not `Not`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Not</returns>
        public Not GetNot()
        {
            return (Not)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ChooseFor`. If the actual instance is not `ChooseFor`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ChooseFor</returns>
        public ChooseFor GetChooseFor()
        {
            return (ChooseFor)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GreaterOrEqual`. If the actual instance is not `GreaterOrEqual`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GreaterOrEqual</returns>
        public GreaterOrEqual GetGreaterOrEqual()
        {
            return (GreaterOrEqual)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Greater`. If the actual instance is not `Greater`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Greater</returns>
        public Greater GetGreater()
        {
            return (Greater)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Lesser`. If the actual instance is not `Lesser`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Lesser</returns>
        public Lesser GetLesser()
        {
            return (Lesser)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LesserOrEqual`. If the actual instance is not `LesserOrEqual`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LesserOrEqual</returns>
        public LesserOrEqual GetLesserOrEqual()
        {
            return (LesserOrEqual)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Equal`. If the actual instance is not `Equal`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Equal</returns>
        public Equal GetEqual()
        {
            return (Equal)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Observation {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, Observation.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of Observation
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of Observation</returns>
        public static Observation FromJson(string jsonString)
        {
            Observation newObservation = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newObservation;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(And).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<And>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<And>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("And");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into And: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ChooseFor).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ChooseFor>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<ChooseFor>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ChooseFor");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ChooseFor: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Equal).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Equal>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Equal>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Equal");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Equal: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Greater).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Greater>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Greater>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Greater");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Greater: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GreaterOrEqual).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<GreaterOrEqual>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<GreaterOrEqual>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GreaterOrEqual");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GreaterOrEqual: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Lesser).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Lesser>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Lesser>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Lesser");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Lesser: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LesserOrEqual).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<LesserOrEqual>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<LesserOrEqual>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LesserOrEqual");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LesserOrEqual: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Not).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Not>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Not>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Not");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Not: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Or).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Or>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<Or>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Or");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Or: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(bool).GetProperty("AdditionalProperties") == null)
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<bool>(jsonString, Observation.SerializerSettings));
                }
                else
                {
                    newObservation = new Observation(JsonConvert.DeserializeObject<bool>(jsonString, Observation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("bool");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into bool: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newObservation;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Observation);
        }

        /// <summary>
        /// Returns true if Observation instances are equal
        /// </summary>
        /// <param name="input">Instance of Observation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Observation input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for Observation
    /// </summary>
    public class ObservationJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(Observation).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return Observation.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
