/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Bind a value to a name within the scope of a sub-contract.
    /// </summary>
    [DataContract(Name = "Let")]
    public partial class Let : IEquatable<Let>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Let" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Let() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Let" /> class.
        /// </summary>
        /// <param name="be">be (required).</param>
        /// <param name="varLet">varLet (required).</param>
        /// <param name="then">then (required).</param>
        public Let(Value be = default(Value), string varLet = default(string), Contract then = default(Contract))
        {
            // to ensure "be" is required (not null)
            if (be == null)
            {
                throw new ArgumentNullException("be is a required property for Let and cannot be null");
            }
            this._Be = be;
            // to ensure "varLet" is required (not null)
            if (varLet == null)
            {
                throw new ArgumentNullException("varLet is a required property for Let and cannot be null");
            }
            this._VarLet = varLet;
            // to ensure "then" is required (not null)
            if (then == null)
            {
                throw new ArgumentNullException("then is a required property for Let and cannot be null");
            }
            this._Then = then;
        }

        /// <summary>
        /// Gets or Sets Be
        /// </summary>
        [DataMember(Name = "be", IsRequired = true, EmitDefaultValue = true)]
        public Value Be
        {
            get{ return _Be;}
            set
            {
                _Be = value;
                _flagBe = true;
            }
        }
        private Value _Be;
        private bool _flagBe;

        /// <summary>
        /// Returns false as Be should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBe()
        {
            return _flagBe;
        }
        /// <summary>
        /// Gets or Sets VarLet
        /// </summary>
        [DataMember(Name = "let", IsRequired = true, EmitDefaultValue = true)]
        public string VarLet
        {
            get{ return _VarLet;}
            set
            {
                _VarLet = value;
                _flagVarLet = true;
            }
        }
        private string _VarLet;
        private bool _flagVarLet;

        /// <summary>
        /// Returns false as VarLet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarLet()
        {
            return _flagVarLet;
        }
        /// <summary>
        /// Gets or Sets Then
        /// </summary>
        [DataMember(Name = "then", IsRequired = true, EmitDefaultValue = true)]
        public Contract Then
        {
            get{ return _Then;}
            set
            {
                _Then = value;
                _flagThen = true;
            }
        }
        private Contract _Then;
        private bool _flagThen;

        /// <summary>
        /// Returns false as Then should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeThen()
        {
            return _flagThen;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Let {\n");
            sb.Append("  Be: ").Append(Be).Append("\n");
            sb.Append("  VarLet: ").Append(VarLet).Append("\n");
            sb.Append("  Then: ").Append(Then).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Let);
        }

        /// <summary>
        /// Returns true if Let instances are equal
        /// </summary>
        /// <param name="input">Instance of Let to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Let input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Be == input.Be ||
                    (this.Be != null &&
                    this.Be.Equals(input.Be))
                ) && 
                (
                    this.VarLet == input.VarLet ||
                    (this.VarLet != null &&
                    this.VarLet.Equals(input.VarLet))
                ) && 
                (
                    this.Then == input.Then ||
                    (this.Then != null &&
                    this.Then.Equals(input.Then))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Be != null)
                {
                    hashCode = (hashCode * 59) + this.Be.GetHashCode();
                }
                if (this.VarLet != null)
                {
                    hashCode = (hashCode * 59) + this.VarLet.GetHashCode();
                }
                if (this.Then != null)
                {
                    hashCode = (hashCode * 59) + this.Then.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
