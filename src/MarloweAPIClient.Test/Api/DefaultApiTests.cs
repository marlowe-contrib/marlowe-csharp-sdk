/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Reflection;
using Xunit;
using System.Text;
using MarloweAPIClient.Client;
using MarloweAPIClient.Api;
using Newtonsoft.Json;
using System.Collections.Generic;


// uncomment below to import models
//using MarloweAPIClient.Model;

namespace MarloweAPIClient.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            Configuration config = new Configuration();
            config.BasePath = "";
            instance = new DefaultApi(config);
        }
        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test ApplyInputsToContract
        /// </summary>
        [Fact]
        public void ApplyInputsToContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //string xChangeAddress = null;
            //string? xAddress = null;
            //string? xCollateralUTxO = null;
            //PostTransactionsRequest? postTransactionsRequest = null;
            //var response = instance.ApplyInputsToContract(contractId, xChangeAddress, xAddress, xCollateralUTxO, postTransactionsRequest);
            //Assert.IsType<ApplyInputsResponse>(response);
        }

        /// <summary>
        /// Test CreateContract
        /// </summary>
        [Fact]
        public void CreateContractTest()
        {
            //string xChangeAddress = "addr_test1vzuqvqzcnuy9pmrh2sy7tjucufmpwh8gzssz7v6scn0e04gxdvna9";
            //string? xStakeAddress = null;
            //string? xAddress = null;
            //string? xCollateralUTxO = null;
            //MarloweAPIClient.Model.PostContractsRequestContract
            //    contract = new MarloweAPIClient.Model.PostContractsRequestContract(
            //            new MarloweAPIClient.Model.Contract(
            //                MarloweAPIClient.Model.Close.Close
            //           )
            //    );

            //var tags = new System.Collections.Generic.Dictionary<string, MarloweAPIClient.Model.Metadata>();
            //var metadata = new System.Collections.Generic.Dictionary<string, MarloweAPIClient.Model.Metadata>();
            //var minUTxODeposit = 3_000_000;
            //MarloweAPIClient.Model.PostContractsRequest postContractsRequest = new MarloweAPIClient.Model.PostContractsRequest(contract, metadata, minUTxODeposit, null, tags, null, MarloweAPIClient.Model.MarloweVersion.V1);
            //var response = instance.CreateContract(
            //    xChangeAddress,
            //    xStakeAddress,
            //    xAddress,
            //    xCollateralUTxO,
            //    postContractsRequest
            //);
            //Assert.IsType<MarloweAPIClient.Model.CreateContractResponse>(response);
        }

        /// <summary>
        /// Test CreateContractSources
        /// </summary>
        [Fact]
        public void CreateContractSourcesTest()
        {
            //    string main = "contract1";
            //    var label1 = "contract1";
            //    var label2 = "contract";
            //    var type1 = MarloweAPIClient.Model.LabelledObject.TypeEnum.Contract;
            //    var type2 = MarloweAPIClient.Model.LabelledObject.TypeEnum.Contract;
            //    var closeContract = new MarloweAPIClient.Model.LabelledObjectValue(
            //             new MarloweAPIClient.Model.ContractObject(
            //                 MarloweAPIClient.Model.CloseObject.Close
            //             )
            //    );
            //    var labelledObject1 = new MarloweAPIClient.Model.LabelledObject(label1, type1, closeContract);
            //    var labelledObject2 = new MarloweAPIClient.Model.LabelledObject(label2, type2, closeContract);
            //    var labelledObjects = new List<MarloweAPIClient.Model.LabelledObject>();
            //    labelledObjects.Add(labelledObject1);
            //    labelledObjects.Add(labelledObject2);
            //    var response = instance.CreateContractSources(main, labelledObjects);
            //    Assert.IsType<MarloweAPIClient.Model.PostContractSourceResponse>(response);
        }

        /// <summary>
        /// Test GetContractById
        /// </summary>
        [Fact]
        public void GetContractByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //var response = instance.GetContractById(contractId);
            //Assert.IsType<GetContractResponse>(response);
        }

        /// <summary>
        /// Test GetContractSourceAdjacency
        /// </summary>
        [Fact]
        public void GetContractSourceAdjacencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractSourceId = null;
            //var response = instance.GetContractSourceAdjacency(contractSourceId);
            //Assert.IsType<ContractSourceIds>(response);
        }

        /// <summary>
        /// Test GetContractSourceById
        /// </summary>
        [Fact]
        public void GetContractSourceByIdTest()
        {
            //var swapJSON = "{\"timeout\":1704288420000,\"timeout_continuation\":\"close\",\"when\":[{\"case\":{\"deposits\":3000000,\"into_account\":{\"role_token\":\"provider\"},\"of_token\":{\"currency_symbol\":\"\",\"token_name\":\"\"},\"party\":{\"role_token\":\"provider\"}},\"merkleized_then\":\"2d41ea20c87de8ef1d553c19c661afdcff141a09bc9c0febbc3913642e1e8208\"}]}";
            var closeJsonString = "\"close\"";

            //var swapJSON = "{\"currency_symbol\":\"\",\"token_name\":\"\"}";

            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            //var newContract = JsonConvert.DeserializeObject<MarloweAPIClient.Model.Close>(swapJSON);
            var closeDeser = JsonConvert.DeserializeObject<MarloweAPIClient.Model.Contract>(closeJsonString);

            //var contract = MarloweAPIClient.Model.Contract.FromJson(swapJSON);

            //var newContract = new Contract(JsonConvert.DeserializeObject<If>(jsonString, Contract.AdditionalPropertiesSerializerSettings));
            //}
            //jmatchedTypes.Add("If");
            //Console.WriteLine(JsonConvert.SerializeObject(newContract));
            //match++;

            //var swapJSON = "{\"role_token\":\"provider\"}";
            //Console.WriteLine(JsonConvert.DeserializeObject(swapJSON));
            //var contract = MarloweAPIClient.Model.Token.FromJson(swapJSON);
            //Console.WriteLine(JsonConvert.SerializeObject(contract));

            string contractSourceId = "705f33bb023b560f458a277c12130487f8dbca1b9e4dc50c4ed1596e00944996";
            bool? expand = false;
            var response = instance.GetContractSourceById(contractSourceId, expand);
            Assert.IsType<MarloweAPIClient.Model.Contract>(response);
        }

        /// <summary>
        /// Test GetContractSourceClosure
        /// </summary>
        [Fact]
        public void GetContractSourceClosureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractSourceId = null;
            //var response = instance.GetContractSourceClosure(contractSourceId);
            //Assert.IsType<ContractSourceIds>(response);
        }

        /// <summary>
        /// Test GetContractTransactionById
        /// </summary>
        [Fact]
        public void GetContractTransactionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //string transactionId = null;
            //var response = instance.GetContractTransactionById(contractId, transactionId);
            //Assert.IsType<GetTransactionResponse>(response);
        }

        /// <summary>
        /// Test GetContracts
        /// </summary>
        [Fact]
        public void GetContractsTest()
        {
            var response = instance.GetContractsWithHttpInfo();
            Assert.IsType<MarloweAPIClient.Client.ApiResponse<MarloweAPIClient.Model.GetContractsResponse>>(response);
        }

        /// <summary>
        /// Test GetNextStepsForContract
        /// </summary>
        [Fact]
        public void GetNextStepsForContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //string validityStart = null;
            //string validityEnd = null;
            //List<string>? party = null;
            //var response = instance.GetNextStepsForContract(contractId, validityStart, validityEnd, party);
            //Assert.IsType<Next>(response);
        }

        /// <summary>
        /// Test GetPayoutById
        /// </summary>
        [Fact]
        public void GetPayoutByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string payoutId = null;
            //var response = instance.GetPayoutById(payoutId);
            //Assert.IsType<GetPayoutResponse>(response);
        }

        /// <summary>
        /// Test GetPayouts
        /// </summary>
        [Fact]
        public void GetPayoutsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? contractId = null;
            //List<string>? roleToken = null;
            //string? status = null;
            //string? range = null;
            //var response = instance.GetPayouts(contractId, roleToken, status, range);
            //Assert.IsType<GetPayoutsResponse>(response);
        }

        /// <summary>
        /// Test GetTransactionsForContract
        /// </summary>
        [Fact]
        public void GetTransactionsForContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //string? range = null;
            //var response = instance.GetTransactionsForContract(contractId, range);
            //Assert.IsType<GetTransactionsResponse>(response);
        }

        /// <summary>
        /// Test GetWithdrawalById
        /// </summary>
        [Fact]
        public void GetWithdrawalByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string withdrawalId = null;
            //var response = instance.GetWithdrawalById(withdrawalId);
            //Assert.IsType<Withdrawal>(response);
        }

        /// <summary>
        /// Test GetWithdrawals
        /// </summary>
        [Fact]
        public void GetWithdrawalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? roleCurrency = null;
            //string? range = null;
            //var response = instance.GetWithdrawals(roleCurrency, range);
            //Assert.IsType<GetWithdrawalsResponse>(response);
        }

        /// <summary>
        /// Test Healthcheck
        /// </summary>
        [Fact]
        public void HealthcheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Healthcheck();
        }

        /// <summary>
        /// Test SubmitContract
        /// </summary>
        [Fact]
        public void SubmitContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //TextEnvelope? textEnvelope = null;
            //instance.SubmitContract(contractId, textEnvelope);
        }

        /// <summary>
        /// Test SubmitContractTransaction
        /// </summary>
        [Fact]
        public void SubmitContractTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //string transactionId = null;
            //TextEnvelope? textEnvelope = null;
            //instance.SubmitContractTransaction(contractId, transactionId, textEnvelope);
        }

        /// <summary>
        /// Test SubmitWithdrawal
        /// </summary>
        [Fact]
        public void SubmitWithdrawalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string withdrawalId = null;
            //TextEnvelope? textEnvelope = null;
            //instance.SubmitWithdrawal(withdrawalId, textEnvelope);
        }

        /// <summary>
        /// Test WithdrawPayouts
        /// </summary>
        [Fact]
        public void WithdrawPayoutsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xChangeAddress = null;
            //string? xAddress = null;
            //string? xCollateralUTxO = null;
            //PostWithdrawalsRequest? postWithdrawalsRequest = null;
            //var response = instance.WithdrawPayouts(xChangeAddress, xAddress, xCollateralUTxO, postWithdrawalsRequest);
            //Assert.IsType<WithdrawPayoutsResponse>(response);
        }
    }
}
