/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Deposit funds into an account in a contract and provide the continuation of the contract
    /// </summary>
    [DataContract(Name = "Input_oneOf_3")]
    public partial class InputOneOf3 : IEquatable<InputOneOf3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputOneOf3" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputOneOf3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputOneOf3" /> class.
        /// </summary>
        /// <param name="continuationHash">continuationHash (required).</param>
        /// <param name="inputFromParty">inputFromParty (required).</param>
        /// <param name="intoAccount">intoAccount (required).</param>
        /// <param name="merkleizedContinuation">merkleizedContinuation (required).</param>
        /// <param name="ofToken">ofToken (required).</param>
        /// <param name="thatDeposits">thatDeposits (required).</param>
        public InputOneOf3(string continuationHash = default(string), Party inputFromParty = default(Party), Party intoAccount = default(Party), Contract merkleizedContinuation = default(Contract), Token ofToken = default(Token), int thatDeposits = default(int))
        {
            // to ensure "continuationHash" is required (not null)
            if (continuationHash == null)
            {
                throw new ArgumentNullException("continuationHash is a required property for InputOneOf3 and cannot be null");
            }
            this._ContinuationHash = continuationHash;
            // to ensure "inputFromParty" is required (not null)
            if (inputFromParty == null)
            {
                throw new ArgumentNullException("inputFromParty is a required property for InputOneOf3 and cannot be null");
            }
            this._InputFromParty = inputFromParty;
            // to ensure "intoAccount" is required (not null)
            if (intoAccount == null)
            {
                throw new ArgumentNullException("intoAccount is a required property for InputOneOf3 and cannot be null");
            }
            this._IntoAccount = intoAccount;
            // to ensure "merkleizedContinuation" is required (not null)
            if (merkleizedContinuation == null)
            {
                throw new ArgumentNullException("merkleizedContinuation is a required property for InputOneOf3 and cannot be null");
            }
            this._MerkleizedContinuation = merkleizedContinuation;
            // to ensure "ofToken" is required (not null)
            if (ofToken == null)
            {
                throw new ArgumentNullException("ofToken is a required property for InputOneOf3 and cannot be null");
            }
            this._OfToken = ofToken;
            this._ThatDeposits = thatDeposits;
        }

        /// <summary>
        /// Gets or Sets ContinuationHash
        /// </summary>
        [DataMember(Name = "continuation_hash", IsRequired = true, EmitDefaultValue = true)]
        public string ContinuationHash
        {
            get{ return _ContinuationHash;}
            set
            {
                _ContinuationHash = value;
                _flagContinuationHash = true;
            }
        }
        private string _ContinuationHash;
        private bool _flagContinuationHash;

        /// <summary>
        /// Returns false as ContinuationHash should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContinuationHash()
        {
            return _flagContinuationHash;
        }
        /// <summary>
        /// Gets or Sets InputFromParty
        /// </summary>
        [DataMember(Name = "input_from_party", IsRequired = true, EmitDefaultValue = true)]
        public Party InputFromParty
        {
            get{ return _InputFromParty;}
            set
            {
                _InputFromParty = value;
                _flagInputFromParty = true;
            }
        }
        private Party _InputFromParty;
        private bool _flagInputFromParty;

        /// <summary>
        /// Returns false as InputFromParty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInputFromParty()
        {
            return _flagInputFromParty;
        }
        /// <summary>
        /// Gets or Sets IntoAccount
        /// </summary>
        [DataMember(Name = "into_account", IsRequired = true, EmitDefaultValue = true)]
        public Party IntoAccount
        {
            get{ return _IntoAccount;}
            set
            {
                _IntoAccount = value;
                _flagIntoAccount = true;
            }
        }
        private Party _IntoAccount;
        private bool _flagIntoAccount;

        /// <summary>
        /// Returns false as IntoAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntoAccount()
        {
            return _flagIntoAccount;
        }
        /// <summary>
        /// Gets or Sets MerkleizedContinuation
        /// </summary>
        [DataMember(Name = "merkleized_continuation", IsRequired = true, EmitDefaultValue = true)]
        public Contract MerkleizedContinuation
        {
            get{ return _MerkleizedContinuation;}
            set
            {
                _MerkleizedContinuation = value;
                _flagMerkleizedContinuation = true;
            }
        }
        private Contract _MerkleizedContinuation;
        private bool _flagMerkleizedContinuation;

        /// <summary>
        /// Returns false as MerkleizedContinuation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMerkleizedContinuation()
        {
            return _flagMerkleizedContinuation;
        }
        /// <summary>
        /// Gets or Sets OfToken
        /// </summary>
        [DataMember(Name = "of_token", IsRequired = true, EmitDefaultValue = true)]
        public Token OfToken
        {
            get{ return _OfToken;}
            set
            {
                _OfToken = value;
                _flagOfToken = true;
            }
        }
        private Token _OfToken;
        private bool _flagOfToken;

        /// <summary>
        /// Returns false as OfToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOfToken()
        {
            return _flagOfToken;
        }
        /// <summary>
        /// Gets or Sets ThatDeposits
        /// </summary>
        [DataMember(Name = "that_deposits", IsRequired = true, EmitDefaultValue = true)]
        public int ThatDeposits
        {
            get{ return _ThatDeposits;}
            set
            {
                _ThatDeposits = value;
                _flagThatDeposits = true;
            }
        }
        private int _ThatDeposits;
        private bool _flagThatDeposits;

        /// <summary>
        /// Returns false as ThatDeposits should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeThatDeposits()
        {
            return _flagThatDeposits;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputOneOf3 {\n");
            sb.Append("  ContinuationHash: ").Append(ContinuationHash).Append("\n");
            sb.Append("  InputFromParty: ").Append(InputFromParty).Append("\n");
            sb.Append("  IntoAccount: ").Append(IntoAccount).Append("\n");
            sb.Append("  MerkleizedContinuation: ").Append(MerkleizedContinuation).Append("\n");
            sb.Append("  OfToken: ").Append(OfToken).Append("\n");
            sb.Append("  ThatDeposits: ").Append(ThatDeposits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputOneOf3);
        }

        /// <summary>
        /// Returns true if InputOneOf3 instances are equal
        /// </summary>
        /// <param name="input">Instance of InputOneOf3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputOneOf3 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContinuationHash == input.ContinuationHash ||
                    (this.ContinuationHash != null &&
                    this.ContinuationHash.Equals(input.ContinuationHash))
                ) && 
                (
                    this.InputFromParty == input.InputFromParty ||
                    (this.InputFromParty != null &&
                    this.InputFromParty.Equals(input.InputFromParty))
                ) && 
                (
                    this.IntoAccount == input.IntoAccount ||
                    (this.IntoAccount != null &&
                    this.IntoAccount.Equals(input.IntoAccount))
                ) && 
                (
                    this.MerkleizedContinuation == input.MerkleizedContinuation ||
                    (this.MerkleizedContinuation != null &&
                    this.MerkleizedContinuation.Equals(input.MerkleizedContinuation))
                ) && 
                (
                    this.OfToken == input.OfToken ||
                    (this.OfToken != null &&
                    this.OfToken.Equals(input.OfToken))
                ) && 
                (
                    this.ThatDeposits == input.ThatDeposits ||
                    this.ThatDeposits.Equals(input.ThatDeposits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContinuationHash != null)
                {
                    hashCode = (hashCode * 59) + this.ContinuationHash.GetHashCode();
                }
                if (this.InputFromParty != null)
                {
                    hashCode = (hashCode * 59) + this.InputFromParty.GetHashCode();
                }
                if (this.IntoAccount != null)
                {
                    hashCode = (hashCode * 59) + this.IntoAccount.GetHashCode();
                }
                if (this.MerkleizedContinuation != null)
                {
                    hashCode = (hashCode * 59) + this.MerkleizedContinuation.GetHashCode();
                }
                if (this.OfToken != null)
                {
                    hashCode = (hashCode * 59) + this.OfToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThatDeposits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
