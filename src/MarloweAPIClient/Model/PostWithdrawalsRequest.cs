/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// PostWithdrawalsRequest
    /// </summary>
    [DataContract(Name = "PostWithdrawalsRequest")]
    public partial class PostWithdrawalsRequest : IEquatable<PostWithdrawalsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostWithdrawalsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostWithdrawalsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostWithdrawalsRequest" /> class.
        /// </summary>
        /// <param name="payouts">payouts (required).</param>
        public PostWithdrawalsRequest(List<string> payouts = default(List<string>))
        {
            // to ensure "payouts" is required (not null)
            if (payouts == null)
            {
                throw new ArgumentNullException("payouts is a required property for PostWithdrawalsRequest and cannot be null");
            }
            this.Payouts = payouts;
        }

        /// <summary>
        /// Gets or Sets Payouts
        /// </summary>
        [DataMember(Name = "payouts", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Payouts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostWithdrawalsRequest {\n");
            sb.Append("  Payouts: ").Append(Payouts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostWithdrawalsRequest);
        }

        /// <summary>
        /// Returns true if PostWithdrawalsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostWithdrawalsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostWithdrawalsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Payouts == input.Payouts ||
                    this.Payouts != null &&
                    input.Payouts != null &&
                    this.Payouts.SequenceEqual(input.Payouts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Payouts != null)
                {
                    hashCode = (hashCode * 59) + this.Payouts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
