/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Equal
    /// </summary>
    [DataContract(Name = "Equal")]
    public partial class Equal : IEquatable<Equal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Equal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Equal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Equal" /> class.
        /// </summary>
        /// <param name="equalTo">equalTo (required).</param>
        /// <param name="value">value (required).</param>
        public Equal(Value equalTo = default(Value), Value value = default(Value))
        {
            // to ensure "equalTo" is required (not null)
            if (equalTo == null)
            {
                throw new ArgumentNullException("equalTo is a required property for Equal and cannot be null");
            }
            this.EqualTo = equalTo;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for Equal and cannot be null");
            }
            this.Value = value;
        }

        /// <summary>
        /// Gets or Sets EqualTo
        /// </summary>
        [DataMember(Name = "equal_to", IsRequired = true, EmitDefaultValue = true)]
        public Value EqualTo { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public Value Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Equal {\n");
            sb.Append("  EqualTo: ").Append(EqualTo).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Equal);
        }

        /// <summary>
        /// Returns true if Equal instances are equal
        /// </summary>
        /// <param name="input">Instance of Equal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Equal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EqualTo == input.EqualTo ||
                    (this.EqualTo != null &&
                    this.EqualTo.Equals(input.EqualTo))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EqualTo != null)
                {
                    hashCode = (hashCode * 59) + this.EqualTo.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
