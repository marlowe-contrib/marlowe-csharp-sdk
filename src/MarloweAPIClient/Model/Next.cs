/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// Describe the reducibility (Can be Reduced ?) and the applicability (Can Inputs be Applied ?) for a given contract.
    /// </summary>
    [DataContract(Name = "Next")]
    public partial class Next : IEquatable<Next>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Next" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Next() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Next" /> class.
        /// </summary>
        /// <param name="applicableInputs">applicableInputs (required).</param>
        /// <param name="canReduce">Indicates if a given contract can be reduced (apply []) or not. (required).</param>
        public Next(ApplicableInputs applicableInputs = default(ApplicableInputs), bool canReduce = default(bool))
        {
            // to ensure "applicableInputs" is required (not null)
            if (applicableInputs == null)
            {
                throw new ArgumentNullException("applicableInputs is a required property for Next and cannot be null");
            }
            this._ApplicableInputs = applicableInputs;
            this._CanReduce = canReduce;
        }

        /// <summary>
        /// Gets or Sets ApplicableInputs
        /// </summary>
        [DataMember(Name = "applicable_inputs", IsRequired = true, EmitDefaultValue = true)]
        public ApplicableInputs ApplicableInputs
        {
            get{ return _ApplicableInputs;}
            set
            {
                _ApplicableInputs = value;
                _flagApplicableInputs = true;
            }
        }
        private ApplicableInputs _ApplicableInputs;
        private bool _flagApplicableInputs;

        /// <summary>
        /// Returns false as ApplicableInputs should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicableInputs()
        {
            return _flagApplicableInputs;
        }
        /// <summary>
        /// Indicates if a given contract can be reduced (apply []) or not.
        /// </summary>
        /// <value>Indicates if a given contract can be reduced (apply []) or not.</value>
        [DataMember(Name = "can_reduce", IsRequired = true, EmitDefaultValue = true)]
        public bool CanReduce
        {
            get{ return _CanReduce;}
            set
            {
                _CanReduce = value;
                _flagCanReduce = true;
            }
        }
        private bool _CanReduce;
        private bool _flagCanReduce;

        /// <summary>
        /// Returns false as CanReduce should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCanReduce()
        {
            return _flagCanReduce;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Next {\n");
            sb.Append("  ApplicableInputs: ").Append(ApplicableInputs).Append("\n");
            sb.Append("  CanReduce: ").Append(CanReduce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Next);
        }

        /// <summary>
        /// Returns true if Next instances are equal
        /// </summary>
        /// <param name="input">Instance of Next to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Next input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicableInputs == input.ApplicableInputs ||
                    (this.ApplicableInputs != null &&
                    this.ApplicableInputs.Equals(input.ApplicableInputs))
                ) && 
                (
                    this.CanReduce == input.CanReduce ||
                    this.CanReduce.Equals(input.CanReduce)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicableInputs != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicableInputs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CanReduce.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
