/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// PostContractsRequest
    /// </summary>
    [DataContract(Name = "PostContractsRequest")]
    public partial class PostContractsRequest : IEquatable<PostContractsRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>

        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public MarloweVersion VarVersion
        {
            get{ return _VarVersion;}
            set
            {
                _VarVersion = value;
                _flagVarVersion = true;
            }
        }
        private MarloweVersion _VarVersion;
        private bool _flagVarVersion;

        /// <summary>
        /// Returns false as VarVersion should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarVersion()
        {
            return _flagVarVersion;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostContractsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostContractsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostContractsRequest" /> class.
        /// </summary>
        /// <param name="contract">contract (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="minUTxODeposit">minUTxODeposit.</param>
        /// <param name="roles">roles.</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        public PostContractsRequest(PostContractsRequestContract contract = default(PostContractsRequestContract), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), long minUTxODeposit = default(long), RolesConfig roles = default(RolesConfig), Dictionary<string, Object> tags = default(Dictionary<string, Object>), MarloweVersion varVersion = default(MarloweVersion))
        {
            // to ensure "contract" is required (not null)
            if (contract == null)
            {
                throw new ArgumentNullException("contract is a required property for PostContractsRequest and cannot be null");
            }
            this._Contract = contract;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for PostContractsRequest and cannot be null");
            }
            this._Metadata = metadata;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for PostContractsRequest and cannot be null");
            }
            this._Tags = tags;
            this._VarVersion = varVersion;
            this._MinUTxODeposit = minUTxODeposit;
            if (this.MinUTxODeposit != null)
            {
                this._flagMinUTxODeposit = true;
            }
            this._Roles = roles;
            if (this.Roles != null)
            {
                this._flagRoles = true;
            }
        }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name = "contract", IsRequired = true, EmitDefaultValue = true)]
        public PostContractsRequestContract Contract
        {
            get{ return _Contract;}
            set
            {
                _Contract = value;
                _flagContract = true;
            }
        }
        private PostContractsRequestContract _Contract;
        private bool _flagContract;

        /// <summary>
        /// Returns false as Contract should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContract()
        {
            return _flagContract;
        }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Dictionary<string, Object> _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Gets or Sets MinUTxODeposit
        /// </summary>
        [DataMember(Name = "minUTxODeposit", EmitDefaultValue = false)]
        public long MinUTxODeposit
        {
            get{ return _MinUTxODeposit;}
            set
            {
                _MinUTxODeposit = value;
                _flagMinUTxODeposit = true;
            }
        }
        private long _MinUTxODeposit;
        private bool _flagMinUTxODeposit;

        /// <summary>
        /// Returns false as MinUTxODeposit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinUTxODeposit()
        {
            return _flagMinUTxODeposit;
        }
        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", EmitDefaultValue = false)]
        public RolesConfig Roles
        {
            get{ return _Roles;}
            set
            {
                _Roles = value;
                _flagRoles = true;
            }
        }
        private RolesConfig _Roles;
        private bool _flagRoles;

        /// <summary>
        /// Returns false as Roles should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRoles()
        {
            return _flagRoles;
        }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Tags
        {
            get{ return _Tags;}
            set
            {
                _Tags = value;
                _flagTags = true;
            }
        }
        private Dictionary<string, Object> _Tags;
        private bool _flagTags;

        /// <summary>
        /// Returns false as Tags should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTags()
        {
            return _flagTags;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostContractsRequest {\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MinUTxODeposit: ").Append(MinUTxODeposit).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostContractsRequest);
        }

        /// <summary>
        /// Returns true if PostContractsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostContractsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostContractsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.MinUTxODeposit == input.MinUTxODeposit ||
                    this.MinUTxODeposit.Equals(input.MinUTxODeposit)
                ) && 
                (
                    this.Roles == input.Roles ||
                    (this.Roles != null &&
                    this.Roles.Equals(input.Roles))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinUTxODeposit.GetHashCode();
                if (this.Roles != null)
                {
                    hashCode = (hashCode * 59) + this.Roles.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MinUTxODeposit (long) maximum
            if (this.MinUTxODeposit > (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinUTxODeposit, must be a value less than or equal to -1.", new [] { "MinUTxODeposit" });
            }

            // MinUTxODeposit (long) minimum
            if (this.MinUTxODeposit < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinUTxODeposit, must be a value greater than or equal to 0.", new [] { "MinUTxODeposit" });
            }

            yield break;
        }
    }

}
