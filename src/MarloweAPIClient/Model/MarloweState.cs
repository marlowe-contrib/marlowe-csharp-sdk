/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// The on-chain state of a Marlowe contract.
    /// </summary>
    [DataContract(Name = "MarloweState")]
    public partial class MarloweState : IEquatable<MarloweState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarloweState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarloweState() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarloweState" /> class.
        /// </summary>
        /// <param name="accounts">accounts (required).</param>
        /// <param name="boundValues">boundValues (required).</param>
        /// <param name="choices">choices (required).</param>
        /// <param name="minTime">minTime (required).</param>
        public MarloweState(List<List<MarloweStateAccountsInnerInner>> accounts = default(List<List<MarloweStateAccountsInnerInner>>), List<List<MarloweStateBoundValuesInnerInner>> boundValues = default(List<List<MarloweStateBoundValuesInnerInner>>), List<List<MarloweStateChoicesInnerInner>> choices = default(List<List<MarloweStateChoicesInnerInner>>), int minTime = default(int))
        {
            // to ensure "accounts" is required (not null)
            if (accounts == null)
            {
                throw new ArgumentNullException("accounts is a required property for MarloweState and cannot be null");
            }
            this._Accounts = accounts;
            // to ensure "boundValues" is required (not null)
            if (boundValues == null)
            {
                throw new ArgumentNullException("boundValues is a required property for MarloweState and cannot be null");
            }
            this._BoundValues = boundValues;
            // to ensure "choices" is required (not null)
            if (choices == null)
            {
                throw new ArgumentNullException("choices is a required property for MarloweState and cannot be null");
            }
            this._Choices = choices;
            this._MinTime = minTime;
        }

        /// <summary>
        /// Gets or Sets Accounts
        /// </summary>
        [DataMember(Name = "accounts", IsRequired = true, EmitDefaultValue = true)]
        public List<List<MarloweStateAccountsInnerInner>> Accounts
        {
            get{ return _Accounts;}
            set
            {
                _Accounts = value;
                _flagAccounts = true;
            }
        }
        private List<List<MarloweStateAccountsInnerInner>> _Accounts;
        private bool _flagAccounts;

        /// <summary>
        /// Returns false as Accounts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccounts()
        {
            return _flagAccounts;
        }
        /// <summary>
        /// Gets or Sets BoundValues
        /// </summary>
        [DataMember(Name = "boundValues", IsRequired = true, EmitDefaultValue = true)]
        public List<List<MarloweStateBoundValuesInnerInner>> BoundValues
        {
            get{ return _BoundValues;}
            set
            {
                _BoundValues = value;
                _flagBoundValues = true;
            }
        }
        private List<List<MarloweStateBoundValuesInnerInner>> _BoundValues;
        private bool _flagBoundValues;

        /// <summary>
        /// Returns false as BoundValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBoundValues()
        {
            return _flagBoundValues;
        }
        /// <summary>
        /// Gets or Sets Choices
        /// </summary>
        [DataMember(Name = "choices", IsRequired = true, EmitDefaultValue = true)]
        public List<List<MarloweStateChoicesInnerInner>> Choices
        {
            get{ return _Choices;}
            set
            {
                _Choices = value;
                _flagChoices = true;
            }
        }
        private List<List<MarloweStateChoicesInnerInner>> _Choices;
        private bool _flagChoices;

        /// <summary>
        /// Returns false as Choices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChoices()
        {
            return _flagChoices;
        }
        /// <summary>
        /// Gets or Sets MinTime
        /// </summary>
        [DataMember(Name = "minTime", IsRequired = true, EmitDefaultValue = true)]
        public int MinTime
        {
            get{ return _MinTime;}
            set
            {
                _MinTime = value;
                _flagMinTime = true;
            }
        }
        private int _MinTime;
        private bool _flagMinTime;

        /// <summary>
        /// Returns false as MinTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinTime()
        {
            return _flagMinTime;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarloweState {\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  BoundValues: ").Append(BoundValues).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  MinTime: ").Append(MinTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarloweState);
        }

        /// <summary>
        /// Returns true if MarloweState instances are equal
        /// </summary>
        /// <param name="input">Instance of MarloweState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarloweState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.BoundValues == input.BoundValues ||
                    this.BoundValues != null &&
                    input.BoundValues != null &&
                    this.BoundValues.SequenceEqual(input.BoundValues)
                ) && 
                (
                    this.Choices == input.Choices ||
                    this.Choices != null &&
                    input.Choices != null &&
                    this.Choices.SequenceEqual(input.Choices)
                ) && 
                (
                    this.MinTime == input.MinTime ||
                    this.MinTime.Equals(input.MinTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accounts != null)
                {
                    hashCode = (hashCode * 59) + this.Accounts.GetHashCode();
                }
                if (this.BoundValues != null)
                {
                    hashCode = (hashCode * 59) + this.BoundValues.GetHashCode();
                }
                if (this.Choices != null)
                {
                    hashCode = (hashCode * 59) + this.Choices.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
