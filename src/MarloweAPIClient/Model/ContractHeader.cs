/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// ContractHeader
    /// </summary>
    [DataContract(Name = "ContractHeader")]
    public partial class ContractHeader : IEquatable<ContractHeader>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public TxStatus Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private TxStatus _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>

        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public MarloweVersion VarVersion
        {
            get{ return _VarVersion;}
            set
            {
                _VarVersion = value;
                _flagVarVersion = true;
            }
        }
        private MarloweVersion _VarVersion;
        private bool _flagVarVersion;

        /// <summary>
        /// Returns false as VarVersion should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarVersion()
        {
            return _flagVarVersion;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContractHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractHeader" /> class.
        /// </summary>
        /// <param name="block">block.</param>
        /// <param name="continuations">continuations.</param>
        /// <param name="contractId">A reference to a transaction output with a transaction ID and index. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="roleTokenMintingPolicyId">The hex-encoded minting policy ID for a native Cardano token (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        public ContractHeader(BlockHeader block = default(BlockHeader), string continuations = default(string), string contractId = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), string roleTokenMintingPolicyId = default(string), TxStatus status = default(TxStatus), Dictionary<string, Object> tags = default(Dictionary<string, Object>), MarloweVersion varVersion = default(MarloweVersion))
        {
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new ArgumentNullException("contractId is a required property for ContractHeader and cannot be null");
            }
            this._ContractId = contractId;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for ContractHeader and cannot be null");
            }
            this._Metadata = metadata;
            // to ensure "roleTokenMintingPolicyId" is required (not null)
            if (roleTokenMintingPolicyId == null)
            {
                throw new ArgumentNullException("roleTokenMintingPolicyId is a required property for ContractHeader and cannot be null");
            }
            this._RoleTokenMintingPolicyId = roleTokenMintingPolicyId;
            this._Status = status;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for ContractHeader and cannot be null");
            }
            this._Tags = tags;
            this._VarVersion = varVersion;
            this._Block = block;
            if (this.Block != null)
            {
                this._flagBlock = true;
            }
            this._Continuations = continuations;
            if (this.Continuations != null)
            {
                this._flagContinuations = true;
            }
        }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public BlockHeader Block
        {
            get{ return _Block;}
            set
            {
                _Block = value;
                _flagBlock = true;
            }
        }
        private BlockHeader _Block;
        private bool _flagBlock;

        /// <summary>
        /// Returns false as Block should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBlock()
        {
            return _flagBlock;
        }
        /// <summary>
        /// Gets or Sets Continuations
        /// </summary>
        [DataMember(Name = "continuations", EmitDefaultValue = false)]
        public string Continuations
        {
            get{ return _Continuations;}
            set
            {
                _Continuations = value;
                _flagContinuations = true;
            }
        }
        private string _Continuations;
        private bool _flagContinuations;

        /// <summary>
        /// Returns false as Continuations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContinuations()
        {
            return _flagContinuations;
        }
        /// <summary>
        /// A reference to a transaction output with a transaction ID and index.
        /// </summary>
        /// <value>A reference to a transaction output with a transaction ID and index.</value>
        /// <example>98d601c9307dd43307cf68a03aad0086d4e07a789b66919ccf9f7f7676577eb7#1</example>
        [DataMember(Name = "contractId", IsRequired = true, EmitDefaultValue = true)]
        public string ContractId
        {
            get{ return _ContractId;}
            set
            {
                _ContractId = value;
                _flagContractId = true;
            }
        }
        private string _ContractId;
        private bool _flagContractId;

        /// <summary>
        /// Returns false as ContractId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContractId()
        {
            return _flagContractId;
        }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Dictionary<string, Object> _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// The hex-encoded minting policy ID for a native Cardano token
        /// </summary>
        /// <value>The hex-encoded minting policy ID for a native Cardano token</value>
        [DataMember(Name = "roleTokenMintingPolicyId", IsRequired = true, EmitDefaultValue = true)]
        public string RoleTokenMintingPolicyId
        {
            get{ return _RoleTokenMintingPolicyId;}
            set
            {
                _RoleTokenMintingPolicyId = value;
                _flagRoleTokenMintingPolicyId = true;
            }
        }
        private string _RoleTokenMintingPolicyId;
        private bool _flagRoleTokenMintingPolicyId;

        /// <summary>
        /// Returns false as RoleTokenMintingPolicyId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRoleTokenMintingPolicyId()
        {
            return _flagRoleTokenMintingPolicyId;
        }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Tags
        {
            get{ return _Tags;}
            set
            {
                _Tags = value;
                _flagTags = true;
            }
        }
        private Dictionary<string, Object> _Tags;
        private bool _flagTags;

        /// <summary>
        /// Returns false as Tags should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTags()
        {
            return _flagTags;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractHeader {\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Continuations: ").Append(Continuations).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  RoleTokenMintingPolicyId: ").Append(RoleTokenMintingPolicyId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractHeader);
        }

        /// <summary>
        /// Returns true if ContractHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractHeader input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Continuations == input.Continuations ||
                    (this.Continuations != null &&
                    this.Continuations.Equals(input.Continuations))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.RoleTokenMintingPolicyId == input.RoleTokenMintingPolicyId ||
                    (this.RoleTokenMintingPolicyId != null &&
                    this.RoleTokenMintingPolicyId.Equals(input.RoleTokenMintingPolicyId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                if (this.Continuations != null)
                {
                    hashCode = (hashCode * 59) + this.Continuations.GetHashCode();
                }
                if (this.ContractId != null)
                {
                    hashCode = (hashCode * 59) + this.ContractId.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.RoleTokenMintingPolicyId != null)
                {
                    hashCode = (hashCode * 59) + this.RoleTokenMintingPolicyId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.ContractId != null) {
                // ContractId (string) pattern
                Regex regexContractId = new Regex(@"^[a-fA-F0-9]{64}#[0-9]+$", RegexOptions.CultureInvariant);
                if (!regexContractId.Match(this.ContractId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContractId, must match a pattern of " + regexContractId, new [] { "ContractId" });
                }
            }

            if (this.RoleTokenMintingPolicyId != null) {
                // RoleTokenMintingPolicyId (string) pattern
                Regex regexRoleTokenMintingPolicyId = new Regex(@"^[a-fA-F0-9]*$", RegexOptions.CultureInvariant);
                if (!regexRoleTokenMintingPolicyId.Match(this.RoleTokenMintingPolicyId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RoleTokenMintingPolicyId, must match a pattern of " + regexRoleTokenMintingPolicyId, new [] { "RoleTokenMintingPolicyId" });
                }
            }

            yield break;
        }
    }

}
