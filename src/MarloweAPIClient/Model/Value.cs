/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A time-varying expression that evaluates to a boolean
    /// </summary>
    [JsonConverter(typeof(ValueJsonConverter))]
    [DataContract(Name = "Value")]
    public partial class Value : AbstractOpenAPISchema, IEquatable<Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf.</param>
        public Value(ValueOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="long" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of long.</param>
        public Value(long actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf1.</param>
        public Value(ValueOneOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf2.</param>
        public Value(ValueOneOf2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf3" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf3.</param>
        public Value(ValueOneOf3 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf4" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf4.</param>
        public Value(ValueOneOf4 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf5" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf5.</param>
        public Value(ValueOneOf5 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf6" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf6.</param>
        public Value(ValueOneOf6 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="string" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of string.</param>
        public Value(string actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf7" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf7.</param>
        public Value(ValueOneOf7 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class
        /// with the <see cref="ValueOneOf8" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueOneOf8.</param>
        public Value(ValueOneOf8 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ValueOneOf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOneOf1))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOneOf2))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOneOf3))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOneOf4))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOneOf5))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOneOf6))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOneOf7))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ValueOneOf8))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(long))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(string))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ValueOneOf, ValueOneOf1, ValueOneOf2, ValueOneOf3, ValueOneOf4, ValueOneOf5, ValueOneOf6, ValueOneOf7, ValueOneOf8, long, string");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf`. If the actual instance is not `ValueOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf</returns>
        public ValueOneOf GetValueOneOf()
        {
            return (ValueOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `long`. If the actual instance is not `long`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of long</returns>
        public long GetLong()
        {
            return (long)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf1`. If the actual instance is not `ValueOneOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf1</returns>
        public ValueOneOf1 GetValueOneOf1()
        {
            return (ValueOneOf1)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf2`. If the actual instance is not `ValueOneOf2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf2</returns>
        public ValueOneOf2 GetValueOneOf2()
        {
            return (ValueOneOf2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf3`. If the actual instance is not `ValueOneOf3`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf3</returns>
        public ValueOneOf3 GetValueOneOf3()
        {
            return (ValueOneOf3)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf4`. If the actual instance is not `ValueOneOf4`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf4</returns>
        public ValueOneOf4 GetValueOneOf4()
        {
            return (ValueOneOf4)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf5`. If the actual instance is not `ValueOneOf5`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf5</returns>
        public ValueOneOf5 GetValueOneOf5()
        {
            return (ValueOneOf5)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf6`. If the actual instance is not `ValueOneOf6`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf6</returns>
        public ValueOneOf6 GetValueOneOf6()
        {
            return (ValueOneOf6)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `string`. If the actual instance is not `string`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of string</returns>
        public string GetString()
        {
            return (string)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf7`. If the actual instance is not `ValueOneOf7`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf7</returns>
        public ValueOneOf7 GetValueOneOf7()
        {
            return (ValueOneOf7)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueOneOf8`. If the actual instance is not `ValueOneOf8`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueOneOf8</returns>
        public ValueOneOf8 GetValueOneOf8()
        {
            return (ValueOneOf8)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Value {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, Value.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of Value
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of Value</returns>
        public static Value FromJson(string jsonString)
        {
            Value newValue = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newValue;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf1).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf1>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf1>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf1: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf2).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf2>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf2>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf3).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf3>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf3>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf3");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf3: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf4).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf4>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf4>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf4");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf4: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf5).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf5>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf5>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf5");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf5: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf6).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf6>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf6>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf6");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf6: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf7).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf7>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf7>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf7");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf7: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ValueOneOf8).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf8>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<ValueOneOf8>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ValueOneOf8");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueOneOf8: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(long).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<long>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<long>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("long");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into long: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(string).GetProperty("AdditionalProperties") == null)
                {
                    newValue = new Value(JsonConvert.DeserializeObject<string>(jsonString, Value.SerializerSettings));
                }
                else
                {
                    newValue = new Value(JsonConvert.DeserializeObject<string>(jsonString, Value.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("string");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into string: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newValue;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Value);
        }

        /// <summary>
        /// Returns true if Value instances are equal
        /// </summary>
        /// <param name="input">Instance of Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Value input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for Value
    /// </summary>
    public class ValueJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(Value).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return Value.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
