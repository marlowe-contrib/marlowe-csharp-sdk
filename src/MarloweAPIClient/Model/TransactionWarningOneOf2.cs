/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// A warning for partial payment.
    /// </summary>
    [DataContract(Name = "TransactionWarning_oneOf_2")]
    public partial class TransactionWarningOneOf2 : IEquatable<TransactionWarningOneOf2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionWarningOneOf2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionWarningOneOf2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionWarningOneOf2" /> class.
        /// </summary>
        /// <param name="account">account (required).</param>
        /// <param name="askedToPay">askedToPay (required).</param>
        /// <param name="butOnlyPaid">butOnlyPaid (required).</param>
        /// <param name="ofToken">ofToken (required).</param>
        /// <param name="toPayee">toPayee (required).</param>
        public TransactionWarningOneOf2(Party account = default(Party), int askedToPay = default(int), int butOnlyPaid = default(int), Token ofToken = default(Token), Payee toPayee = default(Payee))
        {
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new ArgumentNullException("account is a required property for TransactionWarningOneOf2 and cannot be null");
            }
            this._Account = account;
            this._AskedToPay = askedToPay;
            this._ButOnlyPaid = butOnlyPaid;
            // to ensure "ofToken" is required (not null)
            if (ofToken == null)
            {
                throw new ArgumentNullException("ofToken is a required property for TransactionWarningOneOf2 and cannot be null");
            }
            this._OfToken = ofToken;
            // to ensure "toPayee" is required (not null)
            if (toPayee == null)
            {
                throw new ArgumentNullException("toPayee is a required property for TransactionWarningOneOf2 and cannot be null");
            }
            this._ToPayee = toPayee;
        }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", IsRequired = true, EmitDefaultValue = true)]
        public Party Account
        {
            get{ return _Account;}
            set
            {
                _Account = value;
                _flagAccount = true;
            }
        }
        private Party _Account;
        private bool _flagAccount;

        /// <summary>
        /// Returns false as Account should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccount()
        {
            return _flagAccount;
        }
        /// <summary>
        /// Gets or Sets AskedToPay
        /// </summary>
        [DataMember(Name = "asked_to_pay", IsRequired = true, EmitDefaultValue = true)]
        public int AskedToPay
        {
            get{ return _AskedToPay;}
            set
            {
                _AskedToPay = value;
                _flagAskedToPay = true;
            }
        }
        private int _AskedToPay;
        private bool _flagAskedToPay;

        /// <summary>
        /// Returns false as AskedToPay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAskedToPay()
        {
            return _flagAskedToPay;
        }
        /// <summary>
        /// Gets or Sets ButOnlyPaid
        /// </summary>
        [DataMember(Name = "but_only_paid", IsRequired = true, EmitDefaultValue = true)]
        public int ButOnlyPaid
        {
            get{ return _ButOnlyPaid;}
            set
            {
                _ButOnlyPaid = value;
                _flagButOnlyPaid = true;
            }
        }
        private int _ButOnlyPaid;
        private bool _flagButOnlyPaid;

        /// <summary>
        /// Returns false as ButOnlyPaid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeButOnlyPaid()
        {
            return _flagButOnlyPaid;
        }
        /// <summary>
        /// Gets or Sets OfToken
        /// </summary>
        [DataMember(Name = "of_token", IsRequired = true, EmitDefaultValue = true)]
        public Token OfToken
        {
            get{ return _OfToken;}
            set
            {
                _OfToken = value;
                _flagOfToken = true;
            }
        }
        private Token _OfToken;
        private bool _flagOfToken;

        /// <summary>
        /// Returns false as OfToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOfToken()
        {
            return _flagOfToken;
        }
        /// <summary>
        /// Gets or Sets ToPayee
        /// </summary>
        [DataMember(Name = "to_payee", IsRequired = true, EmitDefaultValue = true)]
        public Payee ToPayee
        {
            get{ return _ToPayee;}
            set
            {
                _ToPayee = value;
                _flagToPayee = true;
            }
        }
        private Payee _ToPayee;
        private bool _flagToPayee;

        /// <summary>
        /// Returns false as ToPayee should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeToPayee()
        {
            return _flagToPayee;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionWarningOneOf2 {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  AskedToPay: ").Append(AskedToPay).Append("\n");
            sb.Append("  ButOnlyPaid: ").Append(ButOnlyPaid).Append("\n");
            sb.Append("  OfToken: ").Append(OfToken).Append("\n");
            sb.Append("  ToPayee: ").Append(ToPayee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionWarningOneOf2);
        }

        /// <summary>
        /// Returns true if TransactionWarningOneOf2 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionWarningOneOf2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionWarningOneOf2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.AskedToPay == input.AskedToPay ||
                    this.AskedToPay.Equals(input.AskedToPay)
                ) && 
                (
                    this.ButOnlyPaid == input.ButOnlyPaid ||
                    this.ButOnlyPaid.Equals(input.ButOnlyPaid)
                ) && 
                (
                    this.OfToken == input.OfToken ||
                    (this.OfToken != null &&
                    this.OfToken.Equals(input.OfToken))
                ) && 
                (
                    this.ToPayee == input.ToPayee ||
                    (this.ToPayee != null &&
                    this.ToPayee.Equals(input.ToPayee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AskedToPay.GetHashCode();
                hashCode = (hashCode * 59) + this.ButOnlyPaid.GetHashCode();
                if (this.OfToken != null)
                {
                    hashCode = (hashCode * 59) + this.OfToken.GetHashCode();
                }
                if (this.ToPayee != null)
                {
                    hashCode = (hashCode * 59) + this.ToPayee.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
