/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarloweAPIClient.Client.OpenAPIDateConverter;

namespace MarloweAPIClient.Model
{
    /// <summary>
    /// TokenInAccount
    /// </summary>
    [DataContract(Name = "TokenInAccount")]
    public partial class TokenInAccount : IEquatable<TokenInAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenInAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenInAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenInAccount" /> class.
        /// </summary>
        /// <param name="amountOfToken">amountOfToken (required).</param>
        /// <param name="inAccount">inAccount (required).</param>
        public TokenInAccount(Token amountOfToken = default(Token), Party inAccount = default(Party))
        {
            // to ensure "amountOfToken" is required (not null)
            if (amountOfToken == null)
            {
                throw new ArgumentNullException("amountOfToken is a required property for TokenInAccount and cannot be null");
            }
            this._AmountOfToken = amountOfToken;
            // to ensure "inAccount" is required (not null)
            if (inAccount == null)
            {
                throw new ArgumentNullException("inAccount is a required property for TokenInAccount and cannot be null");
            }
            this._InAccount = inAccount;
        }

        /// <summary>
        /// Gets or Sets AmountOfToken
        /// </summary>
        [DataMember(Name = "amount_of_token", IsRequired = true, EmitDefaultValue = true)]
        public Token AmountOfToken
        {
            get{ return _AmountOfToken;}
            set
            {
                _AmountOfToken = value;
                _flagAmountOfToken = true;
            }
        }
        private Token _AmountOfToken;
        private bool _flagAmountOfToken;

        /// <summary>
        /// Returns false as AmountOfToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOfToken()
        {
            return _flagAmountOfToken;
        }
        /// <summary>
        /// Gets or Sets InAccount
        /// </summary>
        [DataMember(Name = "in_account", IsRequired = true, EmitDefaultValue = true)]
        public Party InAccount
        {
            get{ return _InAccount;}
            set
            {
                _InAccount = value;
                _flagInAccount = true;
            }
        }
        private Party _InAccount;
        private bool _flagInAccount;

        /// <summary>
        /// Returns false as InAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInAccount()
        {
            return _flagInAccount;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenInAccount {\n");
            sb.Append("  AmountOfToken: ").Append(AmountOfToken).Append("\n");
            sb.Append("  InAccount: ").Append(InAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenInAccount);
        }

        /// <summary>
        /// Returns true if TokenInAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenInAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenInAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AmountOfToken == input.AmountOfToken ||
                    (this.AmountOfToken != null &&
                    this.AmountOfToken.Equals(input.AmountOfToken))
                ) && 
                (
                    this.InAccount == input.InAccount ||
                    (this.InAccount != null &&
                    this.InAccount.Equals(input.InAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountOfToken != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOfToken.GetHashCode();
                }
                if (this.InAccount != null)
                {
                    hashCode = (hashCode * 59) + this.InAccount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
